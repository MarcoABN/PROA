{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PrivateConstructorError } from \"../errors\";\nimport PDFObject from \"./PDFObject\";\nimport CharCodes from \"../syntax/CharCodes\";\nimport { IsIrregular } from \"../syntax/Irregular\";\nimport { charFromHexCode, copyStringIntoBuffer, toCharCode, toHexString } from \"../../utils\";\nvar decodeName = function (name) {\n  return name.replace(/#([\\dABCDEF]{2})/g, function (_, hex) {\n    return charFromHexCode(hex);\n  });\n};\nvar isRegularChar = function (charCode) {\n  return charCode >= CharCodes.ExclamationPoint && charCode <= CharCodes.Tilde && !IsIrregular[charCode];\n};\nvar ENFORCER = {};\nvar pool = new Map();\nvar PDFName = /** @class */function (_super) {\n  __extends(PDFName, _super);\n  function PDFName(enforcer, name) {\n    var _this = this;\n    if (enforcer !== ENFORCER) throw new PrivateConstructorError('PDFName');\n    _this = _super.call(this) || this;\n    var encodedName = '/';\n    for (var idx = 0, len = name.length; idx < len; idx++) {\n      var character = name[idx];\n      var code = toCharCode(character);\n      encodedName += isRegularChar(code) ? character : \"#\" + toHexString(code);\n    }\n    _this.encodedName = encodedName;\n    return _this;\n  }\n  PDFName.prototype.asBytes = function () {\n    var bytes = [];\n    var hex = '';\n    var escaped = false;\n    var pushByte = function (byte) {\n      if (byte !== undefined) bytes.push(byte);\n      escaped = false;\n    };\n    for (var idx = 1, len = this.encodedName.length; idx < len; idx++) {\n      var char = this.encodedName[idx];\n      var byte = toCharCode(char);\n      var nextChar = this.encodedName[idx + 1];\n      if (!escaped) {\n        if (byte === CharCodes.Hash) escaped = true;else pushByte(byte);\n      } else {\n        if (byte >= CharCodes.Zero && byte <= CharCodes.Nine || byte >= CharCodes.a && byte <= CharCodes.f || byte >= CharCodes.A && byte <= CharCodes.F) {\n          hex += char;\n          if (hex.length === 2 || !(nextChar >= '0' && nextChar <= '9' || nextChar >= 'a' && nextChar <= 'f' || nextChar >= 'A' && nextChar <= 'F')) {\n            pushByte(parseInt(hex, 16));\n            hex = '';\n          }\n        } else {\n          pushByte(byte);\n        }\n      }\n    }\n    return new Uint8Array(bytes);\n  };\n  // TODO: This should probably use `utf8Decode()`\n  // TODO: Polyfill Array.from?\n  PDFName.prototype.decodeText = function () {\n    var bytes = this.asBytes();\n    return String.fromCharCode.apply(String, Array.from(bytes));\n  };\n  PDFName.prototype.asString = function () {\n    return this.encodedName;\n  };\n  /** @deprecated in favor of [[PDFName.asString]] */\n  PDFName.prototype.value = function () {\n    return this.encodedName;\n  };\n  PDFName.prototype.clone = function () {\n    return this;\n  };\n  PDFName.prototype.toString = function () {\n    return this.encodedName;\n  };\n  PDFName.prototype.sizeInBytes = function () {\n    return this.encodedName.length;\n  };\n  PDFName.prototype.copyBytesInto = function (buffer, offset) {\n    offset += copyStringIntoBuffer(this.encodedName, buffer, offset);\n    return this.encodedName.length;\n  };\n  PDFName.of = function (name) {\n    var decodedValue = decodeName(name);\n    var instance = pool.get(decodedValue);\n    if (!instance) {\n      instance = new PDFName(ENFORCER, decodedValue);\n      pool.set(decodedValue, instance);\n    }\n    return instance;\n  };\n  /* tslint:disable member-ordering */\n  PDFName.Length = PDFName.of('Length');\n  PDFName.FlateDecode = PDFName.of('FlateDecode');\n  PDFName.Resources = PDFName.of('Resources');\n  PDFName.Font = PDFName.of('Font');\n  PDFName.XObject = PDFName.of('XObject');\n  PDFName.ExtGState = PDFName.of('ExtGState');\n  PDFName.Contents = PDFName.of('Contents');\n  PDFName.Type = PDFName.of('Type');\n  PDFName.Parent = PDFName.of('Parent');\n  PDFName.MediaBox = PDFName.of('MediaBox');\n  PDFName.Page = PDFName.of('Page');\n  PDFName.Annots = PDFName.of('Annots');\n  PDFName.TrimBox = PDFName.of('TrimBox');\n  PDFName.ArtBox = PDFName.of('ArtBox');\n  PDFName.BleedBox = PDFName.of('BleedBox');\n  PDFName.CropBox = PDFName.of('CropBox');\n  PDFName.Rotate = PDFName.of('Rotate');\n  PDFName.Title = PDFName.of('Title');\n  PDFName.Author = PDFName.of('Author');\n  PDFName.Subject = PDFName.of('Subject');\n  PDFName.Creator = PDFName.of('Creator');\n  PDFName.Keywords = PDFName.of('Keywords');\n  PDFName.Producer = PDFName.of('Producer');\n  PDFName.CreationDate = PDFName.of('CreationDate');\n  PDFName.ModDate = PDFName.of('ModDate');\n  return PDFName;\n}(PDFObject);\nexport default PDFName;","map":{"version":3,"names":["__extends","PrivateConstructorError","PDFObject","CharCodes","IsIrregular","charFromHexCode","copyStringIntoBuffer","toCharCode","toHexString","decodeName","name","replace","_","hex","isRegularChar","charCode","ExclamationPoint","Tilde","ENFORCER","pool","Map","PDFName","_super","enforcer","_this","call","encodedName","idx","len","length","character","code","prototype","asBytes","bytes","escaped","pushByte","byte","undefined","push","char","nextChar","Hash","Zero","Nine","a","f","A","F","parseInt","Uint8Array","decodeText","String","fromCharCode","apply","Array","from","asString","value","clone","toString","sizeInBytes","copyBytesInto","buffer","offset","of","decodedValue","instance","get","set","Length","FlateDecode","Resources","Font","XObject","ExtGState","Contents","Type","Parent","MediaBox","Page","Annots","TrimBox","ArtBox","BleedBox","CropBox","Rotate","Title","Author","Subject","Creator","Keywords","Producer","CreationDate","ModDate"],"sources":["E:/PROA/frontPROA/node_modules/pdf-lib/es/core/objects/PDFName.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport { PrivateConstructorError } from \"../errors\";\nimport PDFObject from \"./PDFObject\";\nimport CharCodes from \"../syntax/CharCodes\";\nimport { IsIrregular } from \"../syntax/Irregular\";\nimport { charFromHexCode, copyStringIntoBuffer, toCharCode, toHexString, } from \"../../utils\";\nvar decodeName = function (name) {\n    return name.replace(/#([\\dABCDEF]{2})/g, function (_, hex) { return charFromHexCode(hex); });\n};\nvar isRegularChar = function (charCode) {\n    return charCode >= CharCodes.ExclamationPoint &&\n        charCode <= CharCodes.Tilde &&\n        !IsIrregular[charCode];\n};\nvar ENFORCER = {};\nvar pool = new Map();\nvar PDFName = /** @class */ (function (_super) {\n    __extends(PDFName, _super);\n    function PDFName(enforcer, name) {\n        var _this = this;\n        if (enforcer !== ENFORCER)\n            throw new PrivateConstructorError('PDFName');\n        _this = _super.call(this) || this;\n        var encodedName = '/';\n        for (var idx = 0, len = name.length; idx < len; idx++) {\n            var character = name[idx];\n            var code = toCharCode(character);\n            encodedName += isRegularChar(code) ? character : \"#\" + toHexString(code);\n        }\n        _this.encodedName = encodedName;\n        return _this;\n    }\n    PDFName.prototype.asBytes = function () {\n        var bytes = [];\n        var hex = '';\n        var escaped = false;\n        var pushByte = function (byte) {\n            if (byte !== undefined)\n                bytes.push(byte);\n            escaped = false;\n        };\n        for (var idx = 1, len = this.encodedName.length; idx < len; idx++) {\n            var char = this.encodedName[idx];\n            var byte = toCharCode(char);\n            var nextChar = this.encodedName[idx + 1];\n            if (!escaped) {\n                if (byte === CharCodes.Hash)\n                    escaped = true;\n                else\n                    pushByte(byte);\n            }\n            else {\n                if ((byte >= CharCodes.Zero && byte <= CharCodes.Nine) ||\n                    (byte >= CharCodes.a && byte <= CharCodes.f) ||\n                    (byte >= CharCodes.A && byte <= CharCodes.F)) {\n                    hex += char;\n                    if (hex.length === 2 ||\n                        !((nextChar >= '0' && nextChar <= '9') ||\n                            (nextChar >= 'a' && nextChar <= 'f') ||\n                            (nextChar >= 'A' && nextChar <= 'F'))) {\n                        pushByte(parseInt(hex, 16));\n                        hex = '';\n                    }\n                }\n                else {\n                    pushByte(byte);\n                }\n            }\n        }\n        return new Uint8Array(bytes);\n    };\n    // TODO: This should probably use `utf8Decode()`\n    // TODO: Polyfill Array.from?\n    PDFName.prototype.decodeText = function () {\n        var bytes = this.asBytes();\n        return String.fromCharCode.apply(String, Array.from(bytes));\n    };\n    PDFName.prototype.asString = function () {\n        return this.encodedName;\n    };\n    /** @deprecated in favor of [[PDFName.asString]] */\n    PDFName.prototype.value = function () {\n        return this.encodedName;\n    };\n    PDFName.prototype.clone = function () {\n        return this;\n    };\n    PDFName.prototype.toString = function () {\n        return this.encodedName;\n    };\n    PDFName.prototype.sizeInBytes = function () {\n        return this.encodedName.length;\n    };\n    PDFName.prototype.copyBytesInto = function (buffer, offset) {\n        offset += copyStringIntoBuffer(this.encodedName, buffer, offset);\n        return this.encodedName.length;\n    };\n    PDFName.of = function (name) {\n        var decodedValue = decodeName(name);\n        var instance = pool.get(decodedValue);\n        if (!instance) {\n            instance = new PDFName(ENFORCER, decodedValue);\n            pool.set(decodedValue, instance);\n        }\n        return instance;\n    };\n    /* tslint:disable member-ordering */\n    PDFName.Length = PDFName.of('Length');\n    PDFName.FlateDecode = PDFName.of('FlateDecode');\n    PDFName.Resources = PDFName.of('Resources');\n    PDFName.Font = PDFName.of('Font');\n    PDFName.XObject = PDFName.of('XObject');\n    PDFName.ExtGState = PDFName.of('ExtGState');\n    PDFName.Contents = PDFName.of('Contents');\n    PDFName.Type = PDFName.of('Type');\n    PDFName.Parent = PDFName.of('Parent');\n    PDFName.MediaBox = PDFName.of('MediaBox');\n    PDFName.Page = PDFName.of('Page');\n    PDFName.Annots = PDFName.of('Annots');\n    PDFName.TrimBox = PDFName.of('TrimBox');\n    PDFName.ArtBox = PDFName.of('ArtBox');\n    PDFName.BleedBox = PDFName.of('BleedBox');\n    PDFName.CropBox = PDFName.of('CropBox');\n    PDFName.Rotate = PDFName.of('Rotate');\n    PDFName.Title = PDFName.of('Title');\n    PDFName.Author = PDFName.of('Author');\n    PDFName.Subject = PDFName.of('Subject');\n    PDFName.Creator = PDFName.of('Creator');\n    PDFName.Keywords = PDFName.of('Keywords');\n    PDFName.Producer = PDFName.of('Producer');\n    PDFName.CreationDate = PDFName.of('CreationDate');\n    PDFName.ModDate = PDFName.of('ModDate');\n    return PDFName;\n}(PDFObject));\nexport default PDFName;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}