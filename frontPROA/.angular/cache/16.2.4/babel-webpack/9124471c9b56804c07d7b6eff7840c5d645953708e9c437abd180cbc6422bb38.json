{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFPage from \"../PDFPage\";\nimport PDFFont from \"../PDFFont\";\nimport PDFField, { assertFieldAppearanceOptions } from \"./PDFField\";\nimport { normalizeAppearance, defaultDropdownAppearanceProvider } from \"./appearances\";\nimport { rgb } from \"../colors\";\nimport { degrees } from \"../rotations\";\nimport { PDFHexString, PDFStream, PDFAcroComboBox, AcroChoiceFlags } from \"../../core\";\nimport { assertIs, assertOrUndefined, assertPositive } from \"../../utils\";\n/**\r\n * Represents a dropdown field of a [[PDFForm]].\r\n *\r\n * [[PDFDropdown]] fields are interactive text boxes that display a single\r\n * element (the currently selected value). The purpose of a dropdown is to\r\n * enable users to select a single option from a set of possible options. Users\r\n * can click on a dropdown to view the full list of options it provides.\r\n * Clicking on an option in the list will cause it to be selected and displayed\r\n * in the dropdown's text box. Some dropdowns allow users to enter text\r\n * directly into the box from their keyboard, rather than only being allowed to\r\n * choose an option from the list (see [[PDFDropdown.isEditable]]).\r\n */\nvar PDFDropdown = /** @class */function (_super) {\n  __extends(PDFDropdown, _super);\n  function PDFDropdown(acroComboBox, ref, doc) {\n    var _this = _super.call(this, acroComboBox, ref, doc) || this;\n    assertIs(acroComboBox, 'acroComboBox', [[PDFAcroComboBox, 'PDFAcroComboBox']]);\n    _this.acroField = acroComboBox;\n    return _this;\n  }\n  /**\r\n   * Get the list of available options for this dropdown. These options will be\r\n   * displayed to users who click on this dropdown in a PDF reader.\r\n   * For example:\r\n   * ```js\r\n   * const dropdown = form.getDropdown('some.dropdown.field')\r\n   * const options = dropdown.getOptions()\r\n   * console.log('Dropdown options:', options)\r\n   * ```\r\n   * @returns The options for this dropdown.\r\n   */\n  PDFDropdown.prototype.getOptions = function () {\n    var rawOptions = this.acroField.getOptions();\n    var options = new Array(rawOptions.length);\n    for (var idx = 0, len = options.length; idx < len; idx++) {\n      var _a = rawOptions[idx],\n        display = _a.display,\n        value = _a.value;\n      options[idx] = (display !== null && display !== void 0 ? display : value).decodeText();\n    }\n    return options;\n  };\n  /**\r\n   * Get the selected options for this dropdown. These are the values that were\r\n   * selected by a human user via a PDF reader, or programatically via\r\n   * software.\r\n   * For example:\r\n   * ```js\r\n   * const dropdown = form.getDropdown('some.dropdown.field')\r\n   * const selections = dropdown.getSelected()\r\n   * console.log('Dropdown selections:', selections)\r\n   * ```\r\n   * > **NOTE:** Note that PDF readers only display one selected option when\r\n   * > rendering dropdowns. However, the PDF specification does allow for\r\n   * > multiple values to be selected in a dropdown. As such, the `pdf-lib`\r\n   * > API supports this. However, in most cases the array returned by this\r\n   * > method will contain only a single element (or no elements).\r\n   * @returns The selected options in this dropdown.\r\n   */\n  PDFDropdown.prototype.getSelected = function () {\n    var values = this.acroField.getValues();\n    var selected = new Array(values.length);\n    for (var idx = 0, len = values.length; idx < len; idx++) {\n      selected[idx] = values[idx].decodeText();\n    }\n    return selected;\n  };\n  /**\r\n   * Set the list of options that are available for this dropdown. These are\r\n   * the values that will be available for users to select when they view this\r\n   * dropdown in a PDF reader. Note that preexisting options for this dropdown\r\n   * will be removed. Only the values passed as `options` will be available to\r\n   * select.\r\n   * For example:\r\n   * ```js\r\n   * const dropdown = form.getDropdown('planets.dropdown')\r\n   * dropdown.setOptions(['Earth', 'Mars', 'Pluto', 'Venus'])\r\n   * ```\r\n   * @param options The options that should be available in this dropdown.\r\n   */\n  PDFDropdown.prototype.setOptions = function (options) {\n    assertIs(options, 'options', [Array]);\n    var optionObjects = new Array(options.length);\n    for (var idx = 0, len = options.length; idx < len; idx++) {\n      optionObjects[idx] = {\n        value: PDFHexString.fromText(options[idx])\n      };\n    }\n    this.acroField.setOptions(optionObjects);\n  };\n  /**\r\n   * Add to the list of options that are available for this dropdown. Users\r\n   * will be able to select these values in a PDF reader. In addition to the\r\n   * values passed as `options`, any preexisting options for this dropdown will\r\n   * still be available for users to select.\r\n   * For example:\r\n   * ```js\r\n   * const dropdown = form.getDropdown('rockets.dropdown')\r\n   * dropdown.addOptions(['Saturn IV', 'Falcon Heavy'])\r\n   * ```\r\n   * @param options New options that should be available in this dropdown.\r\n   */\n  PDFDropdown.prototype.addOptions = function (options) {\n    assertIs(options, 'options', ['string', Array]);\n    var optionsArr = Array.isArray(options) ? options : [options];\n    var existingOptions = this.acroField.getOptions();\n    var newOptions = new Array(optionsArr.length);\n    for (var idx = 0, len = optionsArr.length; idx < len; idx++) {\n      newOptions[idx] = {\n        value: PDFHexString.fromText(optionsArr[idx])\n      };\n    }\n    this.acroField.setOptions(existingOptions.concat(newOptions));\n  };\n  /**\r\n   * Select one or more values for this dropdown. This operation is analogous\r\n   * to a human user opening the dropdown in a PDF reader and clicking on a\r\n   * value to select it. This method will update the underlying state of the\r\n   * dropdown to indicate which values have been selected. PDF libraries and\r\n   * readers will be able to extract these values from the saved document and\r\n   * determine which values were selected.\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * const dropdown = form.getDropdown('best.superhero.dropdown')\r\n   * dropdown.select('One Punch Man')\r\n   * ```\r\n   *\r\n   * This method will mark this dropdown as dirty, causing its appearance\r\n   * streams to be updated when either [[PDFDocument.save]] or\r\n   * [[PDFForm.updateFieldAppearances]] is called. The updated streams will\r\n   * display the selected option inside the widgets of this dropdown.\r\n   *\r\n   * **IMPORTANT:** The default font used to update appearance streams is\r\n   * [[StandardFonts.Helvetica]]. Note that this is a WinAnsi font. This means\r\n   * that encoding errors will be thrown if the selected option for this field\r\n   * contains characters outside the WinAnsi character set (the latin alphabet).\r\n   *\r\n   * Embedding a custom font and passing it to\r\n   * [[PDFForm.updateFieldAppearances]] or [[PDFDropdown.updateAppearances]]\r\n   * allows you to generate appearance streams with characters outside the\r\n   * latin alphabet (assuming the custom font supports them).\r\n   *\r\n   * Selecting an option that does not exist in this dropdown's option list\r\n   * (see [[PDFDropdown.getOptions]]) will enable editing on this dropdown\r\n   * (see [[PDFDropdown.enableEditing]]).\r\n   *\r\n   * > **NOTE:** PDF readers only display one selected option when rendering\r\n   * > dropdowns. However, the PDF specification does allow for multiple values\r\n   * > to be selected in a dropdown. As such, the `pdf-lib` API supports this.\r\n   * > However, it is not recommended to select more than one value with this\r\n   * > method, as only one will be visible. [[PDFOptionList]] fields are better\r\n   * > suited for displaying multiple selected values.\r\n   *\r\n   * @param options The options to be selected.\r\n   * @param merge Whether or not existing selections should be preserved.\r\n   */\n  PDFDropdown.prototype.select = function (options, merge) {\n    if (merge === void 0) {\n      merge = false;\n    }\n    assertIs(options, 'options', ['string', Array]);\n    assertIs(merge, 'merge', ['boolean']);\n    var optionsArr = Array.isArray(options) ? options : [options];\n    var validOptions = this.getOptions();\n    var hasCustomOption = optionsArr.find(function (option) {\n      return !validOptions.includes(option);\n    });\n    if (hasCustomOption) this.enableEditing();\n    this.markAsDirty();\n    if (optionsArr.length > 1 || optionsArr.length === 1 && merge) {\n      this.enableMultiselect();\n    }\n    var values = new Array(optionsArr.length);\n    for (var idx = 0, len = optionsArr.length; idx < len; idx++) {\n      values[idx] = PDFHexString.fromText(optionsArr[idx]);\n    }\n    if (merge) {\n      var existingValues = this.acroField.getValues();\n      this.acroField.setValues(existingValues.concat(values));\n    } else {\n      this.acroField.setValues(values);\n    }\n  };\n  /**\r\n   * Clear all selected values for this dropdown. This operation is equivalent\r\n   * to selecting an empty list. This method will update the underlying state\r\n   * of the dropdown to indicate that no values have been selected.\r\n   * For example:\r\n   * ```js\r\n   * const dropdown = form.getDropdown('some.dropdown.field')\r\n   * dropdown.clear()\r\n   * ```\r\n   * This method will mark this text field as dirty. See [[PDFDropdown.select]]\r\n   * for more details about what this means.\r\n   */\n  PDFDropdown.prototype.clear = function () {\n    this.markAsDirty();\n    this.acroField.setValues([]);\n  };\n  /**\r\n   * Set the font size for this field. Larger font sizes will result in larger\r\n   * text being displayed when PDF readers render this dropdown. Font sizes may\r\n   * be integer or floating point numbers. Supplying a negative font size will\r\n   * cause this method to throw an error.\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * const dropdown = form.getDropdown('some.dropdown.field')\r\n   * dropdown.setFontSize(4)\r\n   * dropdown.setFontSize(15.7)\r\n   * ```\r\n   *\r\n   * > This method depends upon the existence of a default appearance\r\n   * > (`/DA`) string. If this field does not have a default appearance string,\r\n   * > or that string does not contain a font size (via the `Tf` operator),\r\n   * > then this method will throw an error.\r\n   *\r\n   * @param fontSize The font size to be used when rendering text in this field.\r\n   */\n  PDFDropdown.prototype.setFontSize = function (fontSize) {\n    assertPositive(fontSize, 'fontSize');\n    this.acroField.setFontSize(fontSize);\n    this.markAsDirty();\n  };\n  /**\r\n   * Returns `true` if users are allowed to edit the selected value of this\r\n   * dropdown directly and are not constrained by the list of available\r\n   * options. See [[PDFDropdown.enableEditing]] and\r\n   * [[PDFDropdown.disableEditing]]. For example:\r\n   * ```js\r\n   * const dropdown = form.getDropdown('some.dropdown.field')\r\n   * if (dropdown.isEditable()) console.log('Editing is enabled')\r\n   * ```\r\n   * @returns Whether or not this dropdown is editable.\r\n   */\n  PDFDropdown.prototype.isEditable = function () {\n    return this.acroField.hasFlag(AcroChoiceFlags.Edit);\n  };\n  /**\r\n   * Allow users to edit the selected value of this dropdown in PDF readers\r\n   * with their keyboard. This means that the selected value of this dropdown\r\n   * will not be constrained by the list of available options. However, if this\r\n   * dropdown has any available options, users will still be allowed to select\r\n   * from that list.\r\n   * For example:\r\n   * ```js\r\n   * const dropdown = form.getDropdown('some.dropdown.field')\r\n   * dropdown.enableEditing()\r\n   * ```\r\n   */\n  PDFDropdown.prototype.enableEditing = function () {\n    this.acroField.setFlagTo(AcroChoiceFlags.Edit, true);\n  };\n  /**\r\n   * Do not allow users to edit the selected value of this dropdown in PDF\r\n   * readers with their keyboard. This will constrain the selected value of\r\n   * this dropdown to the list of available options. Users will only be able\r\n   * to select an option from that list.\r\n   * For example:\r\n   * ```js\r\n   * const dropdown = form.getDropdown('some.dropdown.field')\r\n   * dropdown.disableEditing()\r\n   * ```\r\n   */\n  PDFDropdown.prototype.disableEditing = function () {\n    this.acroField.setFlagTo(AcroChoiceFlags.Edit, false);\n  };\n  /**\r\n   * Returns `true` if the option list of this dropdown is always displayed\r\n   * in alphabetical order, irrespective of the order in which the options\r\n   * were added to the dropdown. See [[PDFDropdown.enableSorting]] and\r\n   * [[PDFDropdown.disableSorting]]. For example:\r\n   * ```js\r\n   * const dropdown = form.getDropdown('some.dropdown.field')\r\n   * if (dropdown.isSorted()) console.log('Sorting is enabled')\r\n   * ```\r\n   * @returns Whether or not this dropdown's options are sorted.\r\n   */\n  PDFDropdown.prototype.isSorted = function () {\n    return this.acroField.hasFlag(AcroChoiceFlags.Sort);\n  };\n  /**\r\n   * Always display the option list of this dropdown in alphabetical order,\r\n   * irrespective of the order in which the options were added to this dropdown.\r\n   * For example:\r\n   * ```js\r\n   * const dropdown = form.getDropdown('some.dropdown.field')\r\n   * dropdown.enableSorting()\r\n   * ```\r\n   */\n  PDFDropdown.prototype.enableSorting = function () {\n    this.acroField.setFlagTo(AcroChoiceFlags.Sort, true);\n  };\n  /**\r\n   * Do not always display the option list of this dropdown in alphabetical\r\n   * order. Instead, display the options in whichever order they were added\r\n   * to the list. For example:\r\n   * ```js\r\n   * const dropdown = form.getDropdown('some.dropdown.field')\r\n   * dropdown.disableSorting()\r\n   * ```\r\n   */\n  PDFDropdown.prototype.disableSorting = function () {\n    this.acroField.setFlagTo(AcroChoiceFlags.Sort, false);\n  };\n  /**\r\n   * Returns `true` if multiple options can be selected from this dropdown's\r\n   * option list. See [[PDFDropdown.enableMultiselect]] and\r\n   * [[PDFDropdown.disableMultiselect]]. For example:\r\n   * ```js\r\n   * const dropdown = form.getDropdown('some.dropdown.field')\r\n   * if (dropdown.isMultiselect()) console.log('Multiselect is enabled')\r\n   * ```\r\n   * @returns Whether or not multiple options can be selected.\r\n   */\n  PDFDropdown.prototype.isMultiselect = function () {\n    return this.acroField.hasFlag(AcroChoiceFlags.MultiSelect);\n  };\n  /**\r\n   * Allow users to select more than one option from this dropdown's option\r\n   * list. For example:\r\n   * ```js\r\n   * const dropdown = form.getDropdown('some.dropdown.field')\r\n   * dropdown.enableMultiselect()\r\n   * ```\r\n   */\n  PDFDropdown.prototype.enableMultiselect = function () {\n    this.acroField.setFlagTo(AcroChoiceFlags.MultiSelect, true);\n  };\n  /**\r\n   * Do not allow users to select more than one option from this dropdown's\r\n   * option list. For example:\r\n   * ```js\r\n   * const dropdown = form.getDropdown('some.dropdown.field')\r\n   * dropdown.disableMultiselect()\r\n   * ```\r\n   */\n  PDFDropdown.prototype.disableMultiselect = function () {\n    this.acroField.setFlagTo(AcroChoiceFlags.MultiSelect, false);\n  };\n  /**\r\n   * Returns `true` if the selected option should be spell checked by PDF\r\n   * readers. Spell checking will only be performed if this dropdown allows\r\n   * editing (see [[PDFDropdown.isEditable]]). See\r\n   * [[PDFDropdown.enableSpellChecking]] and\r\n   * [[PDFDropdown.disableSpellChecking]]. For example:\r\n   * ```js\r\n   * const dropdown = form.getDropdown('some.dropdown.field')\r\n   * if (dropdown.isSpellChecked()) console.log('Spell checking is enabled')\r\n   * ```\r\n   * @returns Whether or not this dropdown can be spell checked.\r\n   */\n  PDFDropdown.prototype.isSpellChecked = function () {\n    return !this.acroField.hasFlag(AcroChoiceFlags.DoNotSpellCheck);\n  };\n  /**\r\n   * Allow PDF readers to spell check the selected option of this dropdown.\r\n   * For example:\r\n   * ```js\r\n   * const dropdown = form.getDropdown('some.dropdown.field')\r\n   * dropdown.enableSpellChecking()\r\n   * ```\r\n   */\n  PDFDropdown.prototype.enableSpellChecking = function () {\n    this.acroField.setFlagTo(AcroChoiceFlags.DoNotSpellCheck, false);\n  };\n  /**\r\n   * Do not allow PDF readers to spell check the selected option of this\r\n   * dropdown. For example:\r\n   * ```js\r\n   * const dropdown = form.getDropdown('some.dropdown.field')\r\n   * dropdown.disableSpellChecking()\r\n   * ```\r\n   */\n  PDFDropdown.prototype.disableSpellChecking = function () {\n    this.acroField.setFlagTo(AcroChoiceFlags.DoNotSpellCheck, true);\n  };\n  /**\r\n   * Returns `true` if the option selected by a user is stored, or \"committed\",\r\n   * when the user clicks the option. The alternative is that the user's\r\n   * selection is stored when the user leaves this dropdown field (by clicking\r\n   * outside of it - on another field, for example). See\r\n   * [[PDFDropdown.enableSelectOnClick]] and\r\n   * [[PDFDropdown.disableSelectOnClick]]. For example:\r\n   * ```js\r\n   * const dropdown = form.getDropdown('some.dropdown.field')\r\n   * if (dropdown.isSelectOnClick()) console.log('Select on click is enabled')\r\n   * ```\r\n   * @returns Whether or not options are selected immediately after they are\r\n   *          clicked.\r\n   */\n  PDFDropdown.prototype.isSelectOnClick = function () {\n    return this.acroField.hasFlag(AcroChoiceFlags.CommitOnSelChange);\n  };\n  /**\r\n   * Store the option selected by a user immediately after the user clicks the\r\n   * option. Do not wait for the user to leave this dropdown field (by clicking\r\n   * outside of it - on another field, for example). For example:\r\n   * ```js\r\n   * const dropdown = form.getDropdown('some.dropdown.field')\r\n   * dropdown.enableSelectOnClick()\r\n   * ```\r\n   */\n  PDFDropdown.prototype.enableSelectOnClick = function () {\n    this.acroField.setFlagTo(AcroChoiceFlags.CommitOnSelChange, true);\n  };\n  /**\r\n   * Wait to store the option selected by a user until they leave this dropdown\r\n   * field (by clicking outside of it - on another field, for example).\r\n   * For example:\r\n   * ```js\r\n   * const dropdown = form.getDropdown('some.dropdown.field')\r\n   * dropdown.disableSelectOnClick()\r\n   * ```\r\n   */\n  PDFDropdown.prototype.disableSelectOnClick = function () {\n    this.acroField.setFlagTo(AcroChoiceFlags.CommitOnSelChange, false);\n  };\n  /**\r\n   * Show this dropdown on the specified page. For example:\r\n   * ```js\r\n   * const ubuntuFont = await pdfDoc.embedFont(ubuntuFontBytes)\r\n   * const page = pdfDoc.addPage()\r\n   *\r\n   * const form = pdfDoc.getForm()\r\n   * const dropdown = form.createDropdown('best.gundam')\r\n   * dropdown.setOptions(['Exia', 'Dynames'])\r\n   * dropdown.select('Exia')\r\n   *\r\n   * dropdown.addToPage(page, {\r\n   *   x: 50,\r\n   *   y: 75,\r\n   *   width: 200,\r\n   *   height: 100,\r\n   *   textColor: rgb(1, 0, 0),\r\n   *   backgroundColor: rgb(0, 1, 0),\r\n   *   borderColor: rgb(0, 0, 1),\r\n   *   borderWidth: 2,\r\n   *   rotate: degrees(90),\r\n   *   font: ubuntuFont,\r\n   * })\r\n   * ```\r\n   * This will create a new widget for this dropdown field.\r\n   * @param page The page to which this dropdown widget should be added.\r\n   * @param options The options to be used when adding this dropdown widget.\r\n   */\n  PDFDropdown.prototype.addToPage = function (page, options) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    assertIs(page, 'page', [[PDFPage, 'PDFPage']]);\n    assertFieldAppearanceOptions(options);\n    if (!options) options = {};\n    if (!('textColor' in options)) options.textColor = rgb(0, 0, 0);\n    if (!('backgroundColor' in options)) options.backgroundColor = rgb(1, 1, 1);\n    if (!('borderColor' in options)) options.borderColor = rgb(0, 0, 0);\n    if (!('borderWidth' in options)) options.borderWidth = 1;\n    // Create a widget for this dropdown\n    var widget = this.createWidget({\n      x: (_a = options.x) !== null && _a !== void 0 ? _a : 0,\n      y: (_b = options.y) !== null && _b !== void 0 ? _b : 0,\n      width: (_c = options.width) !== null && _c !== void 0 ? _c : 200,\n      height: (_d = options.height) !== null && _d !== void 0 ? _d : 50,\n      textColor: options.textColor,\n      backgroundColor: options.backgroundColor,\n      borderColor: options.borderColor,\n      borderWidth: (_e = options.borderWidth) !== null && _e !== void 0 ? _e : 0,\n      rotate: (_f = options.rotate) !== null && _f !== void 0 ? _f : degrees(0),\n      hidden: options.hidden,\n      page: page.ref\n    });\n    var widgetRef = this.doc.context.register(widget.dict);\n    // Add widget to this field\n    this.acroField.addWidget(widgetRef);\n    // Set appearance streams for widget\n    var font = (_g = options.font) !== null && _g !== void 0 ? _g : this.doc.getForm().getDefaultFont();\n    this.updateWidgetAppearance(widget, font);\n    // Add widget to the given page\n    page.node.addAnnot(widgetRef);\n  };\n  /**\r\n   * Returns `true` if this dropdown has been marked as dirty, or if any of\r\n   * this dropdown's widgets do not have an appearance stream. For example:\r\n   * ```js\r\n   * const dropdown = form.getDropdown('some.dropdown.field')\r\n   * if (dropdown.needsAppearancesUpdate()) console.log('Needs update')\r\n   * ```\r\n   * @returns Whether or not this dropdown needs an appearance update.\r\n   */\n  PDFDropdown.prototype.needsAppearancesUpdate = function () {\n    var _a;\n    if (this.isDirty()) return true;\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var hasAppearances = ((_a = widget.getAppearances()) === null || _a === void 0 ? void 0 : _a.normal) instanceof PDFStream;\n      if (!hasAppearances) return true;\n    }\n    return false;\n  };\n  /**\r\n   * Update the appearance streams for each of this dropdown's widgets using\r\n   * the default appearance provider for dropdowns. For example:\r\n   * ```js\r\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n   * const dropdown = form.getDropdown('some.dropdown.field')\r\n   * dropdown.defaultUpdateAppearances(helvetica)\r\n   * ```\r\n   * @param font The font to be used for creating the appearance streams.\r\n   */\n  PDFDropdown.prototype.defaultUpdateAppearances = function (font) {\n    assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n    this.updateAppearances(font);\n  };\n  /**\r\n   * Update the appearance streams for each of this dropdown's widgets using\r\n   * the given appearance provider. If no `provider` is passed, the default\r\n   * appearance provider for dropdowns will be used. For example:\r\n   * ```js\r\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n   * const dropdown = form.getDropdown('some.dropdown.field')\r\n   * dropdown.updateAppearances(helvetica, (field, widget, font) => {\r\n   *   ...\r\n   *   return drawTextField(...)\r\n   * })\r\n   * ```\r\n   * @param font The font to be used for creating the appearance streams.\r\n   * @param provider Optionally, the appearance provider to be used for\r\n   *                 generating the contents of the appearance streams.\r\n   */\n  PDFDropdown.prototype.updateAppearances = function (font, provider) {\n    assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n    assertOrUndefined(provider, 'provider', [Function]);\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      this.updateWidgetAppearance(widget, font, provider);\n    }\n    this.markAsClean();\n  };\n  // getOption(index: number): string {}\n  // getSelectedIndices(): number[] {}\n  // removeOptions(option: string | string[]) {}\n  // removeIndices(option: number[]) {}\n  // deselect(options: string | string[]) {}\n  // deselectIndices(optionIndices: number[]) {}\n  PDFDropdown.prototype.updateWidgetAppearance = function (widget, font, provider) {\n    var apProvider = provider !== null && provider !== void 0 ? provider : defaultDropdownAppearanceProvider;\n    var appearances = normalizeAppearance(apProvider(this, widget, font));\n    this.updateWidgetAppearanceWithFont(widget, font, appearances);\n  };\n  /**\r\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\r\n   * > consider using the [[PDFForm.getDropdown]] method, which will create an\r\n   * > instance of [[PDFDropdown]] for you.\r\n   *\r\n   * Create an instance of [[PDFDropdown]] from an existing acroComboBox and ref\r\n   *\r\n   * @param acroComboBox The underlying `PDFAcroComboBox` for this dropdown.\r\n   * @param ref The unique reference for this dropdown.\r\n   * @param doc The document to which this dropdown will belong.\r\n   */\n  PDFDropdown.of = function (acroComboBox, ref, doc) {\n    return new PDFDropdown(acroComboBox, ref, doc);\n  };\n  return PDFDropdown;\n}(PDFField);\nexport default PDFDropdown;\n//# sourceMappingURL=PDFDropdown.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}