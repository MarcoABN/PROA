{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFObject from \"./PDFObject\";\nimport CharCodes from \"../syntax/CharCodes\";\nimport { copyStringIntoBuffer, toHexStringOfMinLength, utf16Decode, utf16Encode, pdfDocEncodingDecode, parseDate, hasUtf16BOM } from \"../../utils\";\nimport { InvalidPDFDateStringError } from \"../errors\";\nvar PDFHexString = /** @class */function (_super) {\n  __extends(PDFHexString, _super);\n  function PDFHexString(value) {\n    var _this = _super.call(this) || this;\n    _this.value = value;\n    return _this;\n  }\n  PDFHexString.prototype.asBytes = function () {\n    // Append a zero if the number of digits is odd. See PDF spec 7.3.4.3\n    var hex = this.value + (this.value.length % 2 === 1 ? '0' : '');\n    var hexLength = hex.length;\n    var bytes = new Uint8Array(hex.length / 2);\n    var hexOffset = 0;\n    var bytesOffset = 0;\n    // Interpret each pair of hex digits as a single byte\n    while (hexOffset < hexLength) {\n      var byte = parseInt(hex.substring(hexOffset, hexOffset + 2), 16);\n      bytes[bytesOffset] = byte;\n      hexOffset += 2;\n      bytesOffset += 1;\n    }\n    return bytes;\n  };\n  PDFHexString.prototype.decodeText = function () {\n    var bytes = this.asBytes();\n    if (hasUtf16BOM(bytes)) return utf16Decode(bytes);\n    return pdfDocEncodingDecode(bytes);\n  };\n  PDFHexString.prototype.decodeDate = function () {\n    var text = this.decodeText();\n    var date = parseDate(text);\n    if (!date) throw new InvalidPDFDateStringError(text);\n    return date;\n  };\n  PDFHexString.prototype.asString = function () {\n    return this.value;\n  };\n  PDFHexString.prototype.clone = function () {\n    return PDFHexString.of(this.value);\n  };\n  PDFHexString.prototype.toString = function () {\n    return \"<\" + this.value + \">\";\n  };\n  PDFHexString.prototype.sizeInBytes = function () {\n    return this.value.length + 2;\n  };\n  PDFHexString.prototype.copyBytesInto = function (buffer, offset) {\n    buffer[offset++] = CharCodes.LessThan;\n    offset += copyStringIntoBuffer(this.value, buffer, offset);\n    buffer[offset++] = CharCodes.GreaterThan;\n    return this.value.length + 2;\n  };\n  PDFHexString.of = function (value) {\n    return new PDFHexString(value);\n  };\n  PDFHexString.fromText = function (value) {\n    var encoded = utf16Encode(value);\n    var hex = '';\n    for (var idx = 0, len = encoded.length; idx < len; idx++) {\n      hex += toHexStringOfMinLength(encoded[idx], 4);\n    }\n    return new PDFHexString(hex);\n  };\n  return PDFHexString;\n}(PDFObject);\nexport default PDFHexString;\n//# sourceMappingURL=PDFHexString.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}