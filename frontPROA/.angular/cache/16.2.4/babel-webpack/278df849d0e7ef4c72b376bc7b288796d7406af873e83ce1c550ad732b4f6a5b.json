{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFNumber from \"../objects/PDFNumber\";\nimport PDFFlateStream from \"./PDFFlateStream\";\nimport CharCodes from \"../syntax/CharCodes\";\nimport { copyStringIntoBuffer, last } from \"../../utils\";\nvar PDFObjectStream = /** @class */function (_super) {\n  __extends(PDFObjectStream, _super);\n  function PDFObjectStream(context, objects, encode) {\n    if (encode === void 0) {\n      encode = true;\n    }\n    var _this = _super.call(this, context.obj({}), encode) || this;\n    _this.objects = objects;\n    _this.offsets = _this.computeObjectOffsets();\n    _this.offsetsString = _this.computeOffsetsString();\n    _this.dict.set(PDFName.of('Type'), PDFName.of('ObjStm'));\n    _this.dict.set(PDFName.of('N'), PDFNumber.of(_this.objects.length));\n    _this.dict.set(PDFName.of('First'), PDFNumber.of(_this.offsetsString.length));\n    return _this;\n  }\n  PDFObjectStream.prototype.getObjectsCount = function () {\n    return this.objects.length;\n  };\n  PDFObjectStream.prototype.clone = function (context) {\n    return PDFObjectStream.withContextAndObjects(context || this.dict.context, this.objects.slice(), this.encode);\n  };\n  PDFObjectStream.prototype.getContentsString = function () {\n    var value = this.offsetsString;\n    for (var idx = 0, len = this.objects.length; idx < len; idx++) {\n      var _a = this.objects[idx],\n        object = _a[1];\n      value += object + \"\\n\";\n    }\n    return value;\n  };\n  PDFObjectStream.prototype.getUnencodedContents = function () {\n    var buffer = new Uint8Array(this.getUnencodedContentsSize());\n    var offset = copyStringIntoBuffer(this.offsetsString, buffer, 0);\n    for (var idx = 0, len = this.objects.length; idx < len; idx++) {\n      var _a = this.objects[idx],\n        object = _a[1];\n      offset += object.copyBytesInto(buffer, offset);\n      buffer[offset++] = CharCodes.Newline;\n    }\n    return buffer;\n  };\n  PDFObjectStream.prototype.getUnencodedContentsSize = function () {\n    return this.offsetsString.length + last(this.offsets)[1] + last(this.objects)[1].sizeInBytes() + 1;\n  };\n  PDFObjectStream.prototype.computeOffsetsString = function () {\n    var offsetsString = '';\n    for (var idx = 0, len = this.offsets.length; idx < len; idx++) {\n      var _a = this.offsets[idx],\n        objectNumber = _a[0],\n        offset = _a[1];\n      offsetsString += objectNumber + \" \" + offset + \" \";\n    }\n    return offsetsString;\n  };\n  PDFObjectStream.prototype.computeObjectOffsets = function () {\n    var offset = 0;\n    var offsets = new Array(this.objects.length);\n    for (var idx = 0, len = this.objects.length; idx < len; idx++) {\n      var _a = this.objects[idx],\n        ref = _a[0],\n        object = _a[1];\n      offsets[idx] = [ref.objectNumber, offset];\n      offset += object.sizeInBytes() + 1; // '\\n'\n    }\n\n    return offsets;\n  };\n  PDFObjectStream.withContextAndObjects = function (context, objects, encode) {\n    if (encode === void 0) {\n      encode = true;\n    }\n    return new PDFObjectStream(context, objects, encode);\n  };\n  return PDFObjectStream;\n}(PDFFlateStream);\nexport default PDFObjectStream;\n//# sourceMappingURL=PDFObjectStream.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}