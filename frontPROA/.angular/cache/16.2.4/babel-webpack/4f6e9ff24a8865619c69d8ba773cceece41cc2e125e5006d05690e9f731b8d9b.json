{"ast":null,"code":"import _asyncToGenerator from \"E:/PROA/frontPROA/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { PDFDocument } from 'pdf-lib';\nimport * as i0 from \"@angular/core\";\nexport let Anexo3CService = /*#__PURE__*/(() => {\n  class Anexo3CService {\n    constructor() {}\n    anexo3C(embarcacao, campotexto2, servico) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        try {\n          const pdfBytes = yield fetch('assets/pdfanexos/Anexo3C-N211.pdf').then(res => res.arrayBuffer());\n          const pdfDoc = yield PDFDocument.load(pdfBytes);\n          const form = pdfDoc.getForm();\n          form.getTextField('nome').setText(embarcacao.cliente.nome);\n          form.getTextField('nacionalidade').setText(embarcacao.cliente.nacionalidade.toUpperCase());\n          let partesData = embarcacao.cliente.dataNasc.toString().split('-');\n          form.getTextField('dianasc').setText(partesData[2]);\n          form.getTextField('mesnasc').setText(partesData[1]);\n          form.getTextField('anonasc').setText(partesData[0]);\n          form.getTextField('rg').setText(embarcacao.cliente.rg);\n          form.getTextField('orgexpedidor').setText(embarcacao.cliente.orgEmissor);\n          let partesData2 = embarcacao.cliente.dtEmissao.toString().split('-');\n          form.getTextField('diaexprg').setText(partesData2[2]);\n          form.getTextField('mesexprg').setText(partesData2[1]);\n          form.getTextField('anoexprg').setText(partesData2[0]);\n          form.getTextField('cpf').setText(embarcacao.cliente.cpfcnpj);\n          const endereco = embarcacao.cliente.logradouro + ', ' + embarcacao.cliente.complemento;\n          const [part1, part2] = _this.divideString(endereco, 28);\n          form.getTextField('logradouro').setText(part1.toUpperCase());\n          form.getTextField('logradouro2').setText(part2.toUpperCase());\n          form.getTextField('logradouro').setText(endereco);\n          form.getTextField('bairro').setText(embarcacao.cliente.bairro);\n          form.getTextField('cep').setText(embarcacao.cliente.cep);\n          form.getTextField('cidade_uf').setText(embarcacao.cliente.cidade + ' / ' + embarcacao.cliente.uf);\n          form.getTextField('telefone').setText(embarcacao.cliente.telefone ? embarcacao.cliente.telefone : embarcacao.cliente.celular);\n          form.getTextField('nomeembarcacao').setText(embarcacao.nomeEmbarcacao);\n          form.getTextField('classificacaoembarcacao').setText(embarcacao.tipoEmbarcacao);\n          //form.getTextField('capitania').setText(embarcacao.?); falta tratar capitania\n          form.getTextField('numinscricaoembarcacao').setText(embarcacao.numInscricao);\n          form.getTextField('cidade').setText(embarcacao.cidade);\n          form.getTextField('capitania').setText(campotexto2);\n          form.getTextField('capitania2').setText(campotexto2);\n          const hoje = new Date();\n          const dia = hoje.getDate().toString().padStart(2, '0');\n          const mes = (hoje.getMonth() + 1).toString().padStart(2, '0'); //Os meses são baseados em zero, então é necessário adicionar 1.\n          const ano = hoje.getFullYear().toString();\n          form.getTextField('dia').setText(dia);\n          form.getTextField('ano').setText(ano);\n          // form.getTextField('mesextenso').setText(mes);\n          switch (mes) {\n            case '01':\n              form.getTextField('mesextenso').setText('Janeiro');\n              break;\n            case '02':\n              form.getTextField('mesextenso').setText('Fevereiro');\n              break;\n            case '03':\n              form.getTextField('mesextenso').setText('Março');\n              break;\n            case '04':\n              form.getTextField('mesextenso').setText('Abril');\n              break;\n            case '05':\n              form.getTextField('mesextenso').setText('Maio');\n              break;\n            case '06':\n              form.getTextField('mesextenso').setText('Junho');\n              break;\n            case '07':\n              form.getTextField('mesextenso').setText('Julho');\n              break;\n            case '08':\n              form.getTextField('mesextenso').setText('Agosto');\n              break;\n            case '09':\n              form.getTextField('mesextenso').setText('Setembro');\n              break;\n            case '10':\n              form.getTextField('mesextenso').setText('Outubro');\n              break;\n            case '11':\n              form.getTextField('mesextenso').setText('Novembro');\n              break;\n            case '12':\n              form.getTextField('mesextenso').setText('Dezembro');\n              break;\n          }\n          form.flatten();\n          const modifiedPdfBytes = yield pdfDoc.save();\n          if (!servico) {\n            _this.abrirPDFemJanela(modifiedPdfBytes);\n            console.log('PDF Criado!');\n          } else {\n            return modifiedPdfBytes;\n          }\n        } catch (err) {\n          console.log(err);\n        }\n      })();\n    }\n    abrirPDFemJanela(data) {\n      const blob = new Blob([data], {\n        type: 'application/pdf'\n      });\n      const url = window.URL.createObjectURL(blob);\n      window.open(url, '_blank');\n    }\n    divideString(input, limit) {\n      let part1 = '';\n      let part2 = '';\n      console.log(\"tamanho: \", input.length);\n      if (input.length <= limit) {\n        part1 = input;\n      } else {\n        let breakPoint = input.lastIndexOf(' ', limit);\n        if (breakPoint === -1) {\n          breakPoint = limit; // Nenhum espaço encontrado, quebra no limite\n        }\n\n        part1 = input.substring(0, breakPoint);\n        part2 = input.substring(breakPoint).trim();\n        if (part2.length > limit) {\n          part2 = part2.substring(0, limit);\n        }\n      }\n      return [part1, part2];\n    }\n    static #_ = this.ɵfac = function Anexo3CService_Factory(t) {\n      return new (t || Anexo3CService)();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: Anexo3CService,\n      factory: Anexo3CService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return Anexo3CService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}