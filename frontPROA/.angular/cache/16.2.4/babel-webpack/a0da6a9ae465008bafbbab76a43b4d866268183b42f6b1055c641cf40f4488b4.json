{"ast":null,"code":"/* tslint:disable:ban-types */\nimport { values as objectValues } from \"./objects\";\nexport var backtick = function (val) {\n  return \"`\" + val + \"`\";\n};\nexport var singleQuote = function (val) {\n  return \"'\" + val + \"'\";\n};\n// prettier-ignore\nvar formatValue = function (value) {\n  var type = typeof value;\n  if (type === 'string') return singleQuote(value);else if (type === 'undefined') return backtick(value);else return value;\n};\nexport var createValueErrorMsg = function (value, valueName, values) {\n  var allowedValues = new Array(values.length);\n  for (var idx = 0, len = values.length; idx < len; idx++) {\n    var v = values[idx];\n    allowedValues[idx] = formatValue(v);\n  }\n  var joinedValues = allowedValues.join(' or ');\n  // prettier-ignore\n  return backtick(valueName) + \" must be one of \" + joinedValues + \", but was actually \" + formatValue(value);\n};\nexport var assertIsOneOf = function (value, valueName, allowedValues) {\n  if (!Array.isArray(allowedValues)) {\n    allowedValues = objectValues(allowedValues);\n  }\n  for (var idx = 0, len = allowedValues.length; idx < len; idx++) {\n    if (value === allowedValues[idx]) return;\n  }\n  throw new TypeError(createValueErrorMsg(value, valueName, allowedValues));\n};\nexport var assertIsOneOfOrUndefined = function (value, valueName, allowedValues) {\n  if (!Array.isArray(allowedValues)) {\n    allowedValues = objectValues(allowedValues);\n  }\n  assertIsOneOf(value, valueName, allowedValues.concat(undefined));\n};\nexport var assertIsSubset = function (values, valueName, allowedValues) {\n  if (!Array.isArray(allowedValues)) {\n    allowedValues = objectValues(allowedValues);\n  }\n  for (var idx = 0, len = values.length; idx < len; idx++) {\n    assertIsOneOf(values[idx], valueName, allowedValues);\n  }\n};\nexport var getType = function (val) {\n  if (val === null) return 'null';\n  if (val === undefined) return 'undefined';\n  if (typeof val === 'string') return 'string';\n  if (isNaN(val)) return 'NaN';\n  if (typeof val === 'number') return 'number';\n  if (typeof val === 'boolean') return 'boolean';\n  if (typeof val === 'symbol') return 'symbol';\n  if (typeof val === 'bigint') return 'bigint';\n  if (val.constructor && val.constructor.name) return val.constructor.name;\n  if (val.name) return val.name;\n  if (val.constructor) return String(val.constructor);\n  return String(val);\n};\nexport var isType = function (value, type) {\n  if (type === 'null') return value === null;\n  if (type === 'undefined') return value === undefined;\n  if (type === 'string') return typeof value === 'string';\n  if (type === 'number') return typeof value === 'number' && !isNaN(value);\n  if (type === 'boolean') return typeof value === 'boolean';\n  if (type === 'symbol') return typeof value === 'symbol';\n  if (type === 'bigint') return typeof value === 'bigint';\n  if (type === Date) return value instanceof Date;\n  if (type === Array) return value instanceof Array;\n  if (type === Uint8Array) return value instanceof Uint8Array;\n  if (type === ArrayBuffer) return value instanceof ArrayBuffer;\n  if (type === Function) return value instanceof Function;\n  return value instanceof type[0];\n};\nexport var createTypeErrorMsg = function (value, valueName, types) {\n  var allowedTypes = new Array(types.length);\n  for (var idx = 0, len = types.length; idx < len; idx++) {\n    var type = types[idx];\n    if (type === 'null') allowedTypes[idx] = backtick('null');\n    if (type === 'undefined') allowedTypes[idx] = backtick('undefined');\n    if (type === 'string') allowedTypes[idx] = backtick('string');else if (type === 'number') allowedTypes[idx] = backtick('number');else if (type === 'boolean') allowedTypes[idx] = backtick('boolean');else if (type === 'symbol') allowedTypes[idx] = backtick('symbol');else if (type === 'bigint') allowedTypes[idx] = backtick('bigint');else if (type === Array) allowedTypes[idx] = backtick('Array');else if (type === Uint8Array) allowedTypes[idx] = backtick('Uint8Array');else if (type === ArrayBuffer) allowedTypes[idx] = backtick('ArrayBuffer');else allowedTypes[idx] = backtick(type[1]);\n  }\n  var joinedTypes = allowedTypes.join(' or ');\n  // prettier-ignore\n  return backtick(valueName) + \" must be of type \" + joinedTypes + \", but was actually of type \" + backtick(getType(value));\n};\nexport var assertIs = function (value, valueName, types) {\n  for (var idx = 0, len = types.length; idx < len; idx++) {\n    if (isType(value, types[idx])) return;\n  }\n  throw new TypeError(createTypeErrorMsg(value, valueName, types));\n};\nexport var assertOrUndefined = function (value, valueName, types) {\n  assertIs(value, valueName, types.concat('undefined'));\n};\nexport var assertEachIs = function (values, valueName, types) {\n  for (var idx = 0, len = values.length; idx < len; idx++) {\n    assertIs(values[idx], valueName, types);\n  }\n};\nexport var assertRange = function (value, valueName, min, max) {\n  assertIs(value, valueName, ['number']);\n  assertIs(min, 'min', ['number']);\n  assertIs(max, 'max', ['number']);\n  max = Math.max(min, max);\n  if (value < min || value > max) {\n    // prettier-ignore\n    throw new Error(backtick(valueName) + \" must be at least \" + min + \" and at most \" + max + \", but was actually \" + value);\n  }\n};\nexport var assertRangeOrUndefined = function (value, valueName, min, max) {\n  assertIs(value, valueName, ['number', 'undefined']);\n  if (typeof value === 'number') assertRange(value, valueName, min, max);\n};\nexport var assertMultiple = function (value, valueName, multiplier) {\n  assertIs(value, valueName, ['number']);\n  if (value % multiplier !== 0) {\n    // prettier-ignore\n    throw new Error(backtick(valueName) + \" must be a multiple of \" + multiplier + \", but was actually \" + value);\n  }\n};\nexport var assertInteger = function (value, valueName) {\n  if (!Number.isInteger(value)) {\n    throw new Error(backtick(valueName) + \" must be an integer, but was actually \" + value);\n  }\n};\nexport var assertPositive = function (value, valueName) {\n  if (![1, 0].includes(Math.sign(value))) {\n    // prettier-ignore\n    throw new Error(backtick(valueName) + \" must be a positive number or 0, but was actually \" + value);\n  }\n};","map":{"version":3,"names":["values","objectValues","backtick","val","singleQuote","formatValue","value","type","createValueErrorMsg","valueName","allowedValues","Array","length","idx","len","v","joinedValues","join","assertIsOneOf","isArray","TypeError","assertIsOneOfOrUndefined","concat","undefined","assertIsSubset","getType","isNaN","constructor","name","String","isType","Date","Uint8Array","ArrayBuffer","Function","createTypeErrorMsg","types","allowedTypes","joinedTypes","assertIs","assertOrUndefined","assertEachIs","assertRange","min","max","Math","Error","assertRangeOrUndefined","assertMultiple","multiplier","assertInteger","Number","isInteger","assertPositive","includes","sign"],"sources":["E:/PROA/frontPROA/node_modules/pdf-lib/es/utils/validators.js"],"sourcesContent":["/* tslint:disable:ban-types */\nimport { values as objectValues } from \"./objects\";\nexport var backtick = function (val) { return \"`\" + val + \"`\"; };\nexport var singleQuote = function (val) { return \"'\" + val + \"'\"; };\n// prettier-ignore\nvar formatValue = function (value) {\n    var type = typeof value;\n    if (type === 'string')\n        return singleQuote(value);\n    else if (type === 'undefined')\n        return backtick(value);\n    else\n        return value;\n};\nexport var createValueErrorMsg = function (value, valueName, values) {\n    var allowedValues = new Array(values.length);\n    for (var idx = 0, len = values.length; idx < len; idx++) {\n        var v = values[idx];\n        allowedValues[idx] = formatValue(v);\n    }\n    var joinedValues = allowedValues.join(' or ');\n    // prettier-ignore\n    return backtick(valueName) + \" must be one of \" + joinedValues + \", but was actually \" + formatValue(value);\n};\nexport var assertIsOneOf = function (value, valueName, allowedValues) {\n    if (!Array.isArray(allowedValues)) {\n        allowedValues = objectValues(allowedValues);\n    }\n    for (var idx = 0, len = allowedValues.length; idx < len; idx++) {\n        if (value === allowedValues[idx])\n            return;\n    }\n    throw new TypeError(createValueErrorMsg(value, valueName, allowedValues));\n};\nexport var assertIsOneOfOrUndefined = function (value, valueName, allowedValues) {\n    if (!Array.isArray(allowedValues)) {\n        allowedValues = objectValues(allowedValues);\n    }\n    assertIsOneOf(value, valueName, allowedValues.concat(undefined));\n};\nexport var assertIsSubset = function (values, valueName, allowedValues) {\n    if (!Array.isArray(allowedValues)) {\n        allowedValues = objectValues(allowedValues);\n    }\n    for (var idx = 0, len = values.length; idx < len; idx++) {\n        assertIsOneOf(values[idx], valueName, allowedValues);\n    }\n};\nexport var getType = function (val) {\n    if (val === null)\n        return 'null';\n    if (val === undefined)\n        return 'undefined';\n    if (typeof val === 'string')\n        return 'string';\n    if (isNaN(val))\n        return 'NaN';\n    if (typeof val === 'number')\n        return 'number';\n    if (typeof val === 'boolean')\n        return 'boolean';\n    if (typeof val === 'symbol')\n        return 'symbol';\n    if (typeof val === 'bigint')\n        return 'bigint';\n    if (val.constructor && val.constructor.name)\n        return val.constructor.name;\n    if (val.name)\n        return val.name;\n    if (val.constructor)\n        return String(val.constructor);\n    return String(val);\n};\nexport var isType = function (value, type) {\n    if (type === 'null')\n        return value === null;\n    if (type === 'undefined')\n        return value === undefined;\n    if (type === 'string')\n        return typeof value === 'string';\n    if (type === 'number')\n        return typeof value === 'number' && !isNaN(value);\n    if (type === 'boolean')\n        return typeof value === 'boolean';\n    if (type === 'symbol')\n        return typeof value === 'symbol';\n    if (type === 'bigint')\n        return typeof value === 'bigint';\n    if (type === Date)\n        return value instanceof Date;\n    if (type === Array)\n        return value instanceof Array;\n    if (type === Uint8Array)\n        return value instanceof Uint8Array;\n    if (type === ArrayBuffer)\n        return value instanceof ArrayBuffer;\n    if (type === Function)\n        return value instanceof Function;\n    return value instanceof type[0];\n};\nexport var createTypeErrorMsg = function (value, valueName, types) {\n    var allowedTypes = new Array(types.length);\n    for (var idx = 0, len = types.length; idx < len; idx++) {\n        var type = types[idx];\n        if (type === 'null')\n            allowedTypes[idx] = backtick('null');\n        if (type === 'undefined')\n            allowedTypes[idx] = backtick('undefined');\n        if (type === 'string')\n            allowedTypes[idx] = backtick('string');\n        else if (type === 'number')\n            allowedTypes[idx] = backtick('number');\n        else if (type === 'boolean')\n            allowedTypes[idx] = backtick('boolean');\n        else if (type === 'symbol')\n            allowedTypes[idx] = backtick('symbol');\n        else if (type === 'bigint')\n            allowedTypes[idx] = backtick('bigint');\n        else if (type === Array)\n            allowedTypes[idx] = backtick('Array');\n        else if (type === Uint8Array)\n            allowedTypes[idx] = backtick('Uint8Array');\n        else if (type === ArrayBuffer)\n            allowedTypes[idx] = backtick('ArrayBuffer');\n        else\n            allowedTypes[idx] = backtick(type[1]);\n    }\n    var joinedTypes = allowedTypes.join(' or ');\n    // prettier-ignore\n    return backtick(valueName) + \" must be of type \" + joinedTypes + \", but was actually of type \" + backtick(getType(value));\n};\nexport var assertIs = function (value, valueName, types) {\n    for (var idx = 0, len = types.length; idx < len; idx++) {\n        if (isType(value, types[idx]))\n            return;\n    }\n    throw new TypeError(createTypeErrorMsg(value, valueName, types));\n};\nexport var assertOrUndefined = function (value, valueName, types) {\n    assertIs(value, valueName, types.concat('undefined'));\n};\nexport var assertEachIs = function (values, valueName, types) {\n    for (var idx = 0, len = values.length; idx < len; idx++) {\n        assertIs(values[idx], valueName, types);\n    }\n};\nexport var assertRange = function (value, valueName, min, max) {\n    assertIs(value, valueName, ['number']);\n    assertIs(min, 'min', ['number']);\n    assertIs(max, 'max', ['number']);\n    max = Math.max(min, max);\n    if (value < min || value > max) {\n        // prettier-ignore\n        throw new Error(backtick(valueName) + \" must be at least \" + min + \" and at most \" + max + \", but was actually \" + value);\n    }\n};\nexport var assertRangeOrUndefined = function (value, valueName, min, max) {\n    assertIs(value, valueName, ['number', 'undefined']);\n    if (typeof value === 'number')\n        assertRange(value, valueName, min, max);\n};\nexport var assertMultiple = function (value, valueName, multiplier) {\n    assertIs(value, valueName, ['number']);\n    if (value % multiplier !== 0) {\n        // prettier-ignore\n        throw new Error(backtick(valueName) + \" must be a multiple of \" + multiplier + \", but was actually \" + value);\n    }\n};\nexport var assertInteger = function (value, valueName) {\n    if (!Number.isInteger(value)) {\n        throw new Error(backtick(valueName) + \" must be an integer, but was actually \" + value);\n    }\n};\nexport var assertPositive = function (value, valueName) {\n    if (![1, 0].includes(Math.sign(value))) {\n        // prettier-ignore\n        throw new Error(backtick(valueName) + \" must be a positive number or 0, but was actually \" + value);\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}