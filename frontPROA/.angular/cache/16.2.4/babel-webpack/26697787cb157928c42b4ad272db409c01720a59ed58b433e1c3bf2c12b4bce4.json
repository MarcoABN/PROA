{"ast":null,"code":"import _asyncToGenerator from \"E:/PROA/frontPROA/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { PDFDocument } from 'pdf-lib';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../front-cliente.service\";\nexport let Anexo2FService = /*#__PURE__*/(() => {\n  class Anexo2FService {\n    constructor(clienteService) {\n      this.clienteService = clienteService;\n    }\n    anexo2F(embarcacao, campotexto1, campotexto2, servico) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        yield _this.carregarDados(campotexto1);\n        try {\n          const pdfBytes = yield fetch('assets/pdfanexos/Anexo2F-N212.pdf').then(res => res.arrayBuffer());\n          const pdfDoc = yield PDFDocument.load(pdfBytes);\n          const form = pdfDoc.getForm();\n          form.getTextField('nomemotoaquatica').setText(embarcacao.nomeEmbarcacao);\n          form.getTextField('inscricao').setText(embarcacao.numInscricao);\n          form.getTextField('cp-dl-ag').setText(campotexto2);\n          form.getTextField('nomeproprietarioanterior').setText(embarcacao.cliente.nome);\n          //form.getTextField('tipo').setText(embarcacao.cliente.?);\n          form.getTextField('rg').setText(embarcacao.cliente.rg);\n          form.getTextField('orgaoexpedidor').setText(embarcacao.cliente.orgEmissor);\n          form.getTextField('dtexpedicao').setText(embarcacao.cliente.dtEmissao.toString());\n          form.getTextField('cpfcnpj').setText(embarcacao.cliente.cpfcnpj);\n          form.getTextField('endereco').setText(embarcacao.cliente.cpfcnpj);\n          form.getTextField('complemento').setText(embarcacao.cliente.complemento);\n          form.getTextField('numero').setText(embarcacao.cliente.numero);\n          form.getTextField('bairro').setText(embarcacao.cliente.bairro);\n          form.getTextField('cidade').setText(embarcacao.cliente.cidade);\n          form.getTextField('uf').setText(embarcacao.cliente.uf);\n          form.getTextField('cep').setText(embarcacao.cliente.cep);\n          form.getTextField('nomenovoproprietario').setText(_this.clienteNovo.nome);\n          form.getTextField('rgnovoproprietario').setText(_this.clienteNovo.rg);\n          //form.getTextField('tiponovoproprietario').setText(this.clienteNovo.tipo?);\n          form.getTextField('orgaoexpedidornovoproprietario').setText(_this.clienteNovo.orgEmissor);\n          form.getTextField('dtexpedicaonovoproprietario').setText(_this.clienteNovo.dtEmissao.toString());\n          form.getTextField('cpfcnpjnovoproprietario').setText(_this.clienteNovo.cpfcnpj);\n          form.getTextField('endereconovoproprietario').setText(_this.clienteNovo.logradouro);\n          form.getTextField('numeronovoproprietario').setText(_this.clienteNovo.numero);\n          form.getTextField('complementonovoproprietario').setText(_this.clienteNovo.complemento);\n          form.getTextField('bairronovoproprietario').setText(_this.clienteNovo.bairro);\n          form.getTextField('cidadenovoproprietario').setText(_this.clienteNovo.cidade);\n          form.getTextField('ufnovoproprietario').setText(_this.clienteNovo.uf);\n          form.getTextField('cepnovoproprietario').setText(_this.clienteNovo.cep);\n          form.getTextField('local').setText(_this.clienteNovo.cidade);\n          const hoje = new Date();\n          const dia = hoje.getDate().toString().padStart(2, '0');\n          const mes = (hoje.getMonth() + 1).toString().padStart(2, '0'); //Os meses são baseados em zero, então é necessário adicionar 1.\n          const ano = hoje.getFullYear().toString();\n          form.getTextField('dia').setText(dia);\n          form.getTextField('ano').setText(ano.slice(-2));\n          // form.getTextField('mesextenso').setText(mes);\n          switch (mes) {\n            case '01':\n              form.getTextField('mes').setText('Janeiro');\n              break;\n            case '02':\n              form.getTextField('mes').setText('Fevereiro');\n              break;\n            case '03':\n              form.getTextField('mes').setText('Março');\n              break;\n            case '04':\n              form.getTextField('mes').setText('Abril');\n              break;\n            case '05':\n              form.getTextField('mes').setText('Maio');\n              break;\n            case '06':\n              form.getTextField('mes').setText('Junho');\n              break;\n            case '07':\n              form.getTextField('mes').setText('Julho');\n              break;\n            case '08':\n              form.getTextField('mes').setText('Agosto');\n              break;\n            case '09':\n              form.getTextField('mes').setText('Setembro');\n              break;\n            case '10':\n              form.getTextField('mes').setText('Outubro');\n              break;\n            case '11':\n              form.getTextField('mes').setText('Novembro');\n              break;\n            case '12':\n              form.getTextField('mes').setText('Dezembro');\n              break;\n          }\n          form.flatten();\n          const modifiedPdfBytes = yield pdfDoc.save();\n          if (!servico) {\n            _this.abrirPDFemJanela(modifiedPdfBytes);\n            console.log('PDF Criado!');\n          } else {\n            return modifiedPdfBytes;\n          }\n        } catch (err) {\n          console.log(err);\n        }\n      })();\n    }\n    abrirPDFemJanela(data) {\n      const blob = new Blob([data], {\n        type: 'application/pdf'\n      });\n      const url = window.URL.createObjectURL(blob);\n      window.open(url, '_blank');\n    }\n    carregarDados(campotexto1) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        _this2.clienteService.consultarClienteCPFCNPJ(campotexto1).subscribe(cliente => {\n          _this2.clienteNovo = cliente;\n        });\n      })();\n    }\n    static #_ = this.ɵfac = function Anexo2FService_Factory(t) {\n      return new (t || Anexo2FService)(i0.ɵɵinject(i1.FrontClienteService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: Anexo2FService,\n      factory: Anexo2FService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return Anexo2FService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}