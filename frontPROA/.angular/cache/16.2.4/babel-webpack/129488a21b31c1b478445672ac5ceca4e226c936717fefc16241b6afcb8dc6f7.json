{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFString from \"../objects/PDFString\";\nimport PDFHexString from \"../objects/PDFHexString\";\nimport PDFArray from \"../objects/PDFArray\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFAcroTerminal from \"./PDFAcroTerminal\";\nimport { IndexOutOfBoundsError } from \"../errors\";\nvar PDFAcroButton = /** @class */function (_super) {\n  __extends(PDFAcroButton, _super);\n  function PDFAcroButton() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  PDFAcroButton.prototype.Opt = function () {\n    return this.dict.lookupMaybe(PDFName.of('Opt'), PDFString, PDFHexString, PDFArray);\n  };\n  PDFAcroButton.prototype.setOpt = function (opt) {\n    this.dict.set(PDFName.of('Opt'), this.dict.context.obj(opt));\n  };\n  PDFAcroButton.prototype.getExportValues = function () {\n    var opt = this.Opt();\n    if (!opt) return undefined;\n    if (opt instanceof PDFString || opt instanceof PDFHexString) {\n      return [opt];\n    }\n    var values = [];\n    for (var idx = 0, len = opt.size(); idx < len; idx++) {\n      var value = opt.lookup(idx);\n      if (value instanceof PDFString || value instanceof PDFHexString) {\n        values.push(value);\n      }\n    }\n    return values;\n  };\n  PDFAcroButton.prototype.removeExportValue = function (idx) {\n    var opt = this.Opt();\n    if (!opt) return;\n    if (opt instanceof PDFString || opt instanceof PDFHexString) {\n      if (idx !== 0) throw new IndexOutOfBoundsError(idx, 0, 0);\n      this.setOpt([]);\n    } else {\n      if (idx < 0 || idx > opt.size()) {\n        throw new IndexOutOfBoundsError(idx, 0, opt.size());\n      }\n      opt.remove(idx);\n    }\n  };\n  // Enforce use use of /Opt even if it isn't strictly necessary\n  PDFAcroButton.prototype.normalizeExportValues = function () {\n    var _a, _b, _c, _d;\n    var exportValues = (_a = this.getExportValues()) !== null && _a !== void 0 ? _a : [];\n    var Opt = [];\n    var widgets = this.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var exportVal = (_b = exportValues[idx]) !== null && _b !== void 0 ? _b : PDFHexString.fromText((_d = (_c = widget.getOnValue()) === null || _c === void 0 ? void 0 : _c.decodeText()) !== null && _d !== void 0 ? _d : '');\n      Opt.push(exportVal);\n    }\n    this.setOpt(Opt);\n  };\n  /**\n   * Reuses existing opt if one exists with the same value (assuming\n   * `useExistingIdx` is `true`). Returns index of existing (or new) opt.\n   */\n  PDFAcroButton.prototype.addOpt = function (opt, useExistingOptIdx) {\n    var _a;\n    this.normalizeExportValues();\n    var optText = opt.decodeText();\n    var existingIdx;\n    if (useExistingOptIdx) {\n      var exportValues = (_a = this.getExportValues()) !== null && _a !== void 0 ? _a : [];\n      for (var idx = 0, len = exportValues.length; idx < len; idx++) {\n        var exportVal = exportValues[idx];\n        if (exportVal.decodeText() === optText) existingIdx = idx;\n      }\n    }\n    var Opt = this.Opt();\n    Opt.push(opt);\n    return existingIdx !== null && existingIdx !== void 0 ? existingIdx : Opt.size() - 1;\n  };\n  PDFAcroButton.prototype.addWidgetWithOpt = function (widget, opt, useExistingOptIdx) {\n    var optIdx = this.addOpt(opt, useExistingOptIdx);\n    var apStateValue = PDFName.of(String(optIdx));\n    this.addWidget(widget);\n    return apStateValue;\n  };\n  return PDFAcroButton;\n}(PDFAcroTerminal);\nexport default PDFAcroButton;","map":{"version":3,"names":["__extends","PDFString","PDFHexString","PDFArray","PDFName","PDFAcroTerminal","IndexOutOfBoundsError","PDFAcroButton","_super","apply","arguments","prototype","Opt","dict","lookupMaybe","of","setOpt","opt","set","context","obj","getExportValues","undefined","values","idx","len","size","value","lookup","push","removeExportValue","remove","normalizeExportValues","_a","_b","_c","_d","exportValues","widgets","getWidgets","length","widget","exportVal","fromText","getOnValue","decodeText","addOpt","useExistingOptIdx","optText","existingIdx","addWidgetWithOpt","optIdx","apStateValue","String","addWidget"],"sources":["E:/PROA/frontPROA/node_modules/pdf-lib/es/core/acroform/PDFAcroButton.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport PDFString from \"../objects/PDFString\";\nimport PDFHexString from \"../objects/PDFHexString\";\nimport PDFArray from \"../objects/PDFArray\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFAcroTerminal from \"./PDFAcroTerminal\";\nimport { IndexOutOfBoundsError } from \"../errors\";\nvar PDFAcroButton = /** @class */ (function (_super) {\n    __extends(PDFAcroButton, _super);\n    function PDFAcroButton() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    PDFAcroButton.prototype.Opt = function () {\n        return this.dict.lookupMaybe(PDFName.of('Opt'), PDFString, PDFHexString, PDFArray);\n    };\n    PDFAcroButton.prototype.setOpt = function (opt) {\n        this.dict.set(PDFName.of('Opt'), this.dict.context.obj(opt));\n    };\n    PDFAcroButton.prototype.getExportValues = function () {\n        var opt = this.Opt();\n        if (!opt)\n            return undefined;\n        if (opt instanceof PDFString || opt instanceof PDFHexString) {\n            return [opt];\n        }\n        var values = [];\n        for (var idx = 0, len = opt.size(); idx < len; idx++) {\n            var value = opt.lookup(idx);\n            if (value instanceof PDFString || value instanceof PDFHexString) {\n                values.push(value);\n            }\n        }\n        return values;\n    };\n    PDFAcroButton.prototype.removeExportValue = function (idx) {\n        var opt = this.Opt();\n        if (!opt)\n            return;\n        if (opt instanceof PDFString || opt instanceof PDFHexString) {\n            if (idx !== 0)\n                throw new IndexOutOfBoundsError(idx, 0, 0);\n            this.setOpt([]);\n        }\n        else {\n            if (idx < 0 || idx > opt.size()) {\n                throw new IndexOutOfBoundsError(idx, 0, opt.size());\n            }\n            opt.remove(idx);\n        }\n    };\n    // Enforce use use of /Opt even if it isn't strictly necessary\n    PDFAcroButton.prototype.normalizeExportValues = function () {\n        var _a, _b, _c, _d;\n        var exportValues = (_a = this.getExportValues()) !== null && _a !== void 0 ? _a : [];\n        var Opt = [];\n        var widgets = this.getWidgets();\n        for (var idx = 0, len = widgets.length; idx < len; idx++) {\n            var widget = widgets[idx];\n            var exportVal = (_b = exportValues[idx]) !== null && _b !== void 0 ? _b : PDFHexString.fromText((_d = (_c = widget.getOnValue()) === null || _c === void 0 ? void 0 : _c.decodeText()) !== null && _d !== void 0 ? _d : '');\n            Opt.push(exportVal);\n        }\n        this.setOpt(Opt);\n    };\n    /**\n     * Reuses existing opt if one exists with the same value (assuming\n     * `useExistingIdx` is `true`). Returns index of existing (or new) opt.\n     */\n    PDFAcroButton.prototype.addOpt = function (opt, useExistingOptIdx) {\n        var _a;\n        this.normalizeExportValues();\n        var optText = opt.decodeText();\n        var existingIdx;\n        if (useExistingOptIdx) {\n            var exportValues = (_a = this.getExportValues()) !== null && _a !== void 0 ? _a : [];\n            for (var idx = 0, len = exportValues.length; idx < len; idx++) {\n                var exportVal = exportValues[idx];\n                if (exportVal.decodeText() === optText)\n                    existingIdx = idx;\n            }\n        }\n        var Opt = this.Opt();\n        Opt.push(opt);\n        return existingIdx !== null && existingIdx !== void 0 ? existingIdx : Opt.size() - 1;\n    };\n    PDFAcroButton.prototype.addWidgetWithOpt = function (widget, opt, useExistingOptIdx) {\n        var optIdx = this.addOpt(opt, useExistingOptIdx);\n        var apStateValue = PDFName.of(String(optIdx));\n        this.addWidget(widget);\n        return apStateValue;\n    };\n    return PDFAcroButton;\n}(PDFAcroTerminal));\nexport default PDFAcroButton;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}