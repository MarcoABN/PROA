{"ast":null,"code":"import PDFArray from \"../objects/PDFArray\";\nimport PDFBool from \"../objects/PDFBool\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFNumber from \"../objects/PDFNumber\";\nimport { assertEachIs, assertInteger, assertIsOneOf, assertRange } from \"../../utils\";\nvar asEnum = function (rawValue, enumType) {\n  if (rawValue === undefined) return undefined;\n  return enumType[rawValue];\n};\nexport var NonFullScreenPageMode;\n(function (NonFullScreenPageMode) {\n  /**\n   * After exiting FullScreen mode, neither the document outline nor thumbnail\n   * images should be visible.\n   */\n  NonFullScreenPageMode[\"UseNone\"] = \"UseNone\";\n  /** After exiting FullScreen mode, the document outline should be visible. */\n  NonFullScreenPageMode[\"UseOutlines\"] = \"UseOutlines\";\n  /** After exiting FullScreen mode, thumbnail images should be visible. */\n  NonFullScreenPageMode[\"UseThumbs\"] = \"UseThumbs\";\n  /**\n   * After exiting FullScreen mode, the optional content group panel should be\n   * visible.\n   */\n  NonFullScreenPageMode[\"UseOC\"] = \"UseOC\";\n})(NonFullScreenPageMode || (NonFullScreenPageMode = {}));\nexport var ReadingDirection;\n(function (ReadingDirection) {\n  /** The predominant reading order is Left to Right. */\n  ReadingDirection[\"L2R\"] = \"L2R\";\n  /**\n   * The predominant reading order is Right to left (including vertical writing\n   * systems, such as Chinese, Japanese and Korean).\n   */\n  ReadingDirection[\"R2L\"] = \"R2L\";\n})(ReadingDirection || (ReadingDirection = {}));\nexport var PrintScaling;\n(function (PrintScaling) {\n  /** No page scaling. */\n  PrintScaling[\"None\"] = \"None\";\n  /* Use the PDF reader's default print scaling. */\n  PrintScaling[\"AppDefault\"] = \"AppDefault\";\n})(PrintScaling || (PrintScaling = {}));\nexport var Duplex;\n(function (Duplex) {\n  /** The PDF reader should print single-sided. */\n  Duplex[\"Simplex\"] = \"Simplex\";\n  /**\n   * The PDF reader should print double sided and flip on the short edge of the\n   * sheet.\n   */\n  Duplex[\"DuplexFlipShortEdge\"] = \"DuplexFlipShortEdge\";\n  /**\n   * The PDF reader should print double sided and flip on the long edge of the\n   * sheet.\n   */\n  Duplex[\"DuplexFlipLongEdge\"] = \"DuplexFlipLongEdge\";\n})(Duplex || (Duplex = {}));\nvar ViewerPreferences = /** @class */function () {\n  /** @ignore */\n  function ViewerPreferences(dict) {\n    this.dict = dict;\n  }\n  ViewerPreferences.prototype.lookupBool = function (key) {\n    var returnObj = this.dict.lookup(PDFName.of(key));\n    if (returnObj instanceof PDFBool) return returnObj;\n    return undefined;\n  };\n  ViewerPreferences.prototype.lookupName = function (key) {\n    var returnObj = this.dict.lookup(PDFName.of(key));\n    if (returnObj instanceof PDFName) return returnObj;\n    return undefined;\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.HideToolbar = function () {\n    return this.lookupBool('HideToolbar');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.HideMenubar = function () {\n    return this.lookupBool('HideMenubar');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.HideWindowUI = function () {\n    return this.lookupBool('HideWindowUI');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.FitWindow = function () {\n    return this.lookupBool('FitWindow');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.CenterWindow = function () {\n    return this.lookupBool('CenterWindow');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.DisplayDocTitle = function () {\n    return this.lookupBool('DisplayDocTitle');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.NonFullScreenPageMode = function () {\n    return this.lookupName('NonFullScreenPageMode');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.Direction = function () {\n    return this.lookupName('Direction');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.PrintScaling = function () {\n    return this.lookupName('PrintScaling');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.Duplex = function () {\n    return this.lookupName('Duplex');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.PickTrayByPDFSize = function () {\n    return this.lookupBool('PickTrayByPDFSize');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.PrintPageRange = function () {\n    var PrintPageRange = this.dict.lookup(PDFName.of('PrintPageRange'));\n    if (PrintPageRange instanceof PDFArray) return PrintPageRange;\n    return undefined;\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.NumCopies = function () {\n    var NumCopies = this.dict.lookup(PDFName.of('NumCopies'));\n    if (NumCopies instanceof PDFNumber) return NumCopies;\n    return undefined;\n  };\n  /**\n   * Returns `true` if PDF readers should hide the toolbar menus when displaying\n   * this document.\n   * @returns Whether or not toolbars should be hidden.\n   */\n  ViewerPreferences.prototype.getHideToolbar = function () {\n    var _a, _b;\n    return (_b = (_a = this.HideToolbar()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n  };\n  /**\n   * Returns `true` if PDF readers should hide the menu bar when displaying this\n   * document.\n   * @returns Whether or not the menu bar should be hidden.\n   */\n  ViewerPreferences.prototype.getHideMenubar = function () {\n    var _a, _b;\n    return (_b = (_a = this.HideMenubar()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n  };\n  /**\n   * Returns `true` if PDF readers should hide the user interface elements in\n   * the document's window (such as scroll bars and navigation controls),\n   * leaving only the document's contents displayed.\n   * @returns Whether or not user interface elements should be hidden.\n   */\n  ViewerPreferences.prototype.getHideWindowUI = function () {\n    var _a, _b;\n    return (_b = (_a = this.HideWindowUI()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n  };\n  /**\n   * Returns `true` if PDF readers should resize the document's window to fit\n   * the size of the first displayed page.\n   * @returns Whether or not the window should be resized to fit.\n   */\n  ViewerPreferences.prototype.getFitWindow = function () {\n    var _a, _b;\n    return (_b = (_a = this.FitWindow()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n  };\n  /**\n   * Returns `true` if PDF readers should position the document's window in the\n   * center of the screen.\n   * @returns Whether or not to center the document window.\n   */\n  ViewerPreferences.prototype.getCenterWindow = function () {\n    var _a, _b;\n    return (_b = (_a = this.CenterWindow()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n  };\n  /**\n   * Returns `true` if the window's title bar should display the document\n   * `Title`, taken from the document metadata (see [[PDFDocument.getTitle]]).\n   * Returns `false` if the title bar should instead display the filename of the\n   * PDF file.\n   * @returns Whether to display the document title.\n   */\n  ViewerPreferences.prototype.getDisplayDocTitle = function () {\n    var _a, _b;\n    return (_b = (_a = this.DisplayDocTitle()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n  };\n  /**\n   * Returns the page mode, which tells the PDF reader how to display the\n   * document after exiting full-screen mode.\n   * @returns The page mode after exiting full-screen mode.\n   */\n  ViewerPreferences.prototype.getNonFullScreenPageMode = function () {\n    var _a, _b;\n    var mode = (_a = this.NonFullScreenPageMode()) === null || _a === void 0 ? void 0 : _a.decodeText();\n    return (_b = asEnum(mode, NonFullScreenPageMode)) !== null && _b !== void 0 ? _b : NonFullScreenPageMode.UseNone;\n  };\n  /**\n   * Returns the predominant reading order for text.\n   * @returns The text reading order.\n   */\n  ViewerPreferences.prototype.getReadingDirection = function () {\n    var _a, _b;\n    var direction = (_a = this.Direction()) === null || _a === void 0 ? void 0 : _a.decodeText();\n    return (_b = asEnum(direction, ReadingDirection)) !== null && _b !== void 0 ? _b : ReadingDirection.L2R;\n  };\n  /**\n   * Returns the page scaling option that the PDF reader should select when the\n   * print dialog is displayed.\n   * @returns The page scaling option.\n   */\n  ViewerPreferences.prototype.getPrintScaling = function () {\n    var _a, _b;\n    var scaling = (_a = this.PrintScaling()) === null || _a === void 0 ? void 0 : _a.decodeText();\n    return (_b = asEnum(scaling, PrintScaling)) !== null && _b !== void 0 ? _b : PrintScaling.AppDefault;\n  };\n  /**\n   * Returns the paper handling option that should be used when printing the\n   * file from the print dialog.\n   * @returns The paper handling option.\n   */\n  ViewerPreferences.prototype.getDuplex = function () {\n    var _a;\n    var duplex = (_a = this.Duplex()) === null || _a === void 0 ? void 0 : _a.decodeText();\n    return asEnum(duplex, Duplex);\n  };\n  /**\n   * Returns `true` if the PDF page size should be used to select the input\n   * paper tray.\n   * @returns Whether or not the PDF page size should be used to select the\n   *          input paper tray.\n   */\n  ViewerPreferences.prototype.getPickTrayByPDFSize = function () {\n    var _a;\n    return (_a = this.PickTrayByPDFSize()) === null || _a === void 0 ? void 0 : _a.asBoolean();\n  };\n  /**\n   * Returns an array of page number ranges, which are the values used to\n   * initialize the print dialog box when the file is printed. Each range\n   * specifies the first (`start`) and last (`end`) pages in a sub-range of\n   * pages to be printed. The first page of the PDF file is denoted by 0.\n   * For example:\n   * ```js\n   * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\n   * const includesPage3 = viewerPrefs\n   *   .getPrintRanges()\n   *   .some(pr => pr.start =< 2 && pr.end >= 2)\n   * if (includesPage3) console.log('printRange includes page 3')\n   * ```\n   * @returns An array of objects, each with the properties `start` and `end`,\n   *          denoting page indices. If not, specified an empty array is\n   *          returned.\n   */\n  ViewerPreferences.prototype.getPrintPageRange = function () {\n    var rng = this.PrintPageRange();\n    if (!rng) return [];\n    var pageRanges = [];\n    for (var i = 0; i < rng.size(); i += 2) {\n      // Despite the spec clearly stating that \"The first page of the PDF file\n      // shall be donoted by 1\", several test PDFs (spec 1.7) created in\n      // Acrobat XI 11.0 and also read with Reader DC 2020.013 indicate this is\n      // actually a 0 based index.\n      var start = rng.lookup(i, PDFNumber).asNumber();\n      var end = rng.lookup(i + 1, PDFNumber).asNumber();\n      pageRanges.push({\n        start: start,\n        end: end\n      });\n    }\n    return pageRanges;\n  };\n  /**\n   * Returns the number of copies to be printed when the print dialog is opened\n   * for this document.\n   * @returns The default number of copies to be printed.\n   */\n  ViewerPreferences.prototype.getNumCopies = function () {\n    var _a, _b;\n    return (_b = (_a = this.NumCopies()) === null || _a === void 0 ? void 0 : _a.asNumber()) !== null && _b !== void 0 ? _b : 1;\n  };\n  /**\n   * Choose whether the PDF reader's toolbars should be hidden while the\n   * document is active.\n   * @param hideToolbar `true` if the toolbar should be hidden.\n   */\n  ViewerPreferences.prototype.setHideToolbar = function (hideToolbar) {\n    var HideToolbar = this.dict.context.obj(hideToolbar);\n    this.dict.set(PDFName.of('HideToolbar'), HideToolbar);\n  };\n  /**\n   * Choose whether the PDF reader's menu bar should be hidden while the\n   * document is active.\n   * @param hideMenubar `true` if the menu bar should be hidden.\n   */\n  ViewerPreferences.prototype.setHideMenubar = function (hideMenubar) {\n    var HideMenubar = this.dict.context.obj(hideMenubar);\n    this.dict.set(PDFName.of('HideMenubar'), HideMenubar);\n  };\n  /**\n   * Choose whether the PDF reader should hide user interface elements in the\n   * document's window (such as scroll bars and navigation controls), leaving\n   * only the document's contents displayed.\n   * @param hideWindowUI `true` if the user interface elements should be hidden.\n   */\n  ViewerPreferences.prototype.setHideWindowUI = function (hideWindowUI) {\n    var HideWindowUI = this.dict.context.obj(hideWindowUI);\n    this.dict.set(PDFName.of('HideWindowUI'), HideWindowUI);\n  };\n  /**\n   * Choose whether the PDF reader should resize the document's window to fit\n   * the size of the first displayed page.\n   * @param fitWindow `true` if the window should be resized.\n   */\n  ViewerPreferences.prototype.setFitWindow = function (fitWindow) {\n    var FitWindow = this.dict.context.obj(fitWindow);\n    this.dict.set(PDFName.of('FitWindow'), FitWindow);\n  };\n  /**\n   * Choose whether the PDF reader should position the document's window in the\n   * center of the screen.\n   * @param centerWindow `true` if the window should be centered.\n   */\n  ViewerPreferences.prototype.setCenterWindow = function (centerWindow) {\n    var CenterWindow = this.dict.context.obj(centerWindow);\n    this.dict.set(PDFName.of('CenterWindow'), CenterWindow);\n  };\n  /**\n   * Choose whether the window's title bar should display the document `Title`\n   * taken from the document metadata (see [[PDFDocument.setTitle]]). If\n   * `false`, the title bar should instead display the PDF filename.\n   * @param displayTitle `true` if the document title should be displayed.\n   */\n  ViewerPreferences.prototype.setDisplayDocTitle = function (displayTitle) {\n    var DisplayDocTitle = this.dict.context.obj(displayTitle);\n    this.dict.set(PDFName.of('DisplayDocTitle'), DisplayDocTitle);\n  };\n  /**\n   * Choose how the PDF reader should display the document upon exiting\n   * full-screen mode. This entry is meaningful only if the value of the\n   * `PageMode` entry in the document's [[PDFCatalog]] is `FullScreen`.\n   *\n   * For example:\n   * ```js\n   * import { PDFDocument, NonFullScreenPageMode, PDFName } from 'pdf-lib'\n   *\n   * const pdfDoc = await PDFDocument.create()\n   *\n   * // Set the PageMode\n   * pdfDoc.catalog.set(PDFName.of('PageMode'),PDFName.of('FullScreen'))\n   *\n   * // Set what happens when full-screen is closed\n   * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\n   * viewerPrefs.setNonFullScreenPageMode(NonFullScreenPageMode.UseOutlines)\n   * ```\n   *\n   * @param nonFullScreenPageMode How the document should be displayed upon\n   *                              exiting full screen mode.\n   */\n  ViewerPreferences.prototype.setNonFullScreenPageMode = function (nonFullScreenPageMode) {\n    assertIsOneOf(nonFullScreenPageMode, 'nonFullScreenPageMode', NonFullScreenPageMode);\n    var mode = PDFName.of(nonFullScreenPageMode);\n    this.dict.set(PDFName.of('NonFullScreenPageMode'), mode);\n  };\n  /**\n   * Choose the predominant reading order for text.\n   *\n   * This entry has no direct effect on the document's contents or page\n   * numbering, but may be used to determine the relative positioning of pages\n   * when displayed side by side or printed n-up.\n   *\n   * For example:\n   * ```js\n   * import { PDFDocument, ReadingDirection } from 'pdf-lib'\n   *\n   * const pdfDoc = await PDFDocument.create()\n   * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\n   * viewerPrefs.setReadingDirection(ReadingDirection.R2L)\n   * ```\n   *\n   * @param readingDirection The reading order for text.\n   */\n  ViewerPreferences.prototype.setReadingDirection = function (readingDirection) {\n    assertIsOneOf(readingDirection, 'readingDirection', ReadingDirection);\n    var direction = PDFName.of(readingDirection);\n    this.dict.set(PDFName.of('Direction'), direction);\n  };\n  /**\n   * Choose the page scaling option that should be selected when a print dialog\n   * is displayed for this document.\n   *\n   * For example:\n   * ```js\n   * import { PDFDocument, PrintScaling } from 'pdf-lib'\n   *\n   * const pdfDoc = await PDFDocument.create()\n   * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\n   * viewerPrefs.setPrintScaling(PrintScaling.None)\n   * ```\n   *\n   * @param printScaling The print scaling option.\n   */\n  ViewerPreferences.prototype.setPrintScaling = function (printScaling) {\n    assertIsOneOf(printScaling, 'printScaling', PrintScaling);\n    var scaling = PDFName.of(printScaling);\n    this.dict.set(PDFName.of('PrintScaling'), scaling);\n  };\n  /**\n   * Choose the paper handling option that should be selected by default in the\n   * print dialog.\n   *\n   * For example:\n   * ```js\n   * import { PDFDocument, Duplex } from 'pdf-lib'\n   *\n   * const pdfDoc = await PDFDocument.create()\n   * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\n   * viewerPrefs.setDuplex(Duplex.DuplexFlipShortEdge)\n   * ```\n   *\n   * @param duplex The double or single sided printing option.\n   */\n  ViewerPreferences.prototype.setDuplex = function (duplex) {\n    assertIsOneOf(duplex, 'duplex', Duplex);\n    var dup = PDFName.of(duplex);\n    this.dict.set(PDFName.of('Duplex'), dup);\n  };\n  /**\n   * Choose whether the PDF document's page size should be used to select the\n   * input paper tray when printing. This setting influences only the preset\n   * values used to populate the print dialog presented by a PDF reader.\n   *\n   * If PickTrayByPDFSize is true, the check box in the print dialog associated\n   * with input paper tray should be checked. This setting has no effect on\n   * operating systems that do not provide the ability to pick the input tray\n   * by size.\n   *\n   * @param pickTrayByPDFSize `true` if the document's page size should be used\n   *                          to select the input paper tray.\n   */\n  ViewerPreferences.prototype.setPickTrayByPDFSize = function (pickTrayByPDFSize) {\n    var PickTrayByPDFSize = this.dict.context.obj(pickTrayByPDFSize);\n    this.dict.set(PDFName.of('PickTrayByPDFSize'), PickTrayByPDFSize);\n  };\n  /**\n   * Choose the page numbers used to initialize the print dialog box when the\n   * file is printed. The first page of the PDF file is denoted by 0.\n   *\n   * For example:\n   * ```js\n   * import { PDFDocument } from 'pdf-lib'\n   *\n   * const pdfDoc = await PDFDocument.create()\n   * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\n   *\n   * // We can set the default print range to only the first page\n   * viewerPrefs.setPrintPageRange({ start: 0, end: 0 })\n   *\n   * // Or we can supply noncontiguous ranges (e.g. pages 1, 3, and 5-7)\n   * viewerPrefs.setPrintPageRange([\n   *   { start: 0, end: 0 },\n   *   { start: 2, end: 2 },\n   *   { start: 4, end: 6 },\n   * ])\n   * ```\n   *\n   * @param printPageRange An object or array of objects, each with the\n   *                       properties `start` and `end`, denoting a range of\n   *                       page indices.\n   */\n  ViewerPreferences.prototype.setPrintPageRange = function (printPageRange) {\n    if (!Array.isArray(printPageRange)) printPageRange = [printPageRange];\n    var flatRange = [];\n    for (var idx = 0, len = printPageRange.length; idx < len; idx++) {\n      flatRange.push(printPageRange[idx].start);\n      flatRange.push(printPageRange[idx].end);\n    }\n    assertEachIs(flatRange, 'printPageRange', ['number']);\n    var pageRanges = this.dict.context.obj(flatRange);\n    this.dict.set(PDFName.of('PrintPageRange'), pageRanges);\n  };\n  /**\n   * Choose the default number of copies to be printed when the print dialog is\n   * opened for this file.\n   * @param numCopies The default number of copies.\n   */\n  ViewerPreferences.prototype.setNumCopies = function (numCopies) {\n    assertRange(numCopies, 'numCopies', 1, Number.MAX_VALUE);\n    assertInteger(numCopies, 'numCopies');\n    var NumCopies = this.dict.context.obj(numCopies);\n    this.dict.set(PDFName.of('NumCopies'), NumCopies);\n  };\n  /** @ignore */\n  ViewerPreferences.fromDict = function (dict) {\n    return new ViewerPreferences(dict);\n  };\n  /** @ignore */\n  ViewerPreferences.create = function (context) {\n    var dict = context.obj({});\n    return new ViewerPreferences(dict);\n  };\n  return ViewerPreferences;\n}();\nexport default ViewerPreferences;","map":{"version":3,"names":["PDFArray","PDFBool","PDFName","PDFNumber","assertEachIs","assertInteger","assertIsOneOf","assertRange","asEnum","rawValue","enumType","undefined","NonFullScreenPageMode","ReadingDirection","PrintScaling","Duplex","ViewerPreferences","dict","prototype","lookupBool","key","returnObj","lookup","of","lookupName","HideToolbar","HideMenubar","HideWindowUI","FitWindow","CenterWindow","DisplayDocTitle","Direction","PickTrayByPDFSize","PrintPageRange","NumCopies","getHideToolbar","_a","_b","asBoolean","getHideMenubar","getHideWindowUI","getFitWindow","getCenterWindow","getDisplayDocTitle","getNonFullScreenPageMode","mode","decodeText","UseNone","getReadingDirection","direction","L2R","getPrintScaling","scaling","AppDefault","getDuplex","duplex","getPickTrayByPDFSize","getPrintPageRange","rng","pageRanges","i","size","start","asNumber","end","push","getNumCopies","setHideToolbar","hideToolbar","context","obj","set","setHideMenubar","hideMenubar","setHideWindowUI","hideWindowUI","setFitWindow","fitWindow","setCenterWindow","centerWindow","setDisplayDocTitle","displayTitle","setNonFullScreenPageMode","nonFullScreenPageMode","setReadingDirection","readingDirection","setPrintScaling","printScaling","setDuplex","dup","setPickTrayByPDFSize","pickTrayByPDFSize","setPrintPageRange","printPageRange","Array","isArray","flatRange","idx","len","length","setNumCopies","numCopies","Number","MAX_VALUE","fromDict","create"],"sources":["E:/PROA/frontPROA/node_modules/pdf-lib/es/core/interactive/ViewerPreferences.js"],"sourcesContent":["import PDFArray from \"../objects/PDFArray\";\nimport PDFBool from \"../objects/PDFBool\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFNumber from \"../objects/PDFNumber\";\nimport { assertEachIs, assertInteger, assertIsOneOf, assertRange, } from \"../../utils\";\nvar asEnum = function (rawValue, enumType) {\n    if (rawValue === undefined)\n        return undefined;\n    return enumType[rawValue];\n};\nexport var NonFullScreenPageMode;\n(function (NonFullScreenPageMode) {\n    /**\n     * After exiting FullScreen mode, neither the document outline nor thumbnail\n     * images should be visible.\n     */\n    NonFullScreenPageMode[\"UseNone\"] = \"UseNone\";\n    /** After exiting FullScreen mode, the document outline should be visible. */\n    NonFullScreenPageMode[\"UseOutlines\"] = \"UseOutlines\";\n    /** After exiting FullScreen mode, thumbnail images should be visible. */\n    NonFullScreenPageMode[\"UseThumbs\"] = \"UseThumbs\";\n    /**\n     * After exiting FullScreen mode, the optional content group panel should be\n     * visible.\n     */\n    NonFullScreenPageMode[\"UseOC\"] = \"UseOC\";\n})(NonFullScreenPageMode || (NonFullScreenPageMode = {}));\nexport var ReadingDirection;\n(function (ReadingDirection) {\n    /** The predominant reading order is Left to Right. */\n    ReadingDirection[\"L2R\"] = \"L2R\";\n    /**\n     * The predominant reading order is Right to left (including vertical writing\n     * systems, such as Chinese, Japanese and Korean).\n     */\n    ReadingDirection[\"R2L\"] = \"R2L\";\n})(ReadingDirection || (ReadingDirection = {}));\nexport var PrintScaling;\n(function (PrintScaling) {\n    /** No page scaling. */\n    PrintScaling[\"None\"] = \"None\";\n    /* Use the PDF reader's default print scaling. */\n    PrintScaling[\"AppDefault\"] = \"AppDefault\";\n})(PrintScaling || (PrintScaling = {}));\nexport var Duplex;\n(function (Duplex) {\n    /** The PDF reader should print single-sided. */\n    Duplex[\"Simplex\"] = \"Simplex\";\n    /**\n     * The PDF reader should print double sided and flip on the short edge of the\n     * sheet.\n     */\n    Duplex[\"DuplexFlipShortEdge\"] = \"DuplexFlipShortEdge\";\n    /**\n     * The PDF reader should print double sided and flip on the long edge of the\n     * sheet.\n     */\n    Duplex[\"DuplexFlipLongEdge\"] = \"DuplexFlipLongEdge\";\n})(Duplex || (Duplex = {}));\nvar ViewerPreferences = /** @class */ (function () {\n    /** @ignore */\n    function ViewerPreferences(dict) {\n        this.dict = dict;\n    }\n    ViewerPreferences.prototype.lookupBool = function (key) {\n        var returnObj = this.dict.lookup(PDFName.of(key));\n        if (returnObj instanceof PDFBool)\n            return returnObj;\n        return undefined;\n    };\n    ViewerPreferences.prototype.lookupName = function (key) {\n        var returnObj = this.dict.lookup(PDFName.of(key));\n        if (returnObj instanceof PDFName)\n            return returnObj;\n        return undefined;\n    };\n    /** @ignore */\n    ViewerPreferences.prototype.HideToolbar = function () {\n        return this.lookupBool('HideToolbar');\n    };\n    /** @ignore */\n    ViewerPreferences.prototype.HideMenubar = function () {\n        return this.lookupBool('HideMenubar');\n    };\n    /** @ignore */\n    ViewerPreferences.prototype.HideWindowUI = function () {\n        return this.lookupBool('HideWindowUI');\n    };\n    /** @ignore */\n    ViewerPreferences.prototype.FitWindow = function () {\n        return this.lookupBool('FitWindow');\n    };\n    /** @ignore */\n    ViewerPreferences.prototype.CenterWindow = function () {\n        return this.lookupBool('CenterWindow');\n    };\n    /** @ignore */\n    ViewerPreferences.prototype.DisplayDocTitle = function () {\n        return this.lookupBool('DisplayDocTitle');\n    };\n    /** @ignore */\n    ViewerPreferences.prototype.NonFullScreenPageMode = function () {\n        return this.lookupName('NonFullScreenPageMode');\n    };\n    /** @ignore */\n    ViewerPreferences.prototype.Direction = function () {\n        return this.lookupName('Direction');\n    };\n    /** @ignore */\n    ViewerPreferences.prototype.PrintScaling = function () {\n        return this.lookupName('PrintScaling');\n    };\n    /** @ignore */\n    ViewerPreferences.prototype.Duplex = function () {\n        return this.lookupName('Duplex');\n    };\n    /** @ignore */\n    ViewerPreferences.prototype.PickTrayByPDFSize = function () {\n        return this.lookupBool('PickTrayByPDFSize');\n    };\n    /** @ignore */\n    ViewerPreferences.prototype.PrintPageRange = function () {\n        var PrintPageRange = this.dict.lookup(PDFName.of('PrintPageRange'));\n        if (PrintPageRange instanceof PDFArray)\n            return PrintPageRange;\n        return undefined;\n    };\n    /** @ignore */\n    ViewerPreferences.prototype.NumCopies = function () {\n        var NumCopies = this.dict.lookup(PDFName.of('NumCopies'));\n        if (NumCopies instanceof PDFNumber)\n            return NumCopies;\n        return undefined;\n    };\n    /**\n     * Returns `true` if PDF readers should hide the toolbar menus when displaying\n     * this document.\n     * @returns Whether or not toolbars should be hidden.\n     */\n    ViewerPreferences.prototype.getHideToolbar = function () {\n        var _a, _b;\n        return (_b = (_a = this.HideToolbar()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n    };\n    /**\n     * Returns `true` if PDF readers should hide the menu bar when displaying this\n     * document.\n     * @returns Whether or not the menu bar should be hidden.\n     */\n    ViewerPreferences.prototype.getHideMenubar = function () {\n        var _a, _b;\n        return (_b = (_a = this.HideMenubar()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n    };\n    /**\n     * Returns `true` if PDF readers should hide the user interface elements in\n     * the document's window (such as scroll bars and navigation controls),\n     * leaving only the document's contents displayed.\n     * @returns Whether or not user interface elements should be hidden.\n     */\n    ViewerPreferences.prototype.getHideWindowUI = function () {\n        var _a, _b;\n        return (_b = (_a = this.HideWindowUI()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n    };\n    /**\n     * Returns `true` if PDF readers should resize the document's window to fit\n     * the size of the first displayed page.\n     * @returns Whether or not the window should be resized to fit.\n     */\n    ViewerPreferences.prototype.getFitWindow = function () {\n        var _a, _b;\n        return (_b = (_a = this.FitWindow()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n    };\n    /**\n     * Returns `true` if PDF readers should position the document's window in the\n     * center of the screen.\n     * @returns Whether or not to center the document window.\n     */\n    ViewerPreferences.prototype.getCenterWindow = function () {\n        var _a, _b;\n        return (_b = (_a = this.CenterWindow()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n    };\n    /**\n     * Returns `true` if the window's title bar should display the document\n     * `Title`, taken from the document metadata (see [[PDFDocument.getTitle]]).\n     * Returns `false` if the title bar should instead display the filename of the\n     * PDF file.\n     * @returns Whether to display the document title.\n     */\n    ViewerPreferences.prototype.getDisplayDocTitle = function () {\n        var _a, _b;\n        return (_b = (_a = this.DisplayDocTitle()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n    };\n    /**\n     * Returns the page mode, which tells the PDF reader how to display the\n     * document after exiting full-screen mode.\n     * @returns The page mode after exiting full-screen mode.\n     */\n    ViewerPreferences.prototype.getNonFullScreenPageMode = function () {\n        var _a, _b;\n        var mode = (_a = this.NonFullScreenPageMode()) === null || _a === void 0 ? void 0 : _a.decodeText();\n        return (_b = asEnum(mode, NonFullScreenPageMode)) !== null && _b !== void 0 ? _b : NonFullScreenPageMode.UseNone;\n    };\n    /**\n     * Returns the predominant reading order for text.\n     * @returns The text reading order.\n     */\n    ViewerPreferences.prototype.getReadingDirection = function () {\n        var _a, _b;\n        var direction = (_a = this.Direction()) === null || _a === void 0 ? void 0 : _a.decodeText();\n        return (_b = asEnum(direction, ReadingDirection)) !== null && _b !== void 0 ? _b : ReadingDirection.L2R;\n    };\n    /**\n     * Returns the page scaling option that the PDF reader should select when the\n     * print dialog is displayed.\n     * @returns The page scaling option.\n     */\n    ViewerPreferences.prototype.getPrintScaling = function () {\n        var _a, _b;\n        var scaling = (_a = this.PrintScaling()) === null || _a === void 0 ? void 0 : _a.decodeText();\n        return (_b = asEnum(scaling, PrintScaling)) !== null && _b !== void 0 ? _b : PrintScaling.AppDefault;\n    };\n    /**\n     * Returns the paper handling option that should be used when printing the\n     * file from the print dialog.\n     * @returns The paper handling option.\n     */\n    ViewerPreferences.prototype.getDuplex = function () {\n        var _a;\n        var duplex = (_a = this.Duplex()) === null || _a === void 0 ? void 0 : _a.decodeText();\n        return asEnum(duplex, Duplex);\n    };\n    /**\n     * Returns `true` if the PDF page size should be used to select the input\n     * paper tray.\n     * @returns Whether or not the PDF page size should be used to select the\n     *          input paper tray.\n     */\n    ViewerPreferences.prototype.getPickTrayByPDFSize = function () {\n        var _a;\n        return (_a = this.PickTrayByPDFSize()) === null || _a === void 0 ? void 0 : _a.asBoolean();\n    };\n    /**\n     * Returns an array of page number ranges, which are the values used to\n     * initialize the print dialog box when the file is printed. Each range\n     * specifies the first (`start`) and last (`end`) pages in a sub-range of\n     * pages to be printed. The first page of the PDF file is denoted by 0.\n     * For example:\n     * ```js\n     * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\n     * const includesPage3 = viewerPrefs\n     *   .getPrintRanges()\n     *   .some(pr => pr.start =< 2 && pr.end >= 2)\n     * if (includesPage3) console.log('printRange includes page 3')\n     * ```\n     * @returns An array of objects, each with the properties `start` and `end`,\n     *          denoting page indices. If not, specified an empty array is\n     *          returned.\n     */\n    ViewerPreferences.prototype.getPrintPageRange = function () {\n        var rng = this.PrintPageRange();\n        if (!rng)\n            return [];\n        var pageRanges = [];\n        for (var i = 0; i < rng.size(); i += 2) {\n            // Despite the spec clearly stating that \"The first page of the PDF file\n            // shall be donoted by 1\", several test PDFs (spec 1.7) created in\n            // Acrobat XI 11.0 and also read with Reader DC 2020.013 indicate this is\n            // actually a 0 based index.\n            var start = rng.lookup(i, PDFNumber).asNumber();\n            var end = rng.lookup(i + 1, PDFNumber).asNumber();\n            pageRanges.push({ start: start, end: end });\n        }\n        return pageRanges;\n    };\n    /**\n     * Returns the number of copies to be printed when the print dialog is opened\n     * for this document.\n     * @returns The default number of copies to be printed.\n     */\n    ViewerPreferences.prototype.getNumCopies = function () {\n        var _a, _b;\n        return (_b = (_a = this.NumCopies()) === null || _a === void 0 ? void 0 : _a.asNumber()) !== null && _b !== void 0 ? _b : 1;\n    };\n    /**\n     * Choose whether the PDF reader's toolbars should be hidden while the\n     * document is active.\n     * @param hideToolbar `true` if the toolbar should be hidden.\n     */\n    ViewerPreferences.prototype.setHideToolbar = function (hideToolbar) {\n        var HideToolbar = this.dict.context.obj(hideToolbar);\n        this.dict.set(PDFName.of('HideToolbar'), HideToolbar);\n    };\n    /**\n     * Choose whether the PDF reader's menu bar should be hidden while the\n     * document is active.\n     * @param hideMenubar `true` if the menu bar should be hidden.\n     */\n    ViewerPreferences.prototype.setHideMenubar = function (hideMenubar) {\n        var HideMenubar = this.dict.context.obj(hideMenubar);\n        this.dict.set(PDFName.of('HideMenubar'), HideMenubar);\n    };\n    /**\n     * Choose whether the PDF reader should hide user interface elements in the\n     * document's window (such as scroll bars and navigation controls), leaving\n     * only the document's contents displayed.\n     * @param hideWindowUI `true` if the user interface elements should be hidden.\n     */\n    ViewerPreferences.prototype.setHideWindowUI = function (hideWindowUI) {\n        var HideWindowUI = this.dict.context.obj(hideWindowUI);\n        this.dict.set(PDFName.of('HideWindowUI'), HideWindowUI);\n    };\n    /**\n     * Choose whether the PDF reader should resize the document's window to fit\n     * the size of the first displayed page.\n     * @param fitWindow `true` if the window should be resized.\n     */\n    ViewerPreferences.prototype.setFitWindow = function (fitWindow) {\n        var FitWindow = this.dict.context.obj(fitWindow);\n        this.dict.set(PDFName.of('FitWindow'), FitWindow);\n    };\n    /**\n     * Choose whether the PDF reader should position the document's window in the\n     * center of the screen.\n     * @param centerWindow `true` if the window should be centered.\n     */\n    ViewerPreferences.prototype.setCenterWindow = function (centerWindow) {\n        var CenterWindow = this.dict.context.obj(centerWindow);\n        this.dict.set(PDFName.of('CenterWindow'), CenterWindow);\n    };\n    /**\n     * Choose whether the window's title bar should display the document `Title`\n     * taken from the document metadata (see [[PDFDocument.setTitle]]). If\n     * `false`, the title bar should instead display the PDF filename.\n     * @param displayTitle `true` if the document title should be displayed.\n     */\n    ViewerPreferences.prototype.setDisplayDocTitle = function (displayTitle) {\n        var DisplayDocTitle = this.dict.context.obj(displayTitle);\n        this.dict.set(PDFName.of('DisplayDocTitle'), DisplayDocTitle);\n    };\n    /**\n     * Choose how the PDF reader should display the document upon exiting\n     * full-screen mode. This entry is meaningful only if the value of the\n     * `PageMode` entry in the document's [[PDFCatalog]] is `FullScreen`.\n     *\n     * For example:\n     * ```js\n     * import { PDFDocument, NonFullScreenPageMode, PDFName } from 'pdf-lib'\n     *\n     * const pdfDoc = await PDFDocument.create()\n     *\n     * // Set the PageMode\n     * pdfDoc.catalog.set(PDFName.of('PageMode'),PDFName.of('FullScreen'))\n     *\n     * // Set what happens when full-screen is closed\n     * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\n     * viewerPrefs.setNonFullScreenPageMode(NonFullScreenPageMode.UseOutlines)\n     * ```\n     *\n     * @param nonFullScreenPageMode How the document should be displayed upon\n     *                              exiting full screen mode.\n     */\n    ViewerPreferences.prototype.setNonFullScreenPageMode = function (nonFullScreenPageMode) {\n        assertIsOneOf(nonFullScreenPageMode, 'nonFullScreenPageMode', NonFullScreenPageMode);\n        var mode = PDFName.of(nonFullScreenPageMode);\n        this.dict.set(PDFName.of('NonFullScreenPageMode'), mode);\n    };\n    /**\n     * Choose the predominant reading order for text.\n     *\n     * This entry has no direct effect on the document's contents or page\n     * numbering, but may be used to determine the relative positioning of pages\n     * when displayed side by side or printed n-up.\n     *\n     * For example:\n     * ```js\n     * import { PDFDocument, ReadingDirection } from 'pdf-lib'\n     *\n     * const pdfDoc = await PDFDocument.create()\n     * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\n     * viewerPrefs.setReadingDirection(ReadingDirection.R2L)\n     * ```\n     *\n     * @param readingDirection The reading order for text.\n     */\n    ViewerPreferences.prototype.setReadingDirection = function (readingDirection) {\n        assertIsOneOf(readingDirection, 'readingDirection', ReadingDirection);\n        var direction = PDFName.of(readingDirection);\n        this.dict.set(PDFName.of('Direction'), direction);\n    };\n    /**\n     * Choose the page scaling option that should be selected when a print dialog\n     * is displayed for this document.\n     *\n     * For example:\n     * ```js\n     * import { PDFDocument, PrintScaling } from 'pdf-lib'\n     *\n     * const pdfDoc = await PDFDocument.create()\n     * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\n     * viewerPrefs.setPrintScaling(PrintScaling.None)\n     * ```\n     *\n     * @param printScaling The print scaling option.\n     */\n    ViewerPreferences.prototype.setPrintScaling = function (printScaling) {\n        assertIsOneOf(printScaling, 'printScaling', PrintScaling);\n        var scaling = PDFName.of(printScaling);\n        this.dict.set(PDFName.of('PrintScaling'), scaling);\n    };\n    /**\n     * Choose the paper handling option that should be selected by default in the\n     * print dialog.\n     *\n     * For example:\n     * ```js\n     * import { PDFDocument, Duplex } from 'pdf-lib'\n     *\n     * const pdfDoc = await PDFDocument.create()\n     * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\n     * viewerPrefs.setDuplex(Duplex.DuplexFlipShortEdge)\n     * ```\n     *\n     * @param duplex The double or single sided printing option.\n     */\n    ViewerPreferences.prototype.setDuplex = function (duplex) {\n        assertIsOneOf(duplex, 'duplex', Duplex);\n        var dup = PDFName.of(duplex);\n        this.dict.set(PDFName.of('Duplex'), dup);\n    };\n    /**\n     * Choose whether the PDF document's page size should be used to select the\n     * input paper tray when printing. This setting influences only the preset\n     * values used to populate the print dialog presented by a PDF reader.\n     *\n     * If PickTrayByPDFSize is true, the check box in the print dialog associated\n     * with input paper tray should be checked. This setting has no effect on\n     * operating systems that do not provide the ability to pick the input tray\n     * by size.\n     *\n     * @param pickTrayByPDFSize `true` if the document's page size should be used\n     *                          to select the input paper tray.\n     */\n    ViewerPreferences.prototype.setPickTrayByPDFSize = function (pickTrayByPDFSize) {\n        var PickTrayByPDFSize = this.dict.context.obj(pickTrayByPDFSize);\n        this.dict.set(PDFName.of('PickTrayByPDFSize'), PickTrayByPDFSize);\n    };\n    /**\n     * Choose the page numbers used to initialize the print dialog box when the\n     * file is printed. The first page of the PDF file is denoted by 0.\n     *\n     * For example:\n     * ```js\n     * import { PDFDocument } from 'pdf-lib'\n     *\n     * const pdfDoc = await PDFDocument.create()\n     * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\n     *\n     * // We can set the default print range to only the first page\n     * viewerPrefs.setPrintPageRange({ start: 0, end: 0 })\n     *\n     * // Or we can supply noncontiguous ranges (e.g. pages 1, 3, and 5-7)\n     * viewerPrefs.setPrintPageRange([\n     *   { start: 0, end: 0 },\n     *   { start: 2, end: 2 },\n     *   { start: 4, end: 6 },\n     * ])\n     * ```\n     *\n     * @param printPageRange An object or array of objects, each with the\n     *                       properties `start` and `end`, denoting a range of\n     *                       page indices.\n     */\n    ViewerPreferences.prototype.setPrintPageRange = function (printPageRange) {\n        if (!Array.isArray(printPageRange))\n            printPageRange = [printPageRange];\n        var flatRange = [];\n        for (var idx = 0, len = printPageRange.length; idx < len; idx++) {\n            flatRange.push(printPageRange[idx].start);\n            flatRange.push(printPageRange[idx].end);\n        }\n        assertEachIs(flatRange, 'printPageRange', ['number']);\n        var pageRanges = this.dict.context.obj(flatRange);\n        this.dict.set(PDFName.of('PrintPageRange'), pageRanges);\n    };\n    /**\n     * Choose the default number of copies to be printed when the print dialog is\n     * opened for this file.\n     * @param numCopies The default number of copies.\n     */\n    ViewerPreferences.prototype.setNumCopies = function (numCopies) {\n        assertRange(numCopies, 'numCopies', 1, Number.MAX_VALUE);\n        assertInteger(numCopies, 'numCopies');\n        var NumCopies = this.dict.context.obj(numCopies);\n        this.dict.set(PDFName.of('NumCopies'), NumCopies);\n    };\n    /** @ignore */\n    ViewerPreferences.fromDict = function (dict) {\n        return new ViewerPreferences(dict);\n    };\n    /** @ignore */\n    ViewerPreferences.create = function (context) {\n        var dict = context.obj({});\n        return new ViewerPreferences(dict);\n    };\n    return ViewerPreferences;\n}());\nexport default ViewerPreferences;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}