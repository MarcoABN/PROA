{"ast":null,"code":"import _asyncToGenerator from \"E:/PROA/frontPROA/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { PDFDocument } from 'pdf-lib';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nexport let Anexo2EService = /*#__PURE__*/(() => {\n  class Anexo2EService {\n    constructor(datePipe) {\n      this.datePipe = datePipe;\n    }\n    //Função para gerar o Anexo 2E. Se for uma solicitação única não é necessário o último parâmtro na chamada da função e o PDF será exibido diretamente.\n    //Se for uma chamada do serviço é necessário passar algo como último parâmetro. Isso irá sinalizar que é um serviço e retornar o arquivo de forma dinâmica.\n    anexo2E(embarcacao, solicitacao, campotexto1, campotexto2, campotexto3, servico) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        try {\n          const pdfBytes = yield fetch('assets/pdfanexos/Anexo2E-N211.pdf').then(res => res.arrayBuffer());\n          const pdfDoc = yield PDFDocument.load(pdfBytes);\n          const form = pdfDoc.getForm();\n          switch (solicitacao) {\n            case \"inscricao\":\n              form.getCheckBox('check_inscricao').check();\n              break;\n            case \"cancelamento\":\n              form.getCheckBox('check_cancelamento').check();\n              break;\n            case \"licencaconstrucao\":\n              form.getCheckBox('check_licencaconstrucao').check();\n              break;\n            case \"licencaalteracao\":\n              form.getCheckBox('check_licencaalteracao').check();\n              break;\n            case \"licencareclassificacao\":\n              form.getCheckBox('check_licencareclassificacao').check();\n              break;\n            case \"transfpropriedade\":\n              form.getCheckBox('check_transfpropriedade').check();\n              break;\n            case \"transfjurisdicao\":\n              form.getCheckBox('check_transfjurisdicao').check();\n              break;\n            case \"transfpropjurisdicao\":\n              form.getCheckBox('check_transfpropjurisdicao').check();\n              break;\n            case \"mudancanome\":\n              form.getCheckBox('check_mudancanome').check();\n              form.getTextField('nomeembarcacao1').setText(campotexto1.toUpperCase());\n              form.getTextField('nomeembarcacao2').setText(campotexto2.toUpperCase());\n              form.getTextField('nomeembarcacao3').setText(campotexto3.toUpperCase());\n              break;\n            case \"renovacaotie_sim\":\n              form.getCheckBox('check_renovacaotie').check();\n              form.getCheckBox('check_renovacaotie_sim').check();\n              break;\n            case \"renovacaotie_nao\":\n              form.getCheckBox('check_renovacaotie').check();\n              form.getCheckBox('check_renovacaotie_nao').check();\n              break;\n            case \"segviatie_perda\":\n              form.getCheckBox('check_segviatie').check();\n              form.getCheckBox('check_segviatie_perda').check();\n              break;\n            case \"segviatie_roubo\":\n              form.getCheckBox('check_segviatie').check();\n              form.getCheckBox('check_segviatie_roubo').check();\n              break;\n            case \"segviatie_extravio\":\n              form.getCheckBox('check_segviatie').check();\n              form.getCheckBox('check_segviatie_extravio').check();\n              break;\n            case \"segviatie_mauestado\":\n              form.getCheckBox('check_segviatie').check();\n              form.getCheckBox('check_segviatie_mauestado').check();\n              break;\n            case \"alteracaodadosembarcacao\":\n              form.getCheckBox('check_alteracaodadosembarcacao').check();\n              break;\n            case \"alteracaodadosproprietario\":\n              form.getCheckBox('check_alteracaodadosproprietario').check();\n              break;\n            case \"trocamotor\":\n              form.getCheckBox('check_trocamotor').check();\n              break;\n            case \"certidaoembarcacao\":\n              form.getCheckBox('check_certidaoembarcacao').check();\n              break;\n            case \"registroaverbacao\":\n              form.getCheckBox('check_registroaverbacao').check();\n              break;\n            case \"cancaverbacao\":\n              form.getCheckBox('check_cancaverbacao').check();\n              break;\n            case \"vistoriaarqueacao\":\n              form.getCheckBox('check_vistoriaarqueacao').check();\n              break;\n            case \"vistoriarearqueacao\":\n              form.getCheckBox('check_vistoriarearqueacao').check();\n              break;\n            case \"vistoriaclassificacao\":\n              form.getCheckBox('check_vistoriaclassificacao').check();\n              break;\n            case \"outrosservicos\":\n              form.getCheckBox('check_outrosservicos').check();\n              //form.getTextField('outrosservicos1').setText(campotexto1.toUpperCase());\n              const [part1, part2] = _this.divideString(campotexto1, 70);\n              form.getTextField('outrosservicos1').setText(part1.toUpperCase());\n              form.getTextField('outrosservicos2').setText(part2.toUpperCase());\n              break;\n          }\n          form.getTextField('nome').setText(embarcacao.cliente.nome);\n          form.getTextField('logradouro').setText(embarcacao.cliente.logradouro);\n          form.getTextField('numero').setText(embarcacao.cliente.numero);\n          form.getTextField('aptosala').setText(embarcacao.cliente.complemento);\n          form.getTextField('cidade').setText(embarcacao.cliente.cidade);\n          form.getTextField('uf').setText(embarcacao.cliente.uf);\n          form.getTextField('rg').setText(embarcacao.cliente.rg);\n          form.getTextField('orgexpedidor').setText(embarcacao.cliente.orgEmissor);\n          form.getTextField('cep').setText(embarcacao.cliente.cep);\n          form.getTextField('telefone').setText(embarcacao.cliente.telefone);\n          form.getTextField('cpfcnpj').setText(embarcacao.cliente.cpfcnpj);\n          form.getTextField('nomeembarcacao').setText(embarcacao.nomeEmbarcacao);\n          form.getTextField('numinscricao').setText(embarcacao.numInscricao ?? '');\n          form.getTextField('comprimento').setText(embarcacao.compTotal.toString() + \"m\");\n          form.getTextField('numcasco').setText(embarcacao.numCasco);\n          form.getTextField('classificacao').setText(embarcacao.tipoEmbarcacao);\n          form.flatten();\n          const modifiedPdfBytes = yield pdfDoc.save();\n          if (!servico) {\n            _this.abrirPDFemJanela(modifiedPdfBytes);\n            console.log('PDF Criado!');\n          } else {\n            return modifiedPdfBytes;\n          }\n        } catch (err) {\n          console.error(err);\n        }\n      })();\n    }\n    abrirPDFemJanela(data) {\n      const blob = new Blob([data], {\n        type: 'application/pdf'\n      });\n      const url = window.URL.createObjectURL(blob);\n      window.open(url, '_blank');\n    }\n    divideString(input, limit) {\n      let part1 = '';\n      let part2 = '';\n      console.log(\"tamanho: \", input.length);\n      if (input.length <= limit) {\n        part1 = input;\n      } else {\n        let breakPoint = input.lastIndexOf(' ', limit);\n        if (breakPoint === -1) {\n          breakPoint = limit; // Nenhum espaço encontrado, quebra no limite\n        }\n\n        part1 = input.substring(0, breakPoint);\n        part2 = input.substring(breakPoint).trim();\n        if (part2.length > limit) {\n          part2 = part2.substring(0, limit);\n        }\n      }\n      return [part1, part2];\n    }\n    static #_ = this.ɵfac = function Anexo2EService_Factory(t) {\n      return new (t || Anexo2EService)(i0.ɵɵinject(i1.DatePipe));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: Anexo2EService,\n      factory: Anexo2EService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return Anexo2EService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}