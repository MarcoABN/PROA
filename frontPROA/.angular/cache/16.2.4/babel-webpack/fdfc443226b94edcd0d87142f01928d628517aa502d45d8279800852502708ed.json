{"ast":null,"code":"import { MethodNotImplementedError } from \"../errors\";\nimport Stream from \"./Stream\";\n/*\n * Copyright 2012 Mozilla Foundation\n *\n * The DecodeStream class contained in this file is a TypeScript port of the\n * JavaScript DecodeStream class in Mozilla's pdf.js project, made available\n * under the Apache 2.0 open source license.\n */\n// Lots of DecodeStreams are created whose buffers are never used.  For these\n// we share a single empty buffer. This is (a) space-efficient and (b) avoids\n// having special cases that would be required if we used |null| for an empty\n// buffer.\nvar emptyBuffer = new Uint8Array(0);\n/**\n * Super class for the decoding streams\n */\nvar DecodeStream = /** @class */function () {\n  function DecodeStream(maybeMinBufferLength) {\n    this.pos = 0;\n    this.bufferLength = 0;\n    this.eof = false;\n    this.buffer = emptyBuffer;\n    this.minBufferLength = 512;\n    if (maybeMinBufferLength) {\n      // Compute the first power of two that is as big as maybeMinBufferLength.\n      while (this.minBufferLength < maybeMinBufferLength) {\n        this.minBufferLength *= 2;\n      }\n    }\n  }\n  Object.defineProperty(DecodeStream.prototype, \"isEmpty\", {\n    get: function () {\n      while (!this.eof && this.bufferLength === 0) {\n        this.readBlock();\n      }\n      return this.bufferLength === 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  DecodeStream.prototype.getByte = function () {\n    var pos = this.pos;\n    while (this.bufferLength <= pos) {\n      if (this.eof) {\n        return -1;\n      }\n      this.readBlock();\n    }\n    return this.buffer[this.pos++];\n  };\n  DecodeStream.prototype.getUint16 = function () {\n    var b0 = this.getByte();\n    var b1 = this.getByte();\n    if (b0 === -1 || b1 === -1) {\n      return -1;\n    }\n    return (b0 << 8) + b1;\n  };\n  DecodeStream.prototype.getInt32 = function () {\n    var b0 = this.getByte();\n    var b1 = this.getByte();\n    var b2 = this.getByte();\n    var b3 = this.getByte();\n    return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\n  };\n  DecodeStream.prototype.getBytes = function (length, forceClamped) {\n    if (forceClamped === void 0) {\n      forceClamped = false;\n    }\n    var end;\n    var pos = this.pos;\n    if (length) {\n      this.ensureBuffer(pos + length);\n      end = pos + length;\n      while (!this.eof && this.bufferLength < end) {\n        this.readBlock();\n      }\n      var bufEnd = this.bufferLength;\n      if (end > bufEnd) {\n        end = bufEnd;\n      }\n    } else {\n      while (!this.eof) {\n        this.readBlock();\n      }\n      end = this.bufferLength;\n    }\n    this.pos = end;\n    var subarray = this.buffer.subarray(pos, end);\n    // `this.buffer` is either a `Uint8Array` or `Uint8ClampedArray` here.\n    return forceClamped && !(subarray instanceof Uint8ClampedArray) ? new Uint8ClampedArray(subarray) : subarray;\n  };\n  DecodeStream.prototype.peekByte = function () {\n    var peekedByte = this.getByte();\n    this.pos--;\n    return peekedByte;\n  };\n  DecodeStream.prototype.peekBytes = function (length, forceClamped) {\n    if (forceClamped === void 0) {\n      forceClamped = false;\n    }\n    var bytes = this.getBytes(length, forceClamped);\n    this.pos -= bytes.length;\n    return bytes;\n  };\n  DecodeStream.prototype.skip = function (n) {\n    if (!n) {\n      n = 1;\n    }\n    this.pos += n;\n  };\n  DecodeStream.prototype.reset = function () {\n    this.pos = 0;\n  };\n  DecodeStream.prototype.makeSubStream = function (start, length /* dict */) {\n    var end = start + length;\n    while (this.bufferLength <= end && !this.eof) {\n      this.readBlock();\n    }\n    return new Stream(this.buffer, start, length /* dict */);\n  };\n\n  DecodeStream.prototype.decode = function () {\n    while (!this.eof) this.readBlock();\n    return this.buffer.subarray(0, this.bufferLength);\n  };\n  DecodeStream.prototype.readBlock = function () {\n    throw new MethodNotImplementedError(this.constructor.name, 'readBlock');\n  };\n  DecodeStream.prototype.ensureBuffer = function (requested) {\n    var buffer = this.buffer;\n    if (requested <= buffer.byteLength) {\n      return buffer;\n    }\n    var size = this.minBufferLength;\n    while (size < requested) {\n      size *= 2;\n    }\n    var buffer2 = new Uint8Array(size);\n    buffer2.set(buffer);\n    return this.buffer = buffer2;\n  };\n  return DecodeStream;\n}();\nexport default DecodeStream;\n//# sourceMappingURL=DecodeStream.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}