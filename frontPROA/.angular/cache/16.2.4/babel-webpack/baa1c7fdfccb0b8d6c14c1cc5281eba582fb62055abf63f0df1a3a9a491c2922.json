{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport { setFillingColor, setStrokingColor } from \"./colors\";\nimport { beginText, closePath, drawObject, endText, fill, fillAndStroke, lineTo, moveTo, nextLine, popGraphicsState, pushGraphicsState, rotateAndSkewTextRadiansAndTranslate, rotateRadians, scale, setFontAndSize, setLineHeight, setLineWidth, showText, skewRadians, stroke, translate, setLineCap, rotateDegrees, setGraphicsState, setDashPattern, beginMarkedContent, endMarkedContent, clip, endPath, appendBezierCurve } from \"./operators\";\nimport { degrees, toRadians } from \"./rotations\";\nimport { svgPathToOperators } from \"./svgPath\";\nimport { asNumber } from \"./objects\";\nexport var drawText = function (line, options) {\n  return [pushGraphicsState(), options.graphicsState && setGraphicsState(options.graphicsState), beginText(), setFillingColor(options.color), setFontAndSize(options.font, options.size), rotateAndSkewTextRadiansAndTranslate(toRadians(options.rotate), toRadians(options.xSkew), toRadians(options.ySkew), options.x, options.y), showText(line), endText(), popGraphicsState()].filter(Boolean);\n};\nexport var drawLinesOfText = function (lines, options) {\n  var operators = [pushGraphicsState(), options.graphicsState && setGraphicsState(options.graphicsState), beginText(), setFillingColor(options.color), setFontAndSize(options.font, options.size), setLineHeight(options.lineHeight), rotateAndSkewTextRadiansAndTranslate(toRadians(options.rotate), toRadians(options.xSkew), toRadians(options.ySkew), options.x, options.y)].filter(Boolean);\n  for (var idx = 0, len = lines.length; idx < len; idx++) {\n    operators.push(showText(lines[idx]), nextLine());\n  }\n  operators.push(endText(), popGraphicsState());\n  return operators;\n};\nexport var drawImage = function (name, options) {\n  return [pushGraphicsState(), options.graphicsState && setGraphicsState(options.graphicsState), translate(options.x, options.y), rotateRadians(toRadians(options.rotate)), scale(options.width, options.height), skewRadians(toRadians(options.xSkew), toRadians(options.ySkew)), drawObject(name), popGraphicsState()].filter(Boolean);\n};\nexport var drawPage = function (name, options) {\n  return [pushGraphicsState(), options.graphicsState && setGraphicsState(options.graphicsState), translate(options.x, options.y), rotateRadians(toRadians(options.rotate)), scale(options.xScale, options.yScale), skewRadians(toRadians(options.xSkew), toRadians(options.ySkew)), drawObject(name), popGraphicsState()].filter(Boolean);\n};\nexport var drawLine = function (options) {\n  var _a, _b;\n  return [pushGraphicsState(), options.graphicsState && setGraphicsState(options.graphicsState), options.color && setStrokingColor(options.color), setLineWidth(options.thickness), setDashPattern((_a = options.dashArray) !== null && _a !== void 0 ? _a : [], (_b = options.dashPhase) !== null && _b !== void 0 ? _b : 0), moveTo(options.start.x, options.start.y), options.lineCap && setLineCap(options.lineCap), moveTo(options.start.x, options.start.y), lineTo(options.end.x, options.end.y), stroke(), popGraphicsState()].filter(Boolean);\n};\nexport var drawRectangle = function (options) {\n  var _a, _b;\n  return [pushGraphicsState(), options.graphicsState && setGraphicsState(options.graphicsState), options.color && setFillingColor(options.color), options.borderColor && setStrokingColor(options.borderColor), setLineWidth(options.borderWidth), options.borderLineCap && setLineCap(options.borderLineCap), setDashPattern((_a = options.borderDashArray) !== null && _a !== void 0 ? _a : [], (_b = options.borderDashPhase) !== null && _b !== void 0 ? _b : 0), translate(options.x, options.y), rotateRadians(toRadians(options.rotate)), skewRadians(toRadians(options.xSkew), toRadians(options.ySkew)), moveTo(0, 0), lineTo(0, options.height), lineTo(options.width, options.height), lineTo(options.width, 0), closePath(),\n  // prettier-ignore\n  options.color && options.borderWidth ? fillAndStroke() : options.color ? fill() : options.borderColor ? stroke() : closePath(), popGraphicsState()].filter(Boolean);\n};\nvar KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);\n/** @deprecated */\nexport var drawEllipsePath = function (config) {\n  var x = asNumber(config.x);\n  var y = asNumber(config.y);\n  var xScale = asNumber(config.xScale);\n  var yScale = asNumber(config.yScale);\n  x -= xScale;\n  y -= yScale;\n  var ox = xScale * KAPPA;\n  var oy = yScale * KAPPA;\n  var xe = x + xScale * 2;\n  var ye = y + yScale * 2;\n  var xm = x + xScale;\n  var ym = y + yScale;\n  return [pushGraphicsState(), moveTo(x, ym), appendBezierCurve(x, ym - oy, xm - ox, y, xm, y), appendBezierCurve(xm + ox, y, xe, ym - oy, xe, ym), appendBezierCurve(xe, ym + oy, xm + ox, ye, xm, ye), appendBezierCurve(xm - ox, ye, x, ym + oy, x, ym), popGraphicsState()];\n};\nvar drawEllipseCurves = function (config) {\n  var centerX = asNumber(config.x);\n  var centerY = asNumber(config.y);\n  var xScale = asNumber(config.xScale);\n  var yScale = asNumber(config.yScale);\n  var x = -xScale;\n  var y = -yScale;\n  var ox = xScale * KAPPA;\n  var oy = yScale * KAPPA;\n  var xe = x + xScale * 2;\n  var ye = y + yScale * 2;\n  var xm = x + xScale;\n  var ym = y + yScale;\n  return [translate(centerX, centerY), rotateRadians(toRadians(config.rotate)), moveTo(x, ym), appendBezierCurve(x, ym - oy, xm - ox, y, xm, y), appendBezierCurve(xm + ox, y, xe, ym - oy, xe, ym), appendBezierCurve(xe, ym + oy, xm + ox, ye, xm, ye), appendBezierCurve(xm - ox, ye, x, ym + oy, x, ym)];\n};\nexport var drawEllipse = function (options) {\n  var _a, _b, _c;\n  return __spreadArrays([pushGraphicsState(), options.graphicsState && setGraphicsState(options.graphicsState), options.color && setFillingColor(options.color), options.borderColor && setStrokingColor(options.borderColor), setLineWidth(options.borderWidth), options.borderLineCap && setLineCap(options.borderLineCap), setDashPattern((_a = options.borderDashArray) !== null && _a !== void 0 ? _a : [], (_b = options.borderDashPhase) !== null && _b !== void 0 ? _b : 0)], options.rotate === undefined ? drawEllipsePath({\n    x: options.x,\n    y: options.y,\n    xScale: options.xScale,\n    yScale: options.yScale\n  }) : drawEllipseCurves({\n    x: options.x,\n    y: options.y,\n    xScale: options.xScale,\n    yScale: options.yScale,\n    rotate: (_c = options.rotate) !== null && _c !== void 0 ? _c : degrees(0)\n  }), [\n  // prettier-ignore\n  options.color && options.borderWidth ? fillAndStroke() : options.color ? fill() : options.borderColor ? stroke() : closePath(), popGraphicsState()]).filter(Boolean);\n};\nexport var drawSvgPath = function (path, options) {\n  var _a, _b, _c;\n  return __spreadArrays([pushGraphicsState(), options.graphicsState && setGraphicsState(options.graphicsState), translate(options.x, options.y), rotateRadians(toRadians((_a = options.rotate) !== null && _a !== void 0 ? _a : degrees(0))),\n  // SVG path Y axis is opposite pdf-lib's\n  options.scale ? scale(options.scale, -options.scale) : scale(1, -1), options.color && setFillingColor(options.color), options.borderColor && setStrokingColor(options.borderColor), options.borderWidth && setLineWidth(options.borderWidth), options.borderLineCap && setLineCap(options.borderLineCap), setDashPattern((_b = options.borderDashArray) !== null && _b !== void 0 ? _b : [], (_c = options.borderDashPhase) !== null && _c !== void 0 ? _c : 0)], svgPathToOperators(path), [\n  // prettier-ignore\n  options.color && options.borderWidth ? fillAndStroke() : options.color ? fill() : options.borderColor ? stroke() : closePath(), popGraphicsState()]).filter(Boolean);\n};\nexport var drawCheckMark = function (options) {\n  var size = asNumber(options.size);\n  /*********************** Define Check Mark Points ***************************/\n  // A check mark is defined by three points in some coordinate space. Here, we\n  // define these points in a unit coordinate system, where the range of the x\n  // and y axis are both [-1, 1].\n  //\n  // Note that we do not hard code `p1y` in case we wish to change the\n  // size/shape of the check mark in the future. We want the check mark to\n  // always form a right angle. This means that the dot product between (p1-p2)\n  // and (p3-p2) should be zero:\n  //\n  //   (p1x-p2x) * (p3x-p2x) + (p1y-p2y) * (p3y-p2y) = 0\n  //\n  // We can now rejigger this equation to solve for `p1y`:\n  //\n  //   (p1y-p2y) * (p3y-p2y) = -((p1x-p2x) * (p3x-p2x))\n  //   (p1y-p2y) = -((p1x-p2x) * (p3x-p2x)) / (p3y-p2y)\n  //   p1y = -((p1x-p2x) * (p3x-p2x)) / (p3y-p2y) + p2y\n  //\n  // Thanks to my friend Joel Walker (https://github.com/JWalker1995) for\n  // devising the above equation and unit coordinate system approach!\n  // (x, y) coords of the check mark's bottommost point\n  var p2x = -1 + 0.75;\n  var p2y = -1 + 0.51;\n  // (x, y) coords of the check mark's topmost point\n  var p3y = 1 - 0.525;\n  var p3x = 1 - 0.31;\n  // (x, y) coords of the check mark's center (vertically) point\n  var p1x = -1 + 0.325;\n  var p1y = -((p1x - p2x) * (p3x - p2x)) / (p3y - p2y) + p2y;\n  /****************************************************************************/\n  return [pushGraphicsState(), options.color && setStrokingColor(options.color), setLineWidth(options.thickness), translate(options.x, options.y), moveTo(p1x * size, p1y * size), lineTo(p2x * size, p2y * size), lineTo(p3x * size, p3y * size), stroke(), popGraphicsState()].filter(Boolean);\n};\n// prettier-ignore\nexport var rotateInPlace = function (options) {\n  return options.rotation === 0 ? [translate(0, 0), rotateDegrees(0)] : options.rotation === 90 ? [translate(options.width, 0), rotateDegrees(90)] : options.rotation === 180 ? [translate(options.width, options.height), rotateDegrees(180)] : options.rotation === 270 ? [translate(0, options.height), rotateDegrees(270)] : [];\n}; // Invalid rotation - noop\nexport var drawCheckBox = function (options) {\n  var outline = drawRectangle({\n    x: options.x,\n    y: options.y,\n    width: options.width,\n    height: options.height,\n    borderWidth: options.borderWidth,\n    color: options.color,\n    borderColor: options.borderColor,\n    rotate: degrees(0),\n    xSkew: degrees(0),\n    ySkew: degrees(0)\n  });\n  if (!options.filled) return outline;\n  var width = asNumber(options.width);\n  var height = asNumber(options.height);\n  var checkMarkSize = Math.min(width, height) / 2;\n  var checkMark = drawCheckMark({\n    x: width / 2,\n    y: height / 2,\n    size: checkMarkSize,\n    thickness: options.thickness,\n    color: options.markColor\n  });\n  return __spreadArrays([pushGraphicsState()], outline, checkMark, [popGraphicsState()]);\n};\nexport var drawRadioButton = function (options) {\n  var width = asNumber(options.width);\n  var height = asNumber(options.height);\n  var outlineScale = Math.min(width, height) / 2;\n  var outline = drawEllipse({\n    x: options.x,\n    y: options.y,\n    xScale: outlineScale,\n    yScale: outlineScale,\n    color: options.color,\n    borderColor: options.borderColor,\n    borderWidth: options.borderWidth\n  });\n  if (!options.filled) return outline;\n  var dot = drawEllipse({\n    x: options.x,\n    y: options.y,\n    xScale: outlineScale * 0.45,\n    yScale: outlineScale * 0.45,\n    color: options.dotColor,\n    borderColor: undefined,\n    borderWidth: 0\n  });\n  return __spreadArrays([pushGraphicsState()], outline, dot, [popGraphicsState()]);\n};\nexport var drawButton = function (options) {\n  var x = asNumber(options.x);\n  var y = asNumber(options.y);\n  var width = asNumber(options.width);\n  var height = asNumber(options.height);\n  var background = drawRectangle({\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    borderWidth: options.borderWidth,\n    color: options.color,\n    borderColor: options.borderColor,\n    rotate: degrees(0),\n    xSkew: degrees(0),\n    ySkew: degrees(0)\n  });\n  var lines = drawTextLines(options.textLines, {\n    color: options.textColor,\n    font: options.font,\n    size: options.fontSize,\n    rotate: degrees(0),\n    xSkew: degrees(0),\n    ySkew: degrees(0)\n  });\n  return __spreadArrays([pushGraphicsState()], background, lines, [popGraphicsState()]);\n};\nexport var drawTextLines = function (lines, options) {\n  var operators = [beginText(), setFillingColor(options.color), setFontAndSize(options.font, options.size)];\n  for (var idx = 0, len = lines.length; idx < len; idx++) {\n    var _a = lines[idx],\n      encoded = _a.encoded,\n      x = _a.x,\n      y = _a.y;\n    operators.push(rotateAndSkewTextRadiansAndTranslate(toRadians(options.rotate), toRadians(options.xSkew), toRadians(options.ySkew), x, y), showText(encoded));\n  }\n  operators.push(endText());\n  return operators;\n};\nexport var drawTextField = function (options) {\n  var x = asNumber(options.x);\n  var y = asNumber(options.y);\n  var width = asNumber(options.width);\n  var height = asNumber(options.height);\n  var borderWidth = asNumber(options.borderWidth);\n  var padding = asNumber(options.padding);\n  var clipX = x + borderWidth / 2 + padding;\n  var clipY = y + borderWidth / 2 + padding;\n  var clipWidth = width - (borderWidth / 2 + padding) * 2;\n  var clipHeight = height - (borderWidth / 2 + padding) * 2;\n  var clippingArea = [moveTo(clipX, clipY), lineTo(clipX, clipY + clipHeight), lineTo(clipX + clipWidth, clipY + clipHeight), lineTo(clipX + clipWidth, clipY), closePath(), clip(), endPath()];\n  var background = drawRectangle({\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    borderWidth: options.borderWidth,\n    color: options.color,\n    borderColor: options.borderColor,\n    rotate: degrees(0),\n    xSkew: degrees(0),\n    ySkew: degrees(0)\n  });\n  var lines = drawTextLines(options.textLines, {\n    color: options.textColor,\n    font: options.font,\n    size: options.fontSize,\n    rotate: degrees(0),\n    xSkew: degrees(0),\n    ySkew: degrees(0)\n  });\n  var markedContent = __spreadArrays([beginMarkedContent('Tx'), pushGraphicsState()], lines, [popGraphicsState(), endMarkedContent()]);\n  return __spreadArrays([pushGraphicsState()], background, clippingArea, markedContent, [popGraphicsState()]);\n};\nexport var drawOptionList = function (options) {\n  var x = asNumber(options.x);\n  var y = asNumber(options.y);\n  var width = asNumber(options.width);\n  var height = asNumber(options.height);\n  var lineHeight = asNumber(options.lineHeight);\n  var borderWidth = asNumber(options.borderWidth);\n  var padding = asNumber(options.padding);\n  var clipX = x + borderWidth / 2 + padding;\n  var clipY = y + borderWidth / 2 + padding;\n  var clipWidth = width - (borderWidth / 2 + padding) * 2;\n  var clipHeight = height - (borderWidth / 2 + padding) * 2;\n  var clippingArea = [moveTo(clipX, clipY), lineTo(clipX, clipY + clipHeight), lineTo(clipX + clipWidth, clipY + clipHeight), lineTo(clipX + clipWidth, clipY), closePath(), clip(), endPath()];\n  var background = drawRectangle({\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    borderWidth: options.borderWidth,\n    color: options.color,\n    borderColor: options.borderColor,\n    rotate: degrees(0),\n    xSkew: degrees(0),\n    ySkew: degrees(0)\n  });\n  var highlights = [];\n  for (var idx = 0, len = options.selectedLines.length; idx < len; idx++) {\n    var line = options.textLines[options.selectedLines[idx]];\n    highlights.push.apply(highlights, drawRectangle({\n      x: line.x - padding,\n      y: line.y - (lineHeight - line.height) / 2,\n      width: width - borderWidth,\n      height: line.height + (lineHeight - line.height) / 2,\n      borderWidth: 0,\n      color: options.selectedColor,\n      borderColor: undefined,\n      rotate: degrees(0),\n      xSkew: degrees(0),\n      ySkew: degrees(0)\n    }));\n  }\n  var lines = drawTextLines(options.textLines, {\n    color: options.textColor,\n    font: options.font,\n    size: options.fontSize,\n    rotate: degrees(0),\n    xSkew: degrees(0),\n    ySkew: degrees(0)\n  });\n  var markedContent = __spreadArrays([beginMarkedContent('Tx'), pushGraphicsState()], lines, [popGraphicsState(), endMarkedContent()]);\n  return __spreadArrays([pushGraphicsState()], background, highlights, clippingArea, markedContent, [popGraphicsState()]);\n};\n//# sourceMappingURL=operations.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}