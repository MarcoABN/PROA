{"ast":null,"code":"import CharCodes from \"../syntax/CharCodes\";\nimport { charFromCode, copyStringIntoBuffer } from \"../../utils\";\nvar PDFHeader = /** @class */function () {\n  function PDFHeader(major, minor) {\n    this.major = String(major);\n    this.minor = String(minor);\n  }\n  PDFHeader.prototype.toString = function () {\n    var bc = charFromCode(129);\n    return \"%PDF-\" + this.major + \".\" + this.minor + \"\\n%\" + bc + bc + bc + bc;\n  };\n  PDFHeader.prototype.sizeInBytes = function () {\n    return 12 + this.major.length + this.minor.length;\n  };\n  PDFHeader.prototype.copyBytesInto = function (buffer, offset) {\n    var initialOffset = offset;\n    buffer[offset++] = CharCodes.Percent;\n    buffer[offset++] = CharCodes.P;\n    buffer[offset++] = CharCodes.D;\n    buffer[offset++] = CharCodes.F;\n    buffer[offset++] = CharCodes.Dash;\n    offset += copyStringIntoBuffer(this.major, buffer, offset);\n    buffer[offset++] = CharCodes.Period;\n    offset += copyStringIntoBuffer(this.minor, buffer, offset);\n    buffer[offset++] = CharCodes.Newline;\n    buffer[offset++] = CharCodes.Percent;\n    buffer[offset++] = 129;\n    buffer[offset++] = 129;\n    buffer[offset++] = 129;\n    buffer[offset++] = 129;\n    return offset - initialOffset;\n  };\n  PDFHeader.forVersion = function (major, minor) {\n    return new PDFHeader(major, minor);\n  };\n  return PDFHeader;\n}();\nexport default PDFHeader;\n//# sourceMappingURL=PDFHeader.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}