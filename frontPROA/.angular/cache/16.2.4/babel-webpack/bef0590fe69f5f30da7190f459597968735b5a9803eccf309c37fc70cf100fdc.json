{"ast":null,"code":"import { __extends, __spreadArrays } from \"tslib\";\nimport PDFNumber from \"./PDFNumber\";\nimport PDFObject from \"./PDFObject\";\nimport CharCodes from \"../syntax/CharCodes\";\nimport { PDFArrayIsNotRectangleError } from \"../errors\";\nvar PDFArray = /** @class */function (_super) {\n  __extends(PDFArray, _super);\n  function PDFArray(context) {\n    var _this = _super.call(this) || this;\n    _this.array = [];\n    _this.context = context;\n    return _this;\n  }\n  PDFArray.prototype.size = function () {\n    return this.array.length;\n  };\n  PDFArray.prototype.push = function (object) {\n    this.array.push(object);\n  };\n  PDFArray.prototype.insert = function (index, object) {\n    this.array.splice(index, 0, object);\n  };\n  PDFArray.prototype.indexOf = function (object) {\n    var index = this.array.indexOf(object);\n    return index === -1 ? undefined : index;\n  };\n  PDFArray.prototype.remove = function (index) {\n    this.array.splice(index, 1);\n  };\n  PDFArray.prototype.set = function (idx, object) {\n    this.array[idx] = object;\n  };\n  PDFArray.prototype.get = function (index) {\n    return this.array[index];\n  };\n  PDFArray.prototype.lookupMaybe = function (index) {\n    var _a;\n    var types = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      types[_i - 1] = arguments[_i];\n    }\n    return (_a = this.context).lookupMaybe.apply(_a, __spreadArrays([this.get(index)], types));\n  };\n  PDFArray.prototype.lookup = function (index) {\n    var _a;\n    var types = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      types[_i - 1] = arguments[_i];\n    }\n    return (_a = this.context).lookup.apply(_a, __spreadArrays([this.get(index)], types));\n  };\n  PDFArray.prototype.asRectangle = function () {\n    if (this.size() !== 4) throw new PDFArrayIsNotRectangleError(this.size());\n    var lowerLeftX = this.lookup(0, PDFNumber).asNumber();\n    var lowerLeftY = this.lookup(1, PDFNumber).asNumber();\n    var upperRightX = this.lookup(2, PDFNumber).asNumber();\n    var upperRightY = this.lookup(3, PDFNumber).asNumber();\n    var x = lowerLeftX;\n    var y = lowerLeftY;\n    var width = upperRightX - lowerLeftX;\n    var height = upperRightY - lowerLeftY;\n    return {\n      x: x,\n      y: y,\n      width: width,\n      height: height\n    };\n  };\n  PDFArray.prototype.asArray = function () {\n    return this.array.slice();\n  };\n  PDFArray.prototype.clone = function (context) {\n    var clone = PDFArray.withContext(context || this.context);\n    for (var idx = 0, len = this.size(); idx < len; idx++) {\n      clone.push(this.array[idx]);\n    }\n    return clone;\n  };\n  PDFArray.prototype.toString = function () {\n    var arrayString = '[ ';\n    for (var idx = 0, len = this.size(); idx < len; idx++) {\n      arrayString += this.get(idx).toString();\n      arrayString += ' ';\n    }\n    arrayString += ']';\n    return arrayString;\n  };\n  PDFArray.prototype.sizeInBytes = function () {\n    var size = 3;\n    for (var idx = 0, len = this.size(); idx < len; idx++) {\n      size += this.get(idx).sizeInBytes() + 1;\n    }\n    return size;\n  };\n  PDFArray.prototype.copyBytesInto = function (buffer, offset) {\n    var initialOffset = offset;\n    buffer[offset++] = CharCodes.LeftSquareBracket;\n    buffer[offset++] = CharCodes.Space;\n    for (var idx = 0, len = this.size(); idx < len; idx++) {\n      offset += this.get(idx).copyBytesInto(buffer, offset);\n      buffer[offset++] = CharCodes.Space;\n    }\n    buffer[offset++] = CharCodes.RightSquareBracket;\n    return offset - initialOffset;\n  };\n  PDFArray.prototype.scalePDFNumbers = function (x, y) {\n    for (var idx = 0, len = this.size(); idx < len; idx++) {\n      var el = this.lookup(idx);\n      if (el instanceof PDFNumber) {\n        var factor = idx % 2 === 0 ? x : y;\n        this.set(idx, PDFNumber.of(el.asNumber() * factor));\n      }\n    }\n  };\n  PDFArray.withContext = function (context) {\n    return new PDFArray(context);\n  };\n  return PDFArray;\n}(PDFObject);\nexport default PDFArray;\n//# sourceMappingURL=PDFArray.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}