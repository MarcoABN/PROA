{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFPage from \"../PDFPage\";\nimport PDFFont from \"../PDFFont\";\nimport PDFField, { assertFieldAppearanceOptions } from \"./PDFField\";\nimport { normalizeAppearance, defaultOptionListAppearanceProvider } from \"./appearances\";\nimport { rgb } from \"../colors\";\nimport { degrees } from \"../rotations\";\nimport { PDFHexString, PDFStream, PDFAcroListBox, AcroChoiceFlags } from \"../../core\";\nimport { assertIs, assertIsSubset, assertOrUndefined, assertPositive } from \"../../utils\";\n/**\r\n * Represents an option list field of a [[PDFForm]].\r\n *\r\n * [[PDFOptionList]] fields are interactive lists of options. The purpose of an\r\n * option list is to enable users to select one or more options from a set of\r\n * possible options. Users are able to see the full set of options without\r\n * first having to click on the field (though scrolling may be necessary).\r\n * Clicking an option in the list will cause it to be selected and displayed\r\n * with a highlighted background. Some option lists allow users to select\r\n * more than one option (see [[PDFOptionList.isMultiselect]]).\r\n */\nvar PDFOptionList = /** @class */function (_super) {\n  __extends(PDFOptionList, _super);\n  function PDFOptionList(acroListBox, ref, doc) {\n    var _this = _super.call(this, acroListBox, ref, doc) || this;\n    assertIs(acroListBox, 'acroListBox', [[PDFAcroListBox, 'PDFAcroListBox']]);\n    _this.acroField = acroListBox;\n    return _this;\n  }\n  /**\r\n   * Get the list of available options for this option list. These options will\r\n   * be displayed to users who view this option list in a PDF reader.\r\n   * For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * const options = optionList.getOptions()\r\n   * console.log('Option List options:', options)\r\n   * ```\r\n   * @returns The options for this option list.\r\n   */\n  PDFOptionList.prototype.getOptions = function () {\n    var rawOptions = this.acroField.getOptions();\n    var options = new Array(rawOptions.length);\n    for (var idx = 0, len = options.length; idx < len; idx++) {\n      var _a = rawOptions[idx],\n        display = _a.display,\n        value = _a.value;\n      options[idx] = (display !== null && display !== void 0 ? display : value).decodeText();\n    }\n    return options;\n  };\n  /**\r\n   * Get the selected options for this option list. These are the values that\r\n   * were selected by a human user via a PDF reader, or programatically via\r\n   * software.\r\n   * For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * const selections = optionList.getSelected()\r\n   * console.log('Option List selections:', selections)\r\n   * ```\r\n   * @returns The selected options for this option list.\r\n   */\n  PDFOptionList.prototype.getSelected = function () {\n    var values = this.acroField.getValues();\n    var selected = new Array(values.length);\n    for (var idx = 0, len = values.length; idx < len; idx++) {\n      selected[idx] = values[idx].decodeText();\n    }\n    return selected;\n  };\n  /**\r\n   * Set the list of options that are available for this option list. These are\r\n   * the values that will be available for users to select when they view this\r\n   * option list in a PDF reader. Note that preexisting options for this\r\n   * option list will be removed. Only the values passed as `options` will be\r\n   * available to select.\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('planets.optionList')\r\n   * optionList.setOptions(['Earth', 'Mars', 'Pluto', 'Venus'])\r\n   * ```\r\n   *\r\n   * This method will mark this option list as dirty, causing its appearance\r\n   * streams to be updated when either [[PDFDocument.save]] or\r\n   * [[PDFForm.updateFieldAppearances]] is called. The updated streams will\r\n   * display the options this field contains inside the widgets of this text\r\n   * field (with selected options highlighted).\r\n   *\r\n   * **IMPORTANT:** The default font used to update appearance streams is\r\n   * [[StandardFonts.Helvetica]]. Note that this is a WinAnsi font. This means\r\n   * that encoding errors will be thrown if this field contains any options\r\n   * with characters outside the WinAnsi character set (the latin alphabet).\r\n   *\r\n   * Embedding a custom font and passing it to\r\n   * [[PDFForm.updateFieldAppearances]] or [[PDFOptionList.updateAppearances]]\r\n   * allows you to generate appearance streams with characters outside the\r\n   * latin alphabet (assuming the custom font supports them).\r\n   *\r\n   * @param options The options that should be available in this option list.\r\n   */\n  PDFOptionList.prototype.setOptions = function (options) {\n    assertIs(options, 'options', [Array]);\n    this.markAsDirty();\n    var optionObjects = new Array(options.length);\n    for (var idx = 0, len = options.length; idx < len; idx++) {\n      optionObjects[idx] = {\n        value: PDFHexString.fromText(options[idx])\n      };\n    }\n    this.acroField.setOptions(optionObjects);\n  };\n  /**\r\n   * Add to the list of options that are available for this option list. Users\r\n   * will be able to select these values in a PDF reader. In addition to the\r\n   * values passed as `options`, any preexisting options for this option list\r\n   * will still be available for users to select.\r\n   * For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('rockets.optionList')\r\n   * optionList.addOptions(['Saturn IV', 'Falcon Heavy'])\r\n   * ```\r\n   * This method will mark this option list as dirty. See\r\n   * [[PDFOptionList.setOptions]] for more details about what this means.\r\n   * @param options New options that should be available in this option list.\r\n   */\n  PDFOptionList.prototype.addOptions = function (options) {\n    assertIs(options, 'options', ['string', Array]);\n    this.markAsDirty();\n    var optionsArr = Array.isArray(options) ? options : [options];\n    var existingOptions = this.acroField.getOptions();\n    var newOptions = new Array(optionsArr.length);\n    for (var idx = 0, len = optionsArr.length; idx < len; idx++) {\n      newOptions[idx] = {\n        value: PDFHexString.fromText(optionsArr[idx])\n      };\n    }\n    this.acroField.setOptions(existingOptions.concat(newOptions));\n  };\n  /**\r\n   * Select one or more values for this option list. This operation is analogous\r\n   * to a human user opening the option list in a PDF reader and clicking on one\r\n   * or more values to select them. This method will update the underlying state\r\n   * of the option list to indicate which values have been selected. PDF\r\n   * libraries and readers will be able to extract these values from the saved\r\n   * document and determine which values were selected.\r\n   * For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('best.superheroes.optionList')\r\n   * optionList.select(['One Punch Man', 'Iron Man'])\r\n   * ```\r\n   * This method will mark this option list as dirty. See\r\n   * [[PDFOptionList.setOptions]] for more details about what this means.\r\n   * @param options The options to be selected.\r\n   * @param merge Whether or not existing selections should be preserved.\r\n   */\n  PDFOptionList.prototype.select = function (options, merge) {\n    if (merge === void 0) {\n      merge = false;\n    }\n    assertIs(options, 'options', ['string', Array]);\n    assertIs(merge, 'merge', ['boolean']);\n    var optionsArr = Array.isArray(options) ? options : [options];\n    var validOptions = this.getOptions();\n    assertIsSubset(optionsArr, 'option', validOptions);\n    this.markAsDirty();\n    if (optionsArr.length > 1 || optionsArr.length === 1 && merge) {\n      this.enableMultiselect();\n    }\n    var values = new Array(optionsArr.length);\n    for (var idx = 0, len = optionsArr.length; idx < len; idx++) {\n      values[idx] = PDFHexString.fromText(optionsArr[idx]);\n    }\n    if (merge) {\n      var existingValues = this.acroField.getValues();\n      this.acroField.setValues(existingValues.concat(values));\n    } else {\n      this.acroField.setValues(values);\n    }\n  };\n  /**\r\n   * Clear all selected values for this option list. This operation is\r\n   * equivalent to selecting an empty list. This method will update the\r\n   * underlying state of the option list to indicate that no values have been\r\n   * selected.\r\n   * For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * optionList.clear()\r\n   * ```\r\n   * This method will mark this option list as dirty. See\r\n   * [[PDFOptionList.setOptions]] for more details about what this means.\r\n   */\n  PDFOptionList.prototype.clear = function () {\n    this.markAsDirty();\n    this.acroField.setValues([]);\n  };\n  /**\r\n   * Set the font size for the text in this field. There needs to be a\r\n   * default appearance string (DA) set with a font value specified\r\n   * for this to work. For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * optionList.setFontSize(4);\r\n   * ```\r\n   * @param fontSize The font size to set the font to.\r\n   */\n  /**\r\n   * Set the font size for this field. Larger font sizes will result in larger\r\n   * text being displayed when PDF readers render this option list. Font sizes\r\n   * may be integer or floating point numbers. Supplying a negative font size\r\n   * will cause this method to throw an error.\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * optionList.setFontSize(4)\r\n   * optionList.setFontSize(15.7)\r\n   * ```\r\n   *\r\n   * > This method depends upon the existence of a default appearance\r\n   * > (`/DA`) string. If this field does not have a default appearance string,\r\n   * > or that string does not contain a font size (via the `Tf` operator),\r\n   * > then this method will throw an error.\r\n   *\r\n   * @param fontSize The font size to be used when rendering text in this field.\r\n   */\n  PDFOptionList.prototype.setFontSize = function (fontSize) {\n    assertPositive(fontSize, 'fontSize');\n    this.acroField.setFontSize(fontSize);\n    this.markAsDirty();\n  };\n  /**\r\n   * Returns `true` if the options of this option list are always displayed\r\n   * in alphabetical order, irrespective of the order in which the options\r\n   * were added to the option list. See [[PDFOptionList.enableSorting]] and\r\n   * [[PDFOptionList.disableSorting]]. For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * if (optionList.isSorted()) console.log('Sorting is enabled')\r\n   * ```\r\n   * @returns Whether or not this option list is sorted.\r\n   */\n  PDFOptionList.prototype.isSorted = function () {\n    return this.acroField.hasFlag(AcroChoiceFlags.Sort);\n  };\n  /**\r\n   * Always display the options of this option list in alphabetical order,\r\n   * irrespective of the order in which the options were added to this option\r\n   * list.\r\n   * For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * optionList.enableSorting()\r\n   * ```\r\n   */\n  PDFOptionList.prototype.enableSorting = function () {\n    this.acroField.setFlagTo(AcroChoiceFlags.Sort, true);\n  };\n  /**\r\n   * Do not always display the options of this option list in alphabetical\r\n   * order. Instead, display the options in whichever order they were added\r\n   * to this option list. For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * optionList.disableSorting()\r\n   * ```\r\n   */\n  PDFOptionList.prototype.disableSorting = function () {\n    this.acroField.setFlagTo(AcroChoiceFlags.Sort, false);\n  };\n  /**\r\n   * Returns `true` if multiple options can be selected from this option list.\r\n   * See [[PDFOptionList.enableMultiselect]] and\r\n   * [[PDFOptionList.disableMultiselect]]. For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * if (optionList.isMultiselect()) console.log('Multiselect is enabled')\r\n   * ```\r\n   * @returns Whether or not multiple options can be selected.\r\n   */\n  PDFOptionList.prototype.isMultiselect = function () {\n    return this.acroField.hasFlag(AcroChoiceFlags.MultiSelect);\n  };\n  /**\r\n   * Allow users to select more than one option from this option list.\r\n   * For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * optionList.enableMultiselect()\r\n   * ```\r\n   */\n  PDFOptionList.prototype.enableMultiselect = function () {\n    this.acroField.setFlagTo(AcroChoiceFlags.MultiSelect, true);\n  };\n  /**\r\n   * Do not allow users to select more than one option from this option list.\r\n   * For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * optionList.disableMultiselect()\r\n   * ```\r\n   */\n  PDFOptionList.prototype.disableMultiselect = function () {\n    this.acroField.setFlagTo(AcroChoiceFlags.MultiSelect, false);\n  };\n  /**\r\n   * Returns `true` if the option selected by a user is stored, or \"committed\",\r\n   * when the user clicks the option. The alternative is that the user's\r\n   * selection is stored when the user leaves this option list field (by\r\n   * clicking outside of it - on another field, for example). See\r\n   * [[PDFOptionList.enableSelectOnClick]] and\r\n   * [[PDFOptionList.disableSelectOnClick]]. For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * if (optionList.isSelectOnClick()) console.log('Select on click is enabled')\r\n   * ```\r\n   * @returns Whether or not options are selected immediately after they are\r\n   *          clicked.\r\n   */\n  PDFOptionList.prototype.isSelectOnClick = function () {\n    return this.acroField.hasFlag(AcroChoiceFlags.CommitOnSelChange);\n  };\n  /**\r\n   * Store the option selected by a user immediately after the user clicks the\r\n   * option. Do not wait for the user to leave this option list field (by\r\n   * clicking outside of it - on another field, for example). For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * optionList.enableSelectOnClick()\r\n   * ```\r\n   */\n  PDFOptionList.prototype.enableSelectOnClick = function () {\n    this.acroField.setFlagTo(AcroChoiceFlags.CommitOnSelChange, true);\n  };\n  /**\r\n   * Wait to store the option selected by a user until they leave this option\r\n   * list field (by clicking outside of it - on another field, for example).\r\n   * For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * optionList.disableSelectOnClick()\r\n   * ```\r\n   */\n  PDFOptionList.prototype.disableSelectOnClick = function () {\n    this.acroField.setFlagTo(AcroChoiceFlags.CommitOnSelChange, false);\n  };\n  /**\r\n   * Show this option list on the specified page. For example:\r\n   * ```js\r\n   * const ubuntuFont = await pdfDoc.embedFont(ubuntuFontBytes)\r\n   * const page = pdfDoc.addPage()\r\n   *\r\n   * const form = pdfDoc.getForm()\r\n   * const optionList = form.createOptionList('best.gundams')\r\n   * optionList.setOptions(['Exia', 'Dynames', 'Kyrios', 'Virtue'])\r\n   * optionList.select(['Exia', 'Virtue'])\r\n   *\r\n   * optionList.addToPage(page, {\r\n   *   x: 50,\r\n   *   y: 75,\r\n   *   width: 200,\r\n   *   height: 100,\r\n   *   textColor: rgb(1, 0, 0),\r\n   *   backgroundColor: rgb(0, 1, 0),\r\n   *   borderColor: rgb(0, 0, 1),\r\n   *   borderWidth: 2,\r\n   *   rotate: degrees(90),\r\n   *   font: ubuntuFont,\r\n   * })\r\n   * ```\r\n   * This will create a new widget for this option list field.\r\n   * @param page The page to which this option list widget should be added.\r\n   * @param options The options to be used when adding this option list widget.\r\n   */\n  PDFOptionList.prototype.addToPage = function (page, options) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    assertIs(page, 'page', [[PDFPage, 'PDFPage']]);\n    assertFieldAppearanceOptions(options);\n    if (!options) options = {};\n    if (!('textColor' in options)) options.textColor = rgb(0, 0, 0);\n    if (!('backgroundColor' in options)) options.backgroundColor = rgb(1, 1, 1);\n    if (!('borderColor' in options)) options.borderColor = rgb(0, 0, 0);\n    if (!('borderWidth' in options)) options.borderWidth = 1;\n    // Create a widget for this option list\n    var widget = this.createWidget({\n      x: (_a = options.x) !== null && _a !== void 0 ? _a : 0,\n      y: (_b = options.y) !== null && _b !== void 0 ? _b : 0,\n      width: (_c = options.width) !== null && _c !== void 0 ? _c : 200,\n      height: (_d = options.height) !== null && _d !== void 0 ? _d : 100,\n      textColor: options.textColor,\n      backgroundColor: options.backgroundColor,\n      borderColor: options.borderColor,\n      borderWidth: (_e = options.borderWidth) !== null && _e !== void 0 ? _e : 0,\n      rotate: (_f = options.rotate) !== null && _f !== void 0 ? _f : degrees(0),\n      hidden: options.hidden,\n      page: page.ref\n    });\n    var widgetRef = this.doc.context.register(widget.dict);\n    // Add widget to this field\n    this.acroField.addWidget(widgetRef);\n    // Set appearance streams for widget\n    var font = (_g = options.font) !== null && _g !== void 0 ? _g : this.doc.getForm().getDefaultFont();\n    this.updateWidgetAppearance(widget, font);\n    // Add widget to the given page\n    page.node.addAnnot(widgetRef);\n  };\n  /**\r\n   * Returns `true` if this option list has been marked as dirty, or if any of\r\n   * this option list's widgets do not have an appearance stream. For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * if (optionList.needsAppearancesUpdate()) console.log('Needs update')\r\n   * ```\r\n   * @returns Whether or not this option list needs an appearance update.\r\n   */\n  PDFOptionList.prototype.needsAppearancesUpdate = function () {\n    var _a;\n    if (this.isDirty()) return true;\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var hasAppearances = ((_a = widget.getAppearances()) === null || _a === void 0 ? void 0 : _a.normal) instanceof PDFStream;\n      if (!hasAppearances) return true;\n    }\n    return false;\n  };\n  /**\r\n   * Update the appearance streams for each of this option list's widgets using\r\n   * the default appearance provider for option lists. For example:\r\n   * ```js\r\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * optionList.defaultUpdateAppearances(helvetica)\r\n   * ```\r\n   * @param font The font to be used for creating the appearance streams.\r\n   */\n  PDFOptionList.prototype.defaultUpdateAppearances = function (font) {\n    assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n    this.updateAppearances(font);\n  };\n  /**\r\n   * Update the appearance streams for each of this option list's widgets using\r\n   * the given appearance provider. If no `provider` is passed, the default\r\n   * appearance provider for option lists will be used. For example:\r\n   * ```js\r\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * optionList.updateAppearances(helvetica, (field, widget, font) => {\r\n   *   ...\r\n   *   return drawOptionList(...)\r\n   * })\r\n   * ```\r\n   * @param font The font to be used for creating the appearance streams.\r\n   * @param provider Optionally, the appearance provider to be used for\r\n   *                 generating the contents of the appearance streams.\r\n   */\n  PDFOptionList.prototype.updateAppearances = function (font, provider) {\n    assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n    assertOrUndefined(provider, 'provider', [Function]);\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      this.updateWidgetAppearance(widget, font, provider);\n    }\n    this.markAsClean();\n  };\n  // getOption(index: number): string {}\n  // getSelectedIndices(): number[] {}\n  // removeOptions(option: string | string[]) {}\n  // removeIndices(option: number[]) {}\n  // deselect(options: string | string[]) {}\n  // deselectIndices(optionIndices: number[]) {}\n  PDFOptionList.prototype.updateWidgetAppearance = function (widget, font, provider) {\n    var apProvider = provider !== null && provider !== void 0 ? provider : defaultOptionListAppearanceProvider;\n    var appearances = normalizeAppearance(apProvider(this, widget, font));\n    this.updateWidgetAppearanceWithFont(widget, font, appearances);\n  };\n  /**\r\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\r\n   * > consider using the [[PDFForm.getOptionList]] method, which will create\r\n   * > an instance of [[PDFOptionList]] for you.\r\n   *\r\n   * Create an instance of [[PDFOptionList]] from an existing acroListBox and\r\n   * ref\r\n   *\r\n   * @param acroComboBox The underlying `PDFAcroListBox` for this option list.\r\n   * @param ref The unique reference for this option list.\r\n   * @param doc The document to which this option list will belong.\r\n   */\n  PDFOptionList.of = function (acroListBox, ref, doc) {\n    return new PDFOptionList(acroListBox, ref, doc);\n  };\n  return PDFOptionList;\n}(PDFField);\nexport default PDFOptionList;\n//# sourceMappingURL=PDFOptionList.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}