{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFRef from \"../objects/PDFRef\";\nimport PDFFlateStream from \"./PDFFlateStream\";\nimport { bytesFor, Cache, reverseArray, sizeInBytes, sum } from \"../../utils\";\nexport var EntryType = /*#__PURE__*/function (EntryType) {\n  EntryType[EntryType[\"Deleted\"] = 0] = \"Deleted\";\n  EntryType[EntryType[\"Uncompressed\"] = 1] = \"Uncompressed\";\n  EntryType[EntryType[\"Compressed\"] = 2] = \"Compressed\";\n  return EntryType;\n}(EntryType || {});\n/**\n * Entries should be added using the [[addDeletedEntry]],\n * [[addUncompressedEntry]], and [[addCompressedEntry]] methods\n * **in order of ascending object number**.\n */\nvar PDFCrossRefStream = /** @class */function (_super) {\n  __extends(PDFCrossRefStream, _super);\n  function PDFCrossRefStream(dict, entries, encode) {\n    if (encode === void 0) {\n      encode = true;\n    }\n    var _this = _super.call(this, dict, encode) || this;\n    // Returns an array of integer pairs for each subsection of the cross ref\n    // section, where each integer pair represents:\n    //   firstObjectNumber(OfSection), length(OfSection)\n    _this.computeIndex = function () {\n      var subsections = [];\n      var subsectionLength = 0;\n      for (var idx = 0, len = _this.entries.length; idx < len; idx++) {\n        var currEntry = _this.entries[idx];\n        var prevEntry = _this.entries[idx - 1];\n        if (idx === 0) {\n          subsections.push(currEntry.ref.objectNumber);\n        } else if (currEntry.ref.objectNumber - prevEntry.ref.objectNumber > 1) {\n          subsections.push(subsectionLength);\n          subsections.push(currEntry.ref.objectNumber);\n          subsectionLength = 0;\n        }\n        subsectionLength += 1;\n      }\n      subsections.push(subsectionLength);\n      return subsections;\n    };\n    _this.computeEntryTuples = function () {\n      var entryTuples = new Array(_this.entries.length);\n      for (var idx = 0, len = _this.entries.length; idx < len; idx++) {\n        var entry = _this.entries[idx];\n        if (entry.type === EntryType.Deleted) {\n          var type = entry.type,\n            nextFreeObjectNumber = entry.nextFreeObjectNumber,\n            ref = entry.ref;\n          entryTuples[idx] = [type, nextFreeObjectNumber, ref.generationNumber];\n        }\n        if (entry.type === EntryType.Uncompressed) {\n          var type = entry.type,\n            offset = entry.offset,\n            ref = entry.ref;\n          entryTuples[idx] = [type, offset, ref.generationNumber];\n        }\n        if (entry.type === EntryType.Compressed) {\n          var type = entry.type,\n            objectStreamRef = entry.objectStreamRef,\n            index = entry.index;\n          entryTuples[idx] = [type, objectStreamRef.objectNumber, index];\n        }\n      }\n      return entryTuples;\n    };\n    _this.computeMaxEntryByteWidths = function () {\n      var entryTuples = _this.entryTuplesCache.access();\n      var widths = [0, 0, 0];\n      for (var idx = 0, len = entryTuples.length; idx < len; idx++) {\n        var _a = entryTuples[idx],\n          first = _a[0],\n          second = _a[1],\n          third = _a[2];\n        var firstSize = sizeInBytes(first);\n        var secondSize = sizeInBytes(second);\n        var thirdSize = sizeInBytes(third);\n        if (firstSize > widths[0]) widths[0] = firstSize;\n        if (secondSize > widths[1]) widths[1] = secondSize;\n        if (thirdSize > widths[2]) widths[2] = thirdSize;\n      }\n      return widths;\n    };\n    _this.entries = entries || [];\n    _this.entryTuplesCache = Cache.populatedBy(_this.computeEntryTuples);\n    _this.maxByteWidthsCache = Cache.populatedBy(_this.computeMaxEntryByteWidths);\n    _this.indexCache = Cache.populatedBy(_this.computeIndex);\n    dict.set(PDFName.of('Type'), PDFName.of('XRef'));\n    return _this;\n  }\n  PDFCrossRefStream.prototype.addDeletedEntry = function (ref, nextFreeObjectNumber) {\n    var type = EntryType.Deleted;\n    this.entries.push({\n      type: type,\n      ref: ref,\n      nextFreeObjectNumber: nextFreeObjectNumber\n    });\n    this.entryTuplesCache.invalidate();\n    this.maxByteWidthsCache.invalidate();\n    this.indexCache.invalidate();\n    this.contentsCache.invalidate();\n  };\n  PDFCrossRefStream.prototype.addUncompressedEntry = function (ref, offset) {\n    var type = EntryType.Uncompressed;\n    this.entries.push({\n      type: type,\n      ref: ref,\n      offset: offset\n    });\n    this.entryTuplesCache.invalidate();\n    this.maxByteWidthsCache.invalidate();\n    this.indexCache.invalidate();\n    this.contentsCache.invalidate();\n  };\n  PDFCrossRefStream.prototype.addCompressedEntry = function (ref, objectStreamRef, index) {\n    var type = EntryType.Compressed;\n    this.entries.push({\n      type: type,\n      ref: ref,\n      objectStreamRef: objectStreamRef,\n      index: index\n    });\n    this.entryTuplesCache.invalidate();\n    this.maxByteWidthsCache.invalidate();\n    this.indexCache.invalidate();\n    this.contentsCache.invalidate();\n  };\n  PDFCrossRefStream.prototype.clone = function (context) {\n    var _a = this,\n      dict = _a.dict,\n      entries = _a.entries,\n      encode = _a.encode;\n    return PDFCrossRefStream.of(dict.clone(context), entries.slice(), encode);\n  };\n  PDFCrossRefStream.prototype.getContentsString = function () {\n    var entryTuples = this.entryTuplesCache.access();\n    var byteWidths = this.maxByteWidthsCache.access();\n    var value = '';\n    for (var entryIdx = 0, entriesLen = entryTuples.length; entryIdx < entriesLen; entryIdx++) {\n      var _a = entryTuples[entryIdx],\n        first = _a[0],\n        second = _a[1],\n        third = _a[2];\n      var firstBytes = reverseArray(bytesFor(first));\n      var secondBytes = reverseArray(bytesFor(second));\n      var thirdBytes = reverseArray(bytesFor(third));\n      for (var idx = byteWidths[0] - 1; idx >= 0; idx--) {\n        value += (firstBytes[idx] || 0).toString(2);\n      }\n      for (var idx = byteWidths[1] - 1; idx >= 0; idx--) {\n        value += (secondBytes[idx] || 0).toString(2);\n      }\n      for (var idx = byteWidths[2] - 1; idx >= 0; idx--) {\n        value += (thirdBytes[idx] || 0).toString(2);\n      }\n    }\n    return value;\n  };\n  PDFCrossRefStream.prototype.getUnencodedContents = function () {\n    var entryTuples = this.entryTuplesCache.access();\n    var byteWidths = this.maxByteWidthsCache.access();\n    var buffer = new Uint8Array(this.getUnencodedContentsSize());\n    var offset = 0;\n    for (var entryIdx = 0, entriesLen = entryTuples.length; entryIdx < entriesLen; entryIdx++) {\n      var _a = entryTuples[entryIdx],\n        first = _a[0],\n        second = _a[1],\n        third = _a[2];\n      var firstBytes = reverseArray(bytesFor(first));\n      var secondBytes = reverseArray(bytesFor(second));\n      var thirdBytes = reverseArray(bytesFor(third));\n      for (var idx = byteWidths[0] - 1; idx >= 0; idx--) {\n        buffer[offset++] = firstBytes[idx] || 0;\n      }\n      for (var idx = byteWidths[1] - 1; idx >= 0; idx--) {\n        buffer[offset++] = secondBytes[idx] || 0;\n      }\n      for (var idx = byteWidths[2] - 1; idx >= 0; idx--) {\n        buffer[offset++] = thirdBytes[idx] || 0;\n      }\n    }\n    return buffer;\n  };\n  PDFCrossRefStream.prototype.getUnencodedContentsSize = function () {\n    var byteWidths = this.maxByteWidthsCache.access();\n    var entryWidth = sum(byteWidths);\n    return entryWidth * this.entries.length;\n  };\n  PDFCrossRefStream.prototype.updateDict = function () {\n    _super.prototype.updateDict.call(this);\n    var byteWidths = this.maxByteWidthsCache.access();\n    var index = this.indexCache.access();\n    var context = this.dict.context;\n    this.dict.set(PDFName.of('W'), context.obj(byteWidths));\n    this.dict.set(PDFName.of('Index'), context.obj(index));\n  };\n  PDFCrossRefStream.create = function (dict, encode) {\n    if (encode === void 0) {\n      encode = true;\n    }\n    var stream = new PDFCrossRefStream(dict, [], encode);\n    stream.addDeletedEntry(PDFRef.of(0, 65535), 0);\n    return stream;\n  };\n  PDFCrossRefStream.of = function (dict, entries, encode) {\n    if (encode === void 0) {\n      encode = true;\n    }\n    return new PDFCrossRefStream(dict, entries, encode);\n  };\n  return PDFCrossRefStream;\n}(PDFFlateStream);\nexport default PDFCrossRefStream;\n//# sourceMappingURL=PDFCrossRefStream.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}