{"ast":null,"code":"/*\n * Copyright 2012 Mozilla Foundation\n *\n * The RunLengthStream class contained in this file is a TypeScript port of the\n * JavaScript RunLengthStream class in Mozilla's pdf.js project, made available\n * under the Apache 2.0 open source license.\n */\nimport { __extends } from \"tslib\";\nimport DecodeStream from \"./DecodeStream\";\nvar RunLengthStream = /** @class */function (_super) {\n  __extends(RunLengthStream, _super);\n  function RunLengthStream(stream, maybeLength) {\n    var _this = _super.call(this, maybeLength) || this;\n    _this.stream = stream;\n    return _this;\n  }\n  RunLengthStream.prototype.readBlock = function () {\n    // The repeatHeader has following format. The first byte defines type of run\n    // and amount of bytes to repeat/copy: n = 0 through 127 - copy next n bytes\n    // (in addition to the second byte from the header), n = 129 through 255 -\n    // duplicate the second byte from the header (257 - n) times, n = 128 - end.\n    var repeatHeader = this.stream.getBytes(2);\n    if (!repeatHeader || repeatHeader.length < 2 || repeatHeader[0] === 128) {\n      this.eof = true;\n      return;\n    }\n    var buffer;\n    var bufferLength = this.bufferLength;\n    var n = repeatHeader[0];\n    if (n < 128) {\n      // copy n bytes\n      buffer = this.ensureBuffer(bufferLength + n + 1);\n      buffer[bufferLength++] = repeatHeader[1];\n      if (n > 0) {\n        var source = this.stream.getBytes(n);\n        buffer.set(source, bufferLength);\n        bufferLength += n;\n      }\n    } else {\n      n = 257 - n;\n      var b = repeatHeader[1];\n      buffer = this.ensureBuffer(bufferLength + n + 1);\n      for (var i = 0; i < n; i++) {\n        buffer[bufferLength++] = b;\n      }\n    }\n    this.bufferLength = bufferLength;\n  };\n  return RunLengthStream;\n}(DecodeStream);\nexport default RunLengthStream;","map":{"version":3,"names":["__extends","DecodeStream","RunLengthStream","_super","stream","maybeLength","_this","call","prototype","readBlock","repeatHeader","getBytes","length","eof","buffer","bufferLength","n","ensureBuffer","source","set","b","i"],"sources":["E:/PROA/frontPROA/node_modules/pdf-lib/es/core/streams/RunLengthStream.js"],"sourcesContent":["/*\n * Copyright 2012 Mozilla Foundation\n *\n * The RunLengthStream class contained in this file is a TypeScript port of the\n * JavaScript RunLengthStream class in Mozilla's pdf.js project, made available\n * under the Apache 2.0 open source license.\n */\nimport { __extends } from \"tslib\";\nimport DecodeStream from \"./DecodeStream\";\nvar RunLengthStream = /** @class */ (function (_super) {\n    __extends(RunLengthStream, _super);\n    function RunLengthStream(stream, maybeLength) {\n        var _this = _super.call(this, maybeLength) || this;\n        _this.stream = stream;\n        return _this;\n    }\n    RunLengthStream.prototype.readBlock = function () {\n        // The repeatHeader has following format. The first byte defines type of run\n        // and amount of bytes to repeat/copy: n = 0 through 127 - copy next n bytes\n        // (in addition to the second byte from the header), n = 129 through 255 -\n        // duplicate the second byte from the header (257 - n) times, n = 128 - end.\n        var repeatHeader = this.stream.getBytes(2);\n        if (!repeatHeader || repeatHeader.length < 2 || repeatHeader[0] === 128) {\n            this.eof = true;\n            return;\n        }\n        var buffer;\n        var bufferLength = this.bufferLength;\n        var n = repeatHeader[0];\n        if (n < 128) {\n            // copy n bytes\n            buffer = this.ensureBuffer(bufferLength + n + 1);\n            buffer[bufferLength++] = repeatHeader[1];\n            if (n > 0) {\n                var source = this.stream.getBytes(n);\n                buffer.set(source, bufferLength);\n                bufferLength += n;\n            }\n        }\n        else {\n            n = 257 - n;\n            var b = repeatHeader[1];\n            buffer = this.ensureBuffer(bufferLength + n + 1);\n            for (var i = 0; i < n; i++) {\n                buffer[bufferLength++] = b;\n            }\n        }\n        this.bufferLength = bufferLength;\n    };\n    return RunLengthStream;\n}(DecodeStream));\nexport default RunLengthStream;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAS,QAAQ,OAAO;AACjC,OAAOC,YAAY,MAAM,gBAAgB;AACzC,IAAIC,eAAe,GAAG,aAAe,UAAUC,MAAM,EAAE;EACnDH,SAAS,CAACE,eAAe,EAAEC,MAAM,CAAC;EAClC,SAASD,eAAeA,CAACE,MAAM,EAAEC,WAAW,EAAE;IAC1C,IAAIC,KAAK,GAAGH,MAAM,CAACI,IAAI,CAAC,IAAI,EAAEF,WAAW,CAAC,IAAI,IAAI;IAClDC,KAAK,CAACF,MAAM,GAAGA,MAAM;IACrB,OAAOE,KAAK;EAChB;EACAJ,eAAe,CAACM,SAAS,CAACC,SAAS,GAAG,YAAY;IAC9C;IACA;IACA;IACA;IACA,IAAIC,YAAY,GAAG,IAAI,CAACN,MAAM,CAACO,QAAQ,CAAC,CAAC,CAAC;IAC1C,IAAI,CAACD,YAAY,IAAIA,YAAY,CAACE,MAAM,GAAG,CAAC,IAAIF,YAAY,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MACrE,IAAI,CAACG,GAAG,GAAG,IAAI;MACf;IACJ;IACA,IAAIC,MAAM;IACV,IAAIC,YAAY,GAAG,IAAI,CAACA,YAAY;IACpC,IAAIC,CAAC,GAAGN,YAAY,CAAC,CAAC,CAAC;IACvB,IAAIM,CAAC,GAAG,GAAG,EAAE;MACT;MACAF,MAAM,GAAG,IAAI,CAACG,YAAY,CAACF,YAAY,GAAGC,CAAC,GAAG,CAAC,CAAC;MAChDF,MAAM,CAACC,YAAY,EAAE,CAAC,GAAGL,YAAY,CAAC,CAAC,CAAC;MACxC,IAAIM,CAAC,GAAG,CAAC,EAAE;QACP,IAAIE,MAAM,GAAG,IAAI,CAACd,MAAM,CAACO,QAAQ,CAACK,CAAC,CAAC;QACpCF,MAAM,CAACK,GAAG,CAACD,MAAM,EAAEH,YAAY,CAAC;QAChCA,YAAY,IAAIC,CAAC;MACrB;IACJ,CAAC,MACI;MACDA,CAAC,GAAG,GAAG,GAAGA,CAAC;MACX,IAAII,CAAC,GAAGV,YAAY,CAAC,CAAC,CAAC;MACvBI,MAAM,GAAG,IAAI,CAACG,YAAY,CAACF,YAAY,GAAGC,CAAC,GAAG,CAAC,CAAC;MAChD,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,CAAC,EAAEK,CAAC,EAAE,EAAE;QACxBP,MAAM,CAACC,YAAY,EAAE,CAAC,GAAGK,CAAC;MAC9B;IACJ;IACA,IAAI,CAACL,YAAY,GAAGA,YAAY;EACpC,CAAC;EACD,OAAOb,eAAe;AAC1B,CAAC,CAACD,YAAY,CAAE;AAChB,eAAeC,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}