{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFObject from \"./PDFObject\";\nimport CharCodes from \"../syntax/CharCodes\";\nimport { copyStringIntoBuffer, padStart, utf16Decode, pdfDocEncodingDecode, toCharCode, parseDate, hasUtf16BOM } from \"../../utils\";\nimport { InvalidPDFDateStringError } from \"../errors\";\nvar PDFString = /** @class */function (_super) {\n  __extends(PDFString, _super);\n  function PDFString(value) {\n    var _this = _super.call(this) || this;\n    _this.value = value;\n    return _this;\n  }\n  PDFString.prototype.asBytes = function () {\n    var bytes = [];\n    var octal = '';\n    var escaped = false;\n    var pushByte = function (byte) {\n      if (byte !== undefined) bytes.push(byte);\n      escaped = false;\n    };\n    for (var idx = 0, len = this.value.length; idx < len; idx++) {\n      var char = this.value[idx];\n      var byte = toCharCode(char);\n      var nextChar = this.value[idx + 1];\n      if (!escaped) {\n        if (byte === CharCodes.BackSlash) escaped = true;else pushByte(byte);\n      } else {\n        if (byte === CharCodes.Newline) pushByte();else if (byte === CharCodes.CarriageReturn) pushByte();else if (byte === CharCodes.n) pushByte(CharCodes.Newline);else if (byte === CharCodes.r) pushByte(CharCodes.CarriageReturn);else if (byte === CharCodes.t) pushByte(CharCodes.Tab);else if (byte === CharCodes.b) pushByte(CharCodes.Backspace);else if (byte === CharCodes.f) pushByte(CharCodes.FormFeed);else if (byte === CharCodes.LeftParen) pushByte(CharCodes.LeftParen);else if (byte === CharCodes.RightParen) pushByte(CharCodes.RightParen);else if (byte === CharCodes.Backspace) pushByte(CharCodes.BackSlash);else if (byte >= CharCodes.Zero && byte <= CharCodes.Seven) {\n          octal += char;\n          if (octal.length === 3 || !(nextChar >= '0' && nextChar <= '7')) {\n            pushByte(parseInt(octal, 8));\n            octal = '';\n          }\n        } else {\n          pushByte(byte);\n        }\n      }\n    }\n    return new Uint8Array(bytes);\n  };\n  PDFString.prototype.decodeText = function () {\n    var bytes = this.asBytes();\n    if (hasUtf16BOM(bytes)) return utf16Decode(bytes);\n    return pdfDocEncodingDecode(bytes);\n  };\n  PDFString.prototype.decodeDate = function () {\n    var text = this.decodeText();\n    var date = parseDate(text);\n    if (!date) throw new InvalidPDFDateStringError(text);\n    return date;\n  };\n  PDFString.prototype.asString = function () {\n    return this.value;\n  };\n  PDFString.prototype.clone = function () {\n    return PDFString.of(this.value);\n  };\n  PDFString.prototype.toString = function () {\n    return \"(\" + this.value + \")\";\n  };\n  PDFString.prototype.sizeInBytes = function () {\n    return this.value.length + 2;\n  };\n  PDFString.prototype.copyBytesInto = function (buffer, offset) {\n    buffer[offset++] = CharCodes.LeftParen;\n    offset += copyStringIntoBuffer(this.value, buffer, offset);\n    buffer[offset++] = CharCodes.RightParen;\n    return this.value.length + 2;\n  };\n  // The PDF spec allows newlines and parens to appear directly within a literal\n  // string. These character _may_ be escaped. But they do not _have_ to be. So\n  // for simplicity, we will not bother escaping them.\n  PDFString.of = function (value) {\n    return new PDFString(value);\n  };\n  PDFString.fromDate = function (date) {\n    var year = padStart(String(date.getUTCFullYear()), 4, '0');\n    var month = padStart(String(date.getUTCMonth() + 1), 2, '0');\n    var day = padStart(String(date.getUTCDate()), 2, '0');\n    var hours = padStart(String(date.getUTCHours()), 2, '0');\n    var mins = padStart(String(date.getUTCMinutes()), 2, '0');\n    var secs = padStart(String(date.getUTCSeconds()), 2, '0');\n    return new PDFString(\"D:\" + year + month + day + hours + mins + secs + \"Z\");\n  };\n  return PDFString;\n}(PDFObject);\nexport default PDFString;","map":{"version":3,"names":["__extends","PDFObject","CharCodes","copyStringIntoBuffer","padStart","utf16Decode","pdfDocEncodingDecode","toCharCode","parseDate","hasUtf16BOM","InvalidPDFDateStringError","PDFString","_super","value","_this","call","prototype","asBytes","bytes","octal","escaped","pushByte","byte","undefined","push","idx","len","length","char","nextChar","BackSlash","Newline","CarriageReturn","n","r","t","Tab","b","Backspace","f","FormFeed","LeftParen","RightParen","Zero","Seven","parseInt","Uint8Array","decodeText","decodeDate","text","date","asString","clone","of","toString","sizeInBytes","copyBytesInto","buffer","offset","fromDate","year","String","getUTCFullYear","month","getUTCMonth","day","getUTCDate","hours","getUTCHours","mins","getUTCMinutes","secs","getUTCSeconds"],"sources":["E:/PROA/frontPROA/node_modules/pdf-lib/es/core/objects/PDFString.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport PDFObject from \"./PDFObject\";\nimport CharCodes from \"../syntax/CharCodes\";\nimport { copyStringIntoBuffer, padStart, utf16Decode, pdfDocEncodingDecode, toCharCode, parseDate, hasUtf16BOM, } from \"../../utils\";\nimport { InvalidPDFDateStringError } from \"../errors\";\nvar PDFString = /** @class */ (function (_super) {\n    __extends(PDFString, _super);\n    function PDFString(value) {\n        var _this = _super.call(this) || this;\n        _this.value = value;\n        return _this;\n    }\n    PDFString.prototype.asBytes = function () {\n        var bytes = [];\n        var octal = '';\n        var escaped = false;\n        var pushByte = function (byte) {\n            if (byte !== undefined)\n                bytes.push(byte);\n            escaped = false;\n        };\n        for (var idx = 0, len = this.value.length; idx < len; idx++) {\n            var char = this.value[idx];\n            var byte = toCharCode(char);\n            var nextChar = this.value[idx + 1];\n            if (!escaped) {\n                if (byte === CharCodes.BackSlash)\n                    escaped = true;\n                else\n                    pushByte(byte);\n            }\n            else {\n                if (byte === CharCodes.Newline)\n                    pushByte();\n                else if (byte === CharCodes.CarriageReturn)\n                    pushByte();\n                else if (byte === CharCodes.n)\n                    pushByte(CharCodes.Newline);\n                else if (byte === CharCodes.r)\n                    pushByte(CharCodes.CarriageReturn);\n                else if (byte === CharCodes.t)\n                    pushByte(CharCodes.Tab);\n                else if (byte === CharCodes.b)\n                    pushByte(CharCodes.Backspace);\n                else if (byte === CharCodes.f)\n                    pushByte(CharCodes.FormFeed);\n                else if (byte === CharCodes.LeftParen)\n                    pushByte(CharCodes.LeftParen);\n                else if (byte === CharCodes.RightParen)\n                    pushByte(CharCodes.RightParen);\n                else if (byte === CharCodes.Backspace)\n                    pushByte(CharCodes.BackSlash);\n                else if (byte >= CharCodes.Zero && byte <= CharCodes.Seven) {\n                    octal += char;\n                    if (octal.length === 3 || !(nextChar >= '0' && nextChar <= '7')) {\n                        pushByte(parseInt(octal, 8));\n                        octal = '';\n                    }\n                }\n                else {\n                    pushByte(byte);\n                }\n            }\n        }\n        return new Uint8Array(bytes);\n    };\n    PDFString.prototype.decodeText = function () {\n        var bytes = this.asBytes();\n        if (hasUtf16BOM(bytes))\n            return utf16Decode(bytes);\n        return pdfDocEncodingDecode(bytes);\n    };\n    PDFString.prototype.decodeDate = function () {\n        var text = this.decodeText();\n        var date = parseDate(text);\n        if (!date)\n            throw new InvalidPDFDateStringError(text);\n        return date;\n    };\n    PDFString.prototype.asString = function () {\n        return this.value;\n    };\n    PDFString.prototype.clone = function () {\n        return PDFString.of(this.value);\n    };\n    PDFString.prototype.toString = function () {\n        return \"(\" + this.value + \")\";\n    };\n    PDFString.prototype.sizeInBytes = function () {\n        return this.value.length + 2;\n    };\n    PDFString.prototype.copyBytesInto = function (buffer, offset) {\n        buffer[offset++] = CharCodes.LeftParen;\n        offset += copyStringIntoBuffer(this.value, buffer, offset);\n        buffer[offset++] = CharCodes.RightParen;\n        return this.value.length + 2;\n    };\n    // The PDF spec allows newlines and parens to appear directly within a literal\n    // string. These character _may_ be escaped. But they do not _have_ to be. So\n    // for simplicity, we will not bother escaping them.\n    PDFString.of = function (value) { return new PDFString(value); };\n    PDFString.fromDate = function (date) {\n        var year = padStart(String(date.getUTCFullYear()), 4, '0');\n        var month = padStart(String(date.getUTCMonth() + 1), 2, '0');\n        var day = padStart(String(date.getUTCDate()), 2, '0');\n        var hours = padStart(String(date.getUTCHours()), 2, '0');\n        var mins = padStart(String(date.getUTCMinutes()), 2, '0');\n        var secs = padStart(String(date.getUTCSeconds()), 2, '0');\n        return new PDFString(\"D:\" + year + month + day + hours + mins + secs + \"Z\");\n    };\n    return PDFString;\n}(PDFObject));\nexport default PDFString;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}