{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport PDFDocument from \"../PDFDocument\";\nimport { colorToComponents, setFillingColor } from \"../colors\";\nimport { toDegrees, rotateRectangle, reduceRotation, adjustDimsForRotation, degrees } from \"../rotations\";\nimport { PDFRef, PDFWidgetAnnotation, PDFName, MethodNotImplementedError, AcroFieldFlags, PDFAcroTerminal, AnnotationFlags } from \"../../core\";\nimport { assertIs, assertMultiple, assertOrUndefined } from \"../../utils\";\nimport { ImageAlignment } from '../image';\nimport { drawImage, rotateInPlace } from '../operations';\nexport var assertFieldAppearanceOptions = function (options) {\n  assertOrUndefined(options === null || options === void 0 ? void 0 : options.x, 'options.x', ['number']);\n  assertOrUndefined(options === null || options === void 0 ? void 0 : options.y, 'options.y', ['number']);\n  assertOrUndefined(options === null || options === void 0 ? void 0 : options.width, 'options.width', ['number']);\n  assertOrUndefined(options === null || options === void 0 ? void 0 : options.height, 'options.height', ['number']);\n  assertOrUndefined(options === null || options === void 0 ? void 0 : options.textColor, 'options.textColor', [[Object, 'Color']]);\n  assertOrUndefined(options === null || options === void 0 ? void 0 : options.backgroundColor, 'options.backgroundColor', [[Object, 'Color']]);\n  assertOrUndefined(options === null || options === void 0 ? void 0 : options.borderColor, 'options.borderColor', [[Object, 'Color']]);\n  assertOrUndefined(options === null || options === void 0 ? void 0 : options.borderWidth, 'options.borderWidth', ['number']);\n  assertOrUndefined(options === null || options === void 0 ? void 0 : options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n};\n/**\n * Represents a field of a [[PDFForm]].\n *\n * This class is effectively abstract. All fields in a [[PDFForm]] will\n * actually be an instance of a subclass of this class.\n *\n * Note that each field in a PDF is represented by a single field object.\n * However, a given field object may be rendered at multiple locations within\n * the document (across one or more pages). The rendering of a field is\n * controlled by its widgets. Each widget causes its field to be displayed at a\n * particular location in the document.\n *\n * Most of the time each field in a PDF has only a single widget, and thus is\n * only rendered once. However, if a field is rendered multiple times, it will\n * have multiple widgets - one for each location it is rendered.\n *\n * This abstraction of field objects and widgets is defined in the PDF\n * specification and dictates how PDF files store fields and where they are\n * to be rendered.\n */\nvar PDFField = /** @class */function () {\n  function PDFField(acroField, ref, doc) {\n    assertIs(acroField, 'acroField', [[PDFAcroTerminal, 'PDFAcroTerminal']]);\n    assertIs(ref, 'ref', [[PDFRef, 'PDFRef']]);\n    assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n    this.acroField = acroField;\n    this.ref = ref;\n    this.doc = doc;\n  }\n  /**\n   * Get the fully qualified name of this field. For example:\n   * ```js\n   * const fields = form.getFields()\n   * fields.forEach(field => {\n   *   const name = field.getName()\n   *   console.log('Field name:', name)\n   * })\n   * ```\n   * Note that PDF fields are structured as a tree. Each field is the\n   * descendent of a series of ancestor nodes all the way up to the form node,\n   * which is always the root of the tree. Each node in the tree (except for\n   * the form node) has a partial name. Partial names can be composed of any\n   * unicode characters except a period (`.`). The fully qualified name of a\n   * field is composed of the partial names of all its ancestors joined\n   * with periods. This means that splitting the fully qualified name on\n   * periods and taking the last element of the resulting array will give you\n   * the partial name of a specific field.\n   * @returns The fully qualified name of this field.\n   */\n  PDFField.prototype.getName = function () {\n    var _a;\n    return (_a = this.acroField.getFullyQualifiedName()) !== null && _a !== void 0 ? _a : '';\n  };\n  /**\n   * Returns `true` if this field is read only. This means that PDF readers\n   * will not allow users to interact with the field or change its value. See\n   * [[PDFField.enableReadOnly]] and [[PDFField.disableReadOnly]].\n   * For example:\n   * ```js\n   * const field = form.getField('some.field')\n   * if (field.isReadOnly()) console.log('Read only is enabled')\n   * ```\n   * @returns Whether or not this is a read only field.\n   */\n  PDFField.prototype.isReadOnly = function () {\n    return this.acroField.hasFlag(AcroFieldFlags.ReadOnly);\n  };\n  /**\n   * Prevent PDF readers from allowing users to interact with this field or\n   * change its value. The field will not respond to mouse or keyboard input.\n   * For example:\n   * ```js\n   * const field = form.getField('some.field')\n   * field.enableReadOnly()\n   * ```\n   * Useful for fields whose values are computed, imported from a database, or\n   * prefilled by software before being displayed to the user.\n   */\n  PDFField.prototype.enableReadOnly = function () {\n    this.acroField.setFlagTo(AcroFieldFlags.ReadOnly, true);\n  };\n  /**\n   * Allow users to interact with this field and change its value in PDF\n   * readers via mouse and keyboard input. For example:\n   * ```js\n   * const field = form.getField('some.field')\n   * field.disableReadOnly()\n   * ```\n   */\n  PDFField.prototype.disableReadOnly = function () {\n    this.acroField.setFlagTo(AcroFieldFlags.ReadOnly, false);\n  };\n  /**\n   * Returns `true` if this field must have a value when the form is submitted.\n   * See [[PDFField.enableRequired]] and [[PDFField.disableRequired]].\n   * For example:\n   * ```js\n   * const field = form.getField('some.field')\n   * if (field.isRequired()) console.log('Field is required')\n   * ```\n   * @returns Whether or not this field is required.\n   */\n  PDFField.prototype.isRequired = function () {\n    return this.acroField.hasFlag(AcroFieldFlags.Required);\n  };\n  /**\n   * Require this field to have a value when the form is submitted.\n   * For example:\n   * ```js\n   * const field = form.getField('some.field')\n   * field.enableRequired()\n   * ```\n   */\n  PDFField.prototype.enableRequired = function () {\n    this.acroField.setFlagTo(AcroFieldFlags.Required, true);\n  };\n  /**\n   * Do not require this field to have a value when the form is submitted.\n   * For example:\n   * ```js\n   * const field = form.getField('some.field')\n   * field.disableRequired()\n   * ```\n   */\n  PDFField.prototype.disableRequired = function () {\n    this.acroField.setFlagTo(AcroFieldFlags.Required, false);\n  };\n  /**\n   * Returns `true` if this field's value should be exported when the form is\n   * submitted. See [[PDFField.enableExporting]] and\n   * [[PDFField.disableExporting]].\n   * For example:\n   * ```js\n   * const field = form.getField('some.field')\n   * if (field.isExported()) console.log('Exporting is enabled')\n   * ```\n   * @returns Whether or not this field's value should be exported.\n   */\n  PDFField.prototype.isExported = function () {\n    return !this.acroField.hasFlag(AcroFieldFlags.NoExport);\n  };\n  /**\n   * Indicate that this field's value should be exported when the form is\n   * submitted in a PDF reader. For example:\n   * ```js\n   * const field = form.getField('some.field')\n   * field.enableExporting()\n   * ```\n   */\n  PDFField.prototype.enableExporting = function () {\n    this.acroField.setFlagTo(AcroFieldFlags.NoExport, false);\n  };\n  /**\n   * Indicate that this field's value should **not** be exported when the form\n   * is submitted in a PDF reader. For example:\n   * ```js\n   * const field = form.getField('some.field')\n   * field.disableExporting()\n   * ```\n   */\n  PDFField.prototype.disableExporting = function () {\n    this.acroField.setFlagTo(AcroFieldFlags.NoExport, true);\n  };\n  /** @ignore */\n  PDFField.prototype.needsAppearancesUpdate = function () {\n    throw new MethodNotImplementedError(this.constructor.name, 'needsAppearancesUpdate');\n  };\n  /** @ignore */\n  PDFField.prototype.defaultUpdateAppearances = function (_font) {\n    throw new MethodNotImplementedError(this.constructor.name, 'defaultUpdateAppearances');\n  };\n  PDFField.prototype.markAsDirty = function () {\n    this.doc.getForm().markFieldAsDirty(this.ref);\n  };\n  PDFField.prototype.markAsClean = function () {\n    this.doc.getForm().markFieldAsClean(this.ref);\n  };\n  PDFField.prototype.isDirty = function () {\n    return this.doc.getForm().fieldIsDirty(this.ref);\n  };\n  PDFField.prototype.createWidget = function (options) {\n    var _a;\n    var textColor = options.textColor;\n    var backgroundColor = options.backgroundColor;\n    var borderColor = options.borderColor;\n    var borderWidth = options.borderWidth;\n    var degreesAngle = toDegrees(options.rotate);\n    var caption = options.caption;\n    var x = options.x;\n    var y = options.y;\n    var width = options.width + borderWidth;\n    var height = options.height + borderWidth;\n    var hidden = Boolean(options.hidden);\n    var pageRef = options.page;\n    assertMultiple(degreesAngle, 'degreesAngle', 90);\n    // Create a widget for this field\n    var widget = PDFWidgetAnnotation.create(this.doc.context, this.ref);\n    // Set widget properties\n    var rect = rotateRectangle({\n      x: x,\n      y: y,\n      width: width,\n      height: height\n    }, borderWidth, degreesAngle);\n    widget.setRectangle(rect);\n    if (pageRef) widget.setP(pageRef);\n    var ac = widget.getOrCreateAppearanceCharacteristics();\n    if (backgroundColor) {\n      ac.setBackgroundColor(colorToComponents(backgroundColor));\n    }\n    ac.setRotation(degreesAngle);\n    if (caption) ac.setCaptions({\n      normal: caption\n    });\n    if (borderColor) ac.setBorderColor(colorToComponents(borderColor));\n    var bs = widget.getOrCreateBorderStyle();\n    if (borderWidth !== undefined) bs.setWidth(borderWidth);\n    widget.setFlagTo(AnnotationFlags.Print, true);\n    widget.setFlagTo(AnnotationFlags.Hidden, hidden);\n    widget.setFlagTo(AnnotationFlags.Invisible, false);\n    // Set acrofield properties\n    if (textColor) {\n      var da = (_a = this.acroField.getDefaultAppearance()) !== null && _a !== void 0 ? _a : '';\n      var newDa = da + '\\n' + setFillingColor(textColor).toString();\n      this.acroField.setDefaultAppearance(newDa);\n    }\n    return widget;\n  };\n  PDFField.prototype.updateWidgetAppearanceWithFont = function (widget, font, _a) {\n    var normal = _a.normal,\n      rollover = _a.rollover,\n      down = _a.down;\n    this.updateWidgetAppearances(widget, {\n      normal: this.createAppearanceStream(widget, normal, font),\n      rollover: rollover && this.createAppearanceStream(widget, rollover, font),\n      down: down && this.createAppearanceStream(widget, down, font)\n    });\n  };\n  PDFField.prototype.updateOnOffWidgetAppearance = function (widget, onValue, _a) {\n    var normal = _a.normal,\n      rollover = _a.rollover,\n      down = _a.down;\n    this.updateWidgetAppearances(widget, {\n      normal: this.createAppearanceDict(widget, normal, onValue),\n      rollover: rollover && this.createAppearanceDict(widget, rollover, onValue),\n      down: down && this.createAppearanceDict(widget, down, onValue)\n    });\n  };\n  PDFField.prototype.updateWidgetAppearances = function (widget, _a) {\n    var normal = _a.normal,\n      rollover = _a.rollover,\n      down = _a.down;\n    widget.setNormalAppearance(normal);\n    if (rollover) {\n      widget.setRolloverAppearance(rollover);\n    } else {\n      widget.removeRolloverAppearance();\n    }\n    if (down) {\n      widget.setDownAppearance(down);\n    } else {\n      widget.removeDownAppearance();\n    }\n  };\n  // // TODO: Do we need to do this...?\n  // private foo(font: PDFFont, dict: PDFDict) {\n  //   if (!dict.lookup(PDFName.of('DR'))) {\n  //     dict.set(PDFName.of('DR'), dict.context.obj({}));\n  //   }\n  //   const DR = dict.lookup(PDFName.of('DR'), PDFDict);\n  //   if (!DR.lookup(PDFName.of('Font'))) {\n  //     DR.set(PDFName.of('Font'), dict.context.obj({}));\n  //   }\n  //   const Font = DR.lookup(PDFName.of('Font'), PDFDict);\n  //   Font.set(PDFName.of(font.name), font.ref);\n  // }\n  PDFField.prototype.createAppearanceStream = function (widget, appearance, font) {\n    var _a;\n    var context = this.acroField.dict.context;\n    var _b = widget.getRectangle(),\n      width = _b.width,\n      height = _b.height;\n    // TODO: Do we need to do this...?\n    // if (font) {\n    //   this.foo(font, widget.dict);\n    //   this.foo(font, this.doc.getForm().acroForm.dict);\n    // }\n    // END TODO\n    var Resources = font && {\n      Font: (_a = {}, _a[font.name] = font.ref, _a)\n    };\n    var stream = context.formXObject(appearance, {\n      Resources: Resources,\n      BBox: context.obj([0, 0, width, height]),\n      Matrix: context.obj([1, 0, 0, 1, 0, 0])\n    });\n    var streamRef = context.register(stream);\n    return streamRef;\n  };\n  /**\n   * Create a FormXObject of the supplied image and add it to context.\n   * The FormXObject size is calculated based on the widget (including\n   * the alignment).\n   * @param widget The widget that should display the image.\n   * @param alignment The alignment of the image.\n   * @param image The image that should be displayed.\n   * @returns The ref for the FormXObject that was added to the context.\n   */\n  PDFField.prototype.createImageAppearanceStream = function (widget, image, alignment) {\n    // NOTE: This implementation doesn't handle image borders.\n    // NOTE: Acrobat seems to resize the image (maybe even skewing its aspect\n    //       ratio) to fit perfectly within the widget's rectangle. This method\n    //       does not currently do that. Should there be an option for that?\n    var _a;\n    var _b;\n    var context = this.acroField.dict.context;\n    var rectangle = widget.getRectangle();\n    var ap = widget.getAppearanceCharacteristics();\n    var bs = widget.getBorderStyle();\n    var borderWidth = (_b = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _b !== void 0 ? _b : 0;\n    var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n    var rotate = rotateInPlace(__assign(__assign({}, rectangle), {\n      rotation: rotation\n    }));\n    var adj = adjustDimsForRotation(rectangle, rotation);\n    var imageDims = image.scaleToFit(adj.width - borderWidth * 2, adj.height - borderWidth * 2);\n    // Support borders on images and maybe other properties\n    var options = {\n      x: borderWidth,\n      y: borderWidth,\n      width: imageDims.width,\n      height: imageDims.height,\n      //\n      rotate: degrees(0),\n      xSkew: degrees(0),\n      ySkew: degrees(0)\n    };\n    if (alignment === ImageAlignment.Center) {\n      options.x += (adj.width - borderWidth * 2) / 2 - imageDims.width / 2;\n      options.y += (adj.height - borderWidth * 2) / 2 - imageDims.height / 2;\n    } else if (alignment === ImageAlignment.Right) {\n      options.x = adj.width - borderWidth - imageDims.width;\n      options.y = adj.height - borderWidth - imageDims.height;\n    }\n    var imageName = this.doc.context.addRandomSuffix('Image', 10);\n    var appearance = __spreadArrays(rotate, drawImage(imageName, options));\n    ////////////\n    var Resources = {\n      XObject: (_a = {}, _a[imageName] = image.ref, _a)\n    };\n    var stream = context.formXObject(appearance, {\n      Resources: Resources,\n      BBox: context.obj([0, 0, rectangle.width, rectangle.height]),\n      Matrix: context.obj([1, 0, 0, 1, 0, 0])\n    });\n    return context.register(stream);\n  };\n  PDFField.prototype.createAppearanceDict = function (widget, appearance, onValue) {\n    var context = this.acroField.dict.context;\n    var onStreamRef = this.createAppearanceStream(widget, appearance.on);\n    var offStreamRef = this.createAppearanceStream(widget, appearance.off);\n    var appearanceDict = context.obj({});\n    appearanceDict.set(onValue, onStreamRef);\n    appearanceDict.set(PDFName.of('Off'), offStreamRef);\n    return appearanceDict;\n  };\n  return PDFField;\n}();\nexport default PDFField;","map":{"version":3,"names":["__assign","__spreadArrays","PDFDocument","colorToComponents","setFillingColor","toDegrees","rotateRectangle","reduceRotation","adjustDimsForRotation","degrees","PDFRef","PDFWidgetAnnotation","PDFName","MethodNotImplementedError","AcroFieldFlags","PDFAcroTerminal","AnnotationFlags","assertIs","assertMultiple","assertOrUndefined","ImageAlignment","drawImage","rotateInPlace","assertFieldAppearanceOptions","options","x","y","width","height","textColor","Object","backgroundColor","borderColor","borderWidth","rotate","PDFField","acroField","ref","doc","prototype","getName","_a","getFullyQualifiedName","isReadOnly","hasFlag","ReadOnly","enableReadOnly","setFlagTo","disableReadOnly","isRequired","Required","enableRequired","disableRequired","isExported","NoExport","enableExporting","disableExporting","needsAppearancesUpdate","constructor","name","defaultUpdateAppearances","_font","markAsDirty","getForm","markFieldAsDirty","markAsClean","markFieldAsClean","isDirty","fieldIsDirty","createWidget","degreesAngle","caption","hidden","Boolean","pageRef","page","widget","create","context","rect","setRectangle","setP","ac","getOrCreateAppearanceCharacteristics","setBackgroundColor","setRotation","setCaptions","normal","setBorderColor","bs","getOrCreateBorderStyle","undefined","setWidth","Print","Hidden","Invisible","da","getDefaultAppearance","newDa","toString","setDefaultAppearance","updateWidgetAppearanceWithFont","font","rollover","down","updateWidgetAppearances","createAppearanceStream","updateOnOffWidgetAppearance","onValue","createAppearanceDict","setNormalAppearance","setRolloverAppearance","removeRolloverAppearance","setDownAppearance","removeDownAppearance","appearance","dict","_b","getRectangle","Resources","Font","stream","formXObject","BBox","obj","Matrix","streamRef","register","createImageAppearanceStream","image","alignment","rectangle","ap","getAppearanceCharacteristics","getBorderStyle","getWidth","rotation","getRotation","adj","imageDims","scaleToFit","xSkew","ySkew","Center","Right","imageName","addRandomSuffix","XObject","onStreamRef","on","offStreamRef","off","appearanceDict","set","of"],"sources":["E:/PROA/frontPROA/node_modules/pdf-lib/es/api/form/PDFField.js"],"sourcesContent":["import { __assign, __spreadArrays } from \"tslib\";\nimport PDFDocument from \"../PDFDocument\";\nimport { colorToComponents, setFillingColor } from \"../colors\";\nimport { toDegrees, rotateRectangle, reduceRotation, adjustDimsForRotation, degrees, } from \"../rotations\";\nimport { PDFRef, PDFWidgetAnnotation, PDFName, MethodNotImplementedError, AcroFieldFlags, PDFAcroTerminal, AnnotationFlags, } from \"../../core\";\nimport { assertIs, assertMultiple, assertOrUndefined } from \"../../utils\";\nimport { ImageAlignment } from '../image';\nimport { drawImage, rotateInPlace } from '../operations';\nexport var assertFieldAppearanceOptions = function (options) {\n    assertOrUndefined(options === null || options === void 0 ? void 0 : options.x, 'options.x', ['number']);\n    assertOrUndefined(options === null || options === void 0 ? void 0 : options.y, 'options.y', ['number']);\n    assertOrUndefined(options === null || options === void 0 ? void 0 : options.width, 'options.width', ['number']);\n    assertOrUndefined(options === null || options === void 0 ? void 0 : options.height, 'options.height', ['number']);\n    assertOrUndefined(options === null || options === void 0 ? void 0 : options.textColor, 'options.textColor', [\n        [Object, 'Color'],\n    ]);\n    assertOrUndefined(options === null || options === void 0 ? void 0 : options.backgroundColor, 'options.backgroundColor', [\n        [Object, 'Color'],\n    ]);\n    assertOrUndefined(options === null || options === void 0 ? void 0 : options.borderColor, 'options.borderColor', [\n        [Object, 'Color'],\n    ]);\n    assertOrUndefined(options === null || options === void 0 ? void 0 : options.borderWidth, 'options.borderWidth', ['number']);\n    assertOrUndefined(options === null || options === void 0 ? void 0 : options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n};\n/**\n * Represents a field of a [[PDFForm]].\n *\n * This class is effectively abstract. All fields in a [[PDFForm]] will\n * actually be an instance of a subclass of this class.\n *\n * Note that each field in a PDF is represented by a single field object.\n * However, a given field object may be rendered at multiple locations within\n * the document (across one or more pages). The rendering of a field is\n * controlled by its widgets. Each widget causes its field to be displayed at a\n * particular location in the document.\n *\n * Most of the time each field in a PDF has only a single widget, and thus is\n * only rendered once. However, if a field is rendered multiple times, it will\n * have multiple widgets - one for each location it is rendered.\n *\n * This abstraction of field objects and widgets is defined in the PDF\n * specification and dictates how PDF files store fields and where they are\n * to be rendered.\n */\nvar PDFField = /** @class */ (function () {\n    function PDFField(acroField, ref, doc) {\n        assertIs(acroField, 'acroField', [[PDFAcroTerminal, 'PDFAcroTerminal']]);\n        assertIs(ref, 'ref', [[PDFRef, 'PDFRef']]);\n        assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n        this.acroField = acroField;\n        this.ref = ref;\n        this.doc = doc;\n    }\n    /**\n     * Get the fully qualified name of this field. For example:\n     * ```js\n     * const fields = form.getFields()\n     * fields.forEach(field => {\n     *   const name = field.getName()\n     *   console.log('Field name:', name)\n     * })\n     * ```\n     * Note that PDF fields are structured as a tree. Each field is the\n     * descendent of a series of ancestor nodes all the way up to the form node,\n     * which is always the root of the tree. Each node in the tree (except for\n     * the form node) has a partial name. Partial names can be composed of any\n     * unicode characters except a period (`.`). The fully qualified name of a\n     * field is composed of the partial names of all its ancestors joined\n     * with periods. This means that splitting the fully qualified name on\n     * periods and taking the last element of the resulting array will give you\n     * the partial name of a specific field.\n     * @returns The fully qualified name of this field.\n     */\n    PDFField.prototype.getName = function () {\n        var _a;\n        return (_a = this.acroField.getFullyQualifiedName()) !== null && _a !== void 0 ? _a : '';\n    };\n    /**\n     * Returns `true` if this field is read only. This means that PDF readers\n     * will not allow users to interact with the field or change its value. See\n     * [[PDFField.enableReadOnly]] and [[PDFField.disableReadOnly]].\n     * For example:\n     * ```js\n     * const field = form.getField('some.field')\n     * if (field.isReadOnly()) console.log('Read only is enabled')\n     * ```\n     * @returns Whether or not this is a read only field.\n     */\n    PDFField.prototype.isReadOnly = function () {\n        return this.acroField.hasFlag(AcroFieldFlags.ReadOnly);\n    };\n    /**\n     * Prevent PDF readers from allowing users to interact with this field or\n     * change its value. The field will not respond to mouse or keyboard input.\n     * For example:\n     * ```js\n     * const field = form.getField('some.field')\n     * field.enableReadOnly()\n     * ```\n     * Useful for fields whose values are computed, imported from a database, or\n     * prefilled by software before being displayed to the user.\n     */\n    PDFField.prototype.enableReadOnly = function () {\n        this.acroField.setFlagTo(AcroFieldFlags.ReadOnly, true);\n    };\n    /**\n     * Allow users to interact with this field and change its value in PDF\n     * readers via mouse and keyboard input. For example:\n     * ```js\n     * const field = form.getField('some.field')\n     * field.disableReadOnly()\n     * ```\n     */\n    PDFField.prototype.disableReadOnly = function () {\n        this.acroField.setFlagTo(AcroFieldFlags.ReadOnly, false);\n    };\n    /**\n     * Returns `true` if this field must have a value when the form is submitted.\n     * See [[PDFField.enableRequired]] and [[PDFField.disableRequired]].\n     * For example:\n     * ```js\n     * const field = form.getField('some.field')\n     * if (field.isRequired()) console.log('Field is required')\n     * ```\n     * @returns Whether or not this field is required.\n     */\n    PDFField.prototype.isRequired = function () {\n        return this.acroField.hasFlag(AcroFieldFlags.Required);\n    };\n    /**\n     * Require this field to have a value when the form is submitted.\n     * For example:\n     * ```js\n     * const field = form.getField('some.field')\n     * field.enableRequired()\n     * ```\n     */\n    PDFField.prototype.enableRequired = function () {\n        this.acroField.setFlagTo(AcroFieldFlags.Required, true);\n    };\n    /**\n     * Do not require this field to have a value when the form is submitted.\n     * For example:\n     * ```js\n     * const field = form.getField('some.field')\n     * field.disableRequired()\n     * ```\n     */\n    PDFField.prototype.disableRequired = function () {\n        this.acroField.setFlagTo(AcroFieldFlags.Required, false);\n    };\n    /**\n     * Returns `true` if this field's value should be exported when the form is\n     * submitted. See [[PDFField.enableExporting]] and\n     * [[PDFField.disableExporting]].\n     * For example:\n     * ```js\n     * const field = form.getField('some.field')\n     * if (field.isExported()) console.log('Exporting is enabled')\n     * ```\n     * @returns Whether or not this field's value should be exported.\n     */\n    PDFField.prototype.isExported = function () {\n        return !this.acroField.hasFlag(AcroFieldFlags.NoExport);\n    };\n    /**\n     * Indicate that this field's value should be exported when the form is\n     * submitted in a PDF reader. For example:\n     * ```js\n     * const field = form.getField('some.field')\n     * field.enableExporting()\n     * ```\n     */\n    PDFField.prototype.enableExporting = function () {\n        this.acroField.setFlagTo(AcroFieldFlags.NoExport, false);\n    };\n    /**\n     * Indicate that this field's value should **not** be exported when the form\n     * is submitted in a PDF reader. For example:\n     * ```js\n     * const field = form.getField('some.field')\n     * field.disableExporting()\n     * ```\n     */\n    PDFField.prototype.disableExporting = function () {\n        this.acroField.setFlagTo(AcroFieldFlags.NoExport, true);\n    };\n    /** @ignore */\n    PDFField.prototype.needsAppearancesUpdate = function () {\n        throw new MethodNotImplementedError(this.constructor.name, 'needsAppearancesUpdate');\n    };\n    /** @ignore */\n    PDFField.prototype.defaultUpdateAppearances = function (_font) {\n        throw new MethodNotImplementedError(this.constructor.name, 'defaultUpdateAppearances');\n    };\n    PDFField.prototype.markAsDirty = function () {\n        this.doc.getForm().markFieldAsDirty(this.ref);\n    };\n    PDFField.prototype.markAsClean = function () {\n        this.doc.getForm().markFieldAsClean(this.ref);\n    };\n    PDFField.prototype.isDirty = function () {\n        return this.doc.getForm().fieldIsDirty(this.ref);\n    };\n    PDFField.prototype.createWidget = function (options) {\n        var _a;\n        var textColor = options.textColor;\n        var backgroundColor = options.backgroundColor;\n        var borderColor = options.borderColor;\n        var borderWidth = options.borderWidth;\n        var degreesAngle = toDegrees(options.rotate);\n        var caption = options.caption;\n        var x = options.x;\n        var y = options.y;\n        var width = options.width + borderWidth;\n        var height = options.height + borderWidth;\n        var hidden = Boolean(options.hidden);\n        var pageRef = options.page;\n        assertMultiple(degreesAngle, 'degreesAngle', 90);\n        // Create a widget for this field\n        var widget = PDFWidgetAnnotation.create(this.doc.context, this.ref);\n        // Set widget properties\n        var rect = rotateRectangle({ x: x, y: y, width: width, height: height }, borderWidth, degreesAngle);\n        widget.setRectangle(rect);\n        if (pageRef)\n            widget.setP(pageRef);\n        var ac = widget.getOrCreateAppearanceCharacteristics();\n        if (backgroundColor) {\n            ac.setBackgroundColor(colorToComponents(backgroundColor));\n        }\n        ac.setRotation(degreesAngle);\n        if (caption)\n            ac.setCaptions({ normal: caption });\n        if (borderColor)\n            ac.setBorderColor(colorToComponents(borderColor));\n        var bs = widget.getOrCreateBorderStyle();\n        if (borderWidth !== undefined)\n            bs.setWidth(borderWidth);\n        widget.setFlagTo(AnnotationFlags.Print, true);\n        widget.setFlagTo(AnnotationFlags.Hidden, hidden);\n        widget.setFlagTo(AnnotationFlags.Invisible, false);\n        // Set acrofield properties\n        if (textColor) {\n            var da = (_a = this.acroField.getDefaultAppearance()) !== null && _a !== void 0 ? _a : '';\n            var newDa = da + '\\n' + setFillingColor(textColor).toString();\n            this.acroField.setDefaultAppearance(newDa);\n        }\n        return widget;\n    };\n    PDFField.prototype.updateWidgetAppearanceWithFont = function (widget, font, _a) {\n        var normal = _a.normal, rollover = _a.rollover, down = _a.down;\n        this.updateWidgetAppearances(widget, {\n            normal: this.createAppearanceStream(widget, normal, font),\n            rollover: rollover && this.createAppearanceStream(widget, rollover, font),\n            down: down && this.createAppearanceStream(widget, down, font),\n        });\n    };\n    PDFField.prototype.updateOnOffWidgetAppearance = function (widget, onValue, _a) {\n        var normal = _a.normal, rollover = _a.rollover, down = _a.down;\n        this.updateWidgetAppearances(widget, {\n            normal: this.createAppearanceDict(widget, normal, onValue),\n            rollover: rollover && this.createAppearanceDict(widget, rollover, onValue),\n            down: down && this.createAppearanceDict(widget, down, onValue),\n        });\n    };\n    PDFField.prototype.updateWidgetAppearances = function (widget, _a) {\n        var normal = _a.normal, rollover = _a.rollover, down = _a.down;\n        widget.setNormalAppearance(normal);\n        if (rollover) {\n            widget.setRolloverAppearance(rollover);\n        }\n        else {\n            widget.removeRolloverAppearance();\n        }\n        if (down) {\n            widget.setDownAppearance(down);\n        }\n        else {\n            widget.removeDownAppearance();\n        }\n    };\n    // // TODO: Do we need to do this...?\n    // private foo(font: PDFFont, dict: PDFDict) {\n    //   if (!dict.lookup(PDFName.of('DR'))) {\n    //     dict.set(PDFName.of('DR'), dict.context.obj({}));\n    //   }\n    //   const DR = dict.lookup(PDFName.of('DR'), PDFDict);\n    //   if (!DR.lookup(PDFName.of('Font'))) {\n    //     DR.set(PDFName.of('Font'), dict.context.obj({}));\n    //   }\n    //   const Font = DR.lookup(PDFName.of('Font'), PDFDict);\n    //   Font.set(PDFName.of(font.name), font.ref);\n    // }\n    PDFField.prototype.createAppearanceStream = function (widget, appearance, font) {\n        var _a;\n        var context = this.acroField.dict.context;\n        var _b = widget.getRectangle(), width = _b.width, height = _b.height;\n        // TODO: Do we need to do this...?\n        // if (font) {\n        //   this.foo(font, widget.dict);\n        //   this.foo(font, this.doc.getForm().acroForm.dict);\n        // }\n        // END TODO\n        var Resources = font && { Font: (_a = {}, _a[font.name] = font.ref, _a) };\n        var stream = context.formXObject(appearance, {\n            Resources: Resources,\n            BBox: context.obj([0, 0, width, height]),\n            Matrix: context.obj([1, 0, 0, 1, 0, 0]),\n        });\n        var streamRef = context.register(stream);\n        return streamRef;\n    };\n    /**\n     * Create a FormXObject of the supplied image and add it to context.\n     * The FormXObject size is calculated based on the widget (including\n     * the alignment).\n     * @param widget The widget that should display the image.\n     * @param alignment The alignment of the image.\n     * @param image The image that should be displayed.\n     * @returns The ref for the FormXObject that was added to the context.\n     */\n    PDFField.prototype.createImageAppearanceStream = function (widget, image, alignment) {\n        // NOTE: This implementation doesn't handle image borders.\n        // NOTE: Acrobat seems to resize the image (maybe even skewing its aspect\n        //       ratio) to fit perfectly within the widget's rectangle. This method\n        //       does not currently do that. Should there be an option for that?\n        var _a;\n        var _b;\n        var context = this.acroField.dict.context;\n        var rectangle = widget.getRectangle();\n        var ap = widget.getAppearanceCharacteristics();\n        var bs = widget.getBorderStyle();\n        var borderWidth = (_b = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _b !== void 0 ? _b : 0;\n        var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n        var rotate = rotateInPlace(__assign(__assign({}, rectangle), { rotation: rotation }));\n        var adj = adjustDimsForRotation(rectangle, rotation);\n        var imageDims = image.scaleToFit(adj.width - borderWidth * 2, adj.height - borderWidth * 2);\n        // Support borders on images and maybe other properties\n        var options = {\n            x: borderWidth,\n            y: borderWidth,\n            width: imageDims.width,\n            height: imageDims.height,\n            //\n            rotate: degrees(0),\n            xSkew: degrees(0),\n            ySkew: degrees(0),\n        };\n        if (alignment === ImageAlignment.Center) {\n            options.x += (adj.width - borderWidth * 2) / 2 - imageDims.width / 2;\n            options.y += (adj.height - borderWidth * 2) / 2 - imageDims.height / 2;\n        }\n        else if (alignment === ImageAlignment.Right) {\n            options.x = adj.width - borderWidth - imageDims.width;\n            options.y = adj.height - borderWidth - imageDims.height;\n        }\n        var imageName = this.doc.context.addRandomSuffix('Image', 10);\n        var appearance = __spreadArrays(rotate, drawImage(imageName, options));\n        ////////////\n        var Resources = { XObject: (_a = {}, _a[imageName] = image.ref, _a) };\n        var stream = context.formXObject(appearance, {\n            Resources: Resources,\n            BBox: context.obj([0, 0, rectangle.width, rectangle.height]),\n            Matrix: context.obj([1, 0, 0, 1, 0, 0]),\n        });\n        return context.register(stream);\n    };\n    PDFField.prototype.createAppearanceDict = function (widget, appearance, onValue) {\n        var context = this.acroField.dict.context;\n        var onStreamRef = this.createAppearanceStream(widget, appearance.on);\n        var offStreamRef = this.createAppearanceStream(widget, appearance.off);\n        var appearanceDict = context.obj({});\n        appearanceDict.set(onValue, onStreamRef);\n        appearanceDict.set(PDFName.of('Off'), offStreamRef);\n        return appearanceDict;\n    };\n    return PDFField;\n}());\nexport default PDFField;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}