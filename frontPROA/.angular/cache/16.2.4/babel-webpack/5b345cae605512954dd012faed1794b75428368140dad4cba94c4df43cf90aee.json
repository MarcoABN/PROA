{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport PDFHeader from \"../document/PDFHeader\";\nimport PDFTrailer from \"../document/PDFTrailer\";\nimport PDFInvalidObject from \"../objects/PDFInvalidObject\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFNumber from \"../objects/PDFNumber\";\nimport PDFRef from \"../objects/PDFRef\";\nimport PDFStream from \"../objects/PDFStream\";\nimport PDFCrossRefStream from \"../structures/PDFCrossRefStream\";\nimport PDFObjectStream from \"../structures/PDFObjectStream\";\nimport PDFWriter from \"./PDFWriter\";\nimport { last, waitForTick } from \"../../utils\";\nvar PDFStreamWriter = /** @class */function (_super) {\n  __extends(PDFStreamWriter, _super);\n  function PDFStreamWriter(context, objectsPerTick, encodeStreams, objectsPerStream) {\n    var _this = _super.call(this, context, objectsPerTick) || this;\n    _this.encodeStreams = encodeStreams;\n    _this.objectsPerStream = objectsPerStream;\n    return _this;\n  }\n  PDFStreamWriter.prototype.computeBufferSize = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var objectNumber, header, size, xrefStream, uncompressedObjects, compressedObjects, objectStreamRefs, indirectObjects, idx, len, indirectObject, ref, object, shouldNotCompress, chunk, objectStreamRef, idx, len, chunk, ref, objectStream, xrefStreamRef, xrefOffset, trailer;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            objectNumber = this.context.largestObjectNumber + 1;\n            header = PDFHeader.forVersion(1, 7);\n            size = header.sizeInBytes() + 2;\n            xrefStream = PDFCrossRefStream.create(this.createTrailerDict(), this.encodeStreams);\n            uncompressedObjects = [];\n            compressedObjects = [];\n            objectStreamRefs = [];\n            indirectObjects = this.context.enumerateIndirectObjects();\n            idx = 0, len = indirectObjects.length;\n            _a.label = 1;\n          case 1:\n            if (!(idx < len)) return [3 /*break*/, 6];\n            indirectObject = indirectObjects[idx];\n            ref = indirectObject[0], object = indirectObject[1];\n            shouldNotCompress = ref === this.context.trailerInfo.Encrypt || object instanceof PDFStream || object instanceof PDFInvalidObject || ref.generationNumber !== 0;\n            if (!shouldNotCompress) return [3 /*break*/, 4];\n            uncompressedObjects.push(indirectObject);\n            xrefStream.addUncompressedEntry(ref, size);\n            size += this.computeIndirectObjectSize(indirectObject);\n            if (!this.shouldWaitForTick(1)) return [3 /*break*/, 3];\n            return [4 /*yield*/, waitForTick()];\n          case 2:\n            _a.sent();\n            _a.label = 3;\n          case 3:\n            return [3 /*break*/, 5];\n          case 4:\n            chunk = last(compressedObjects);\n            objectStreamRef = last(objectStreamRefs);\n            if (!chunk || chunk.length % this.objectsPerStream === 0) {\n              chunk = [];\n              compressedObjects.push(chunk);\n              objectStreamRef = PDFRef.of(objectNumber++);\n              objectStreamRefs.push(objectStreamRef);\n            }\n            xrefStream.addCompressedEntry(ref, objectStreamRef, chunk.length);\n            chunk.push(indirectObject);\n            _a.label = 5;\n          case 5:\n            idx++;\n            return [3 /*break*/, 1];\n          case 6:\n            idx = 0, len = compressedObjects.length;\n            _a.label = 7;\n          case 7:\n            if (!(idx < len)) return [3 /*break*/, 10];\n            chunk = compressedObjects[idx];\n            ref = objectStreamRefs[idx];\n            objectStream = PDFObjectStream.withContextAndObjects(this.context, chunk, this.encodeStreams);\n            xrefStream.addUncompressedEntry(ref, size);\n            size += this.computeIndirectObjectSize([ref, objectStream]);\n            uncompressedObjects.push([ref, objectStream]);\n            if (!this.shouldWaitForTick(chunk.length)) return [3 /*break*/, 9];\n            return [4 /*yield*/, waitForTick()];\n          case 8:\n            _a.sent();\n            _a.label = 9;\n          case 9:\n            idx++;\n            return [3 /*break*/, 7];\n          case 10:\n            xrefStreamRef = PDFRef.of(objectNumber++);\n            xrefStream.dict.set(PDFName.of('Size'), PDFNumber.of(objectNumber));\n            xrefStream.addUncompressedEntry(xrefStreamRef, size);\n            xrefOffset = size;\n            size += this.computeIndirectObjectSize([xrefStreamRef, xrefStream]);\n            uncompressedObjects.push([xrefStreamRef, xrefStream]);\n            trailer = PDFTrailer.forLastCrossRefSectionOffset(xrefOffset);\n            size += trailer.sizeInBytes();\n            return [2 /*return*/, {\n              size: size,\n              header: header,\n              indirectObjects: uncompressedObjects,\n              trailer: trailer\n            }];\n        }\n      });\n    });\n  };\n  PDFStreamWriter.forContext = function (context, objectsPerTick, encodeStreams, objectsPerStream) {\n    if (encodeStreams === void 0) {\n      encodeStreams = true;\n    }\n    if (objectsPerStream === void 0) {\n      objectsPerStream = 50;\n    }\n    return new PDFStreamWriter(context, objectsPerTick, encodeStreams, objectsPerStream);\n  };\n  return PDFStreamWriter;\n}(PDFWriter);\nexport default PDFStreamWriter;","map":{"version":3,"names":["__awaiter","__extends","__generator","PDFHeader","PDFTrailer","PDFInvalidObject","PDFName","PDFNumber","PDFRef","PDFStream","PDFCrossRefStream","PDFObjectStream","PDFWriter","last","waitForTick","PDFStreamWriter","_super","context","objectsPerTick","encodeStreams","objectsPerStream","_this","call","prototype","computeBufferSize","objectNumber","header","size","xrefStream","uncompressedObjects","compressedObjects","objectStreamRefs","indirectObjects","idx","len","indirectObject","ref","object","shouldNotCompress","chunk","objectStreamRef","objectStream","xrefStreamRef","xrefOffset","trailer","_a","label","largestObjectNumber","forVersion","sizeInBytes","create","createTrailerDict","enumerateIndirectObjects","length","trailerInfo","Encrypt","generationNumber","push","addUncompressedEntry","computeIndirectObjectSize","shouldWaitForTick","sent","of","addCompressedEntry","withContextAndObjects","dict","set","forLastCrossRefSectionOffset","forContext"],"sources":["E:/PROA/frontPROA/node_modules/pdf-lib/es/core/writers/PDFStreamWriter.js"],"sourcesContent":["import { __awaiter, __extends, __generator } from \"tslib\";\nimport PDFHeader from \"../document/PDFHeader\";\nimport PDFTrailer from \"../document/PDFTrailer\";\nimport PDFInvalidObject from \"../objects/PDFInvalidObject\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFNumber from \"../objects/PDFNumber\";\nimport PDFRef from \"../objects/PDFRef\";\nimport PDFStream from \"../objects/PDFStream\";\nimport PDFCrossRefStream from \"../structures/PDFCrossRefStream\";\nimport PDFObjectStream from \"../structures/PDFObjectStream\";\nimport PDFWriter from \"./PDFWriter\";\nimport { last, waitForTick } from \"../../utils\";\nvar PDFStreamWriter = /** @class */ (function (_super) {\n    __extends(PDFStreamWriter, _super);\n    function PDFStreamWriter(context, objectsPerTick, encodeStreams, objectsPerStream) {\n        var _this = _super.call(this, context, objectsPerTick) || this;\n        _this.encodeStreams = encodeStreams;\n        _this.objectsPerStream = objectsPerStream;\n        return _this;\n    }\n    PDFStreamWriter.prototype.computeBufferSize = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var objectNumber, header, size, xrefStream, uncompressedObjects, compressedObjects, objectStreamRefs, indirectObjects, idx, len, indirectObject, ref, object, shouldNotCompress, chunk, objectStreamRef, idx, len, chunk, ref, objectStream, xrefStreamRef, xrefOffset, trailer;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        objectNumber = this.context.largestObjectNumber + 1;\n                        header = PDFHeader.forVersion(1, 7);\n                        size = header.sizeInBytes() + 2;\n                        xrefStream = PDFCrossRefStream.create(this.createTrailerDict(), this.encodeStreams);\n                        uncompressedObjects = [];\n                        compressedObjects = [];\n                        objectStreamRefs = [];\n                        indirectObjects = this.context.enumerateIndirectObjects();\n                        idx = 0, len = indirectObjects.length;\n                        _a.label = 1;\n                    case 1:\n                        if (!(idx < len)) return [3 /*break*/, 6];\n                        indirectObject = indirectObjects[idx];\n                        ref = indirectObject[0], object = indirectObject[1];\n                        shouldNotCompress = ref === this.context.trailerInfo.Encrypt ||\n                            object instanceof PDFStream ||\n                            object instanceof PDFInvalidObject ||\n                            ref.generationNumber !== 0;\n                        if (!shouldNotCompress) return [3 /*break*/, 4];\n                        uncompressedObjects.push(indirectObject);\n                        xrefStream.addUncompressedEntry(ref, size);\n                        size += this.computeIndirectObjectSize(indirectObject);\n                        if (!this.shouldWaitForTick(1)) return [3 /*break*/, 3];\n                        return [4 /*yield*/, waitForTick()];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3: return [3 /*break*/, 5];\n                    case 4:\n                        chunk = last(compressedObjects);\n                        objectStreamRef = last(objectStreamRefs);\n                        if (!chunk || chunk.length % this.objectsPerStream === 0) {\n                            chunk = [];\n                            compressedObjects.push(chunk);\n                            objectStreamRef = PDFRef.of(objectNumber++);\n                            objectStreamRefs.push(objectStreamRef);\n                        }\n                        xrefStream.addCompressedEntry(ref, objectStreamRef, chunk.length);\n                        chunk.push(indirectObject);\n                        _a.label = 5;\n                    case 5:\n                        idx++;\n                        return [3 /*break*/, 1];\n                    case 6:\n                        idx = 0, len = compressedObjects.length;\n                        _a.label = 7;\n                    case 7:\n                        if (!(idx < len)) return [3 /*break*/, 10];\n                        chunk = compressedObjects[idx];\n                        ref = objectStreamRefs[idx];\n                        objectStream = PDFObjectStream.withContextAndObjects(this.context, chunk, this.encodeStreams);\n                        xrefStream.addUncompressedEntry(ref, size);\n                        size += this.computeIndirectObjectSize([ref, objectStream]);\n                        uncompressedObjects.push([ref, objectStream]);\n                        if (!this.shouldWaitForTick(chunk.length)) return [3 /*break*/, 9];\n                        return [4 /*yield*/, waitForTick()];\n                    case 8:\n                        _a.sent();\n                        _a.label = 9;\n                    case 9:\n                        idx++;\n                        return [3 /*break*/, 7];\n                    case 10:\n                        xrefStreamRef = PDFRef.of(objectNumber++);\n                        xrefStream.dict.set(PDFName.of('Size'), PDFNumber.of(objectNumber));\n                        xrefStream.addUncompressedEntry(xrefStreamRef, size);\n                        xrefOffset = size;\n                        size += this.computeIndirectObjectSize([xrefStreamRef, xrefStream]);\n                        uncompressedObjects.push([xrefStreamRef, xrefStream]);\n                        trailer = PDFTrailer.forLastCrossRefSectionOffset(xrefOffset);\n                        size += trailer.sizeInBytes();\n                        return [2 /*return*/, { size: size, header: header, indirectObjects: uncompressedObjects, trailer: trailer }];\n                }\n            });\n        });\n    };\n    PDFStreamWriter.forContext = function (context, objectsPerTick, encodeStreams, objectsPerStream) {\n        if (encodeStreams === void 0) { encodeStreams = true; }\n        if (objectsPerStream === void 0) { objectsPerStream = 50; }\n        return new PDFStreamWriter(context, objectsPerTick, encodeStreams, objectsPerStream);\n    };\n    return PDFStreamWriter;\n}(PDFWriter));\nexport default PDFStreamWriter;\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACzD,OAAOC,SAAS,MAAM,uBAAuB;AAC7C,OAAOC,UAAU,MAAM,wBAAwB;AAC/C,OAAOC,gBAAgB,MAAM,6BAA6B;AAC1D,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAOC,SAAS,MAAM,sBAAsB;AAC5C,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,SAAS,MAAM,sBAAsB;AAC5C,OAAOC,iBAAiB,MAAM,iCAAiC;AAC/D,OAAOC,eAAe,MAAM,+BAA+B;AAC3D,OAAOC,SAAS,MAAM,aAAa;AACnC,SAASC,IAAI,EAAEC,WAAW,QAAQ,aAAa;AAC/C,IAAIC,eAAe,GAAG,aAAe,UAAUC,MAAM,EAAE;EACnDf,SAAS,CAACc,eAAe,EAAEC,MAAM,CAAC;EAClC,SAASD,eAAeA,CAACE,OAAO,EAAEC,cAAc,EAAEC,aAAa,EAAEC,gBAAgB,EAAE;IAC/E,IAAIC,KAAK,GAAGL,MAAM,CAACM,IAAI,CAAC,IAAI,EAAEL,OAAO,EAAEC,cAAc,CAAC,IAAI,IAAI;IAC9DG,KAAK,CAACF,aAAa,GAAGA,aAAa;IACnCE,KAAK,CAACD,gBAAgB,GAAGA,gBAAgB;IACzC,OAAOC,KAAK;EAChB;EACAN,eAAe,CAACQ,SAAS,CAACC,iBAAiB,GAAG,YAAY;IACtD,OAAOxB,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,YAAY;MAC/C,IAAIyB,YAAY,EAAEC,MAAM,EAAEC,IAAI,EAAEC,UAAU,EAAEC,mBAAmB,EAAEC,iBAAiB,EAAEC,gBAAgB,EAAEC,eAAe,EAAEC,GAAG,EAAEC,GAAG,EAAEC,cAAc,EAAEC,GAAG,EAAEC,MAAM,EAAEC,iBAAiB,EAAEC,KAAK,EAAEC,eAAe,EAAEP,GAAG,EAAEC,GAAG,EAAEK,KAAK,EAAEH,GAAG,EAAEK,YAAY,EAAEC,aAAa,EAAEC,UAAU,EAAEC,OAAO;MAC/Q,OAAO1C,WAAW,CAAC,IAAI,EAAE,UAAU2C,EAAE,EAAE;QACnC,QAAQA,EAAE,CAACC,KAAK;UACZ,KAAK,CAAC;YACFrB,YAAY,GAAG,IAAI,CAACR,OAAO,CAAC8B,mBAAmB,GAAG,CAAC;YACnDrB,MAAM,GAAGvB,SAAS,CAAC6C,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC;YACnCrB,IAAI,GAAGD,MAAM,CAACuB,WAAW,CAAC,CAAC,GAAG,CAAC;YAC/BrB,UAAU,GAAGlB,iBAAiB,CAACwC,MAAM,CAAC,IAAI,CAACC,iBAAiB,CAAC,CAAC,EAAE,IAAI,CAAChC,aAAa,CAAC;YACnFU,mBAAmB,GAAG,EAAE;YACxBC,iBAAiB,GAAG,EAAE;YACtBC,gBAAgB,GAAG,EAAE;YACrBC,eAAe,GAAG,IAAI,CAACf,OAAO,CAACmC,wBAAwB,CAAC,CAAC;YACzDnB,GAAG,GAAG,CAAC,EAAEC,GAAG,GAAGF,eAAe,CAACqB,MAAM;YACrCR,EAAE,CAACC,KAAK,GAAG,CAAC;UAChB,KAAK,CAAC;YACF,IAAI,EAAEb,GAAG,GAAGC,GAAG,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;YACzCC,cAAc,GAAGH,eAAe,CAACC,GAAG,CAAC;YACrCG,GAAG,GAAGD,cAAc,CAAC,CAAC,CAAC,EAAEE,MAAM,GAAGF,cAAc,CAAC,CAAC,CAAC;YACnDG,iBAAiB,GAAGF,GAAG,KAAK,IAAI,CAACnB,OAAO,CAACqC,WAAW,CAACC,OAAO,IACxDlB,MAAM,YAAY5B,SAAS,IAC3B4B,MAAM,YAAYhC,gBAAgB,IAClC+B,GAAG,CAACoB,gBAAgB,KAAK,CAAC;YAC9B,IAAI,CAAClB,iBAAiB,EAAE,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;YAC/CT,mBAAmB,CAAC4B,IAAI,CAACtB,cAAc,CAAC;YACxCP,UAAU,CAAC8B,oBAAoB,CAACtB,GAAG,EAAET,IAAI,CAAC;YAC1CA,IAAI,IAAI,IAAI,CAACgC,yBAAyB,CAACxB,cAAc,CAAC;YACtD,IAAI,CAAC,IAAI,CAACyB,iBAAiB,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;YACvD,OAAO,CAAC,CAAC,CAAC,WAAW9C,WAAW,CAAC,CAAC,CAAC;UACvC,KAAK,CAAC;YACF+B,EAAE,CAACgB,IAAI,CAAC,CAAC;YACThB,EAAE,CAACC,KAAK,GAAG,CAAC;UAChB,KAAK,CAAC;YAAE,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;UAC/B,KAAK,CAAC;YACFP,KAAK,GAAG1B,IAAI,CAACiB,iBAAiB,CAAC;YAC/BU,eAAe,GAAG3B,IAAI,CAACkB,gBAAgB,CAAC;YACxC,IAAI,CAACQ,KAAK,IAAIA,KAAK,CAACc,MAAM,GAAG,IAAI,CAACjC,gBAAgB,KAAK,CAAC,EAAE;cACtDmB,KAAK,GAAG,EAAE;cACVT,iBAAiB,CAAC2B,IAAI,CAAClB,KAAK,CAAC;cAC7BC,eAAe,GAAGhC,MAAM,CAACsD,EAAE,CAACrC,YAAY,EAAE,CAAC;cAC3CM,gBAAgB,CAAC0B,IAAI,CAACjB,eAAe,CAAC;YAC1C;YACAZ,UAAU,CAACmC,kBAAkB,CAAC3B,GAAG,EAAEI,eAAe,EAAED,KAAK,CAACc,MAAM,CAAC;YACjEd,KAAK,CAACkB,IAAI,CAACtB,cAAc,CAAC;YAC1BU,EAAE,CAACC,KAAK,GAAG,CAAC;UAChB,KAAK,CAAC;YACFb,GAAG,EAAE;YACL,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;UAC3B,KAAK,CAAC;YACFA,GAAG,GAAG,CAAC,EAAEC,GAAG,GAAGJ,iBAAiB,CAACuB,MAAM;YACvCR,EAAE,CAACC,KAAK,GAAG,CAAC;UAChB,KAAK,CAAC;YACF,IAAI,EAAEb,GAAG,GAAGC,GAAG,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;YAC1CK,KAAK,GAAGT,iBAAiB,CAACG,GAAG,CAAC;YAC9BG,GAAG,GAAGL,gBAAgB,CAACE,GAAG,CAAC;YAC3BQ,YAAY,GAAG9B,eAAe,CAACqD,qBAAqB,CAAC,IAAI,CAAC/C,OAAO,EAAEsB,KAAK,EAAE,IAAI,CAACpB,aAAa,CAAC;YAC7FS,UAAU,CAAC8B,oBAAoB,CAACtB,GAAG,EAAET,IAAI,CAAC;YAC1CA,IAAI,IAAI,IAAI,CAACgC,yBAAyB,CAAC,CAACvB,GAAG,EAAEK,YAAY,CAAC,CAAC;YAC3DZ,mBAAmB,CAAC4B,IAAI,CAAC,CAACrB,GAAG,EAAEK,YAAY,CAAC,CAAC;YAC7C,IAAI,CAAC,IAAI,CAACmB,iBAAiB,CAACrB,KAAK,CAACc,MAAM,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;YAClE,OAAO,CAAC,CAAC,CAAC,WAAWvC,WAAW,CAAC,CAAC,CAAC;UACvC,KAAK,CAAC;YACF+B,EAAE,CAACgB,IAAI,CAAC,CAAC;YACThB,EAAE,CAACC,KAAK,GAAG,CAAC;UAChB,KAAK,CAAC;YACFb,GAAG,EAAE;YACL,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;UAC3B,KAAK,EAAE;YACHS,aAAa,GAAGlC,MAAM,CAACsD,EAAE,CAACrC,YAAY,EAAE,CAAC;YACzCG,UAAU,CAACqC,IAAI,CAACC,GAAG,CAAC5D,OAAO,CAACwD,EAAE,CAAC,MAAM,CAAC,EAAEvD,SAAS,CAACuD,EAAE,CAACrC,YAAY,CAAC,CAAC;YACnEG,UAAU,CAAC8B,oBAAoB,CAAChB,aAAa,EAAEf,IAAI,CAAC;YACpDgB,UAAU,GAAGhB,IAAI;YACjBA,IAAI,IAAI,IAAI,CAACgC,yBAAyB,CAAC,CAACjB,aAAa,EAAEd,UAAU,CAAC,CAAC;YACnEC,mBAAmB,CAAC4B,IAAI,CAAC,CAACf,aAAa,EAAEd,UAAU,CAAC,CAAC;YACrDgB,OAAO,GAAGxC,UAAU,CAAC+D,4BAA4B,CAACxB,UAAU,CAAC;YAC7DhB,IAAI,IAAIiB,OAAO,CAACK,WAAW,CAAC,CAAC;YAC7B,OAAO,CAAC,CAAC,CAAC,YAAY;cAAEtB,IAAI,EAAEA,IAAI;cAAED,MAAM,EAAEA,MAAM;cAAEM,eAAe,EAAEH,mBAAmB;cAAEe,OAAO,EAAEA;YAAQ,CAAC,CAAC;QACrH;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EACD7B,eAAe,CAACqD,UAAU,GAAG,UAAUnD,OAAO,EAAEC,cAAc,EAAEC,aAAa,EAAEC,gBAAgB,EAAE;IAC7F,IAAID,aAAa,KAAK,KAAK,CAAC,EAAE;MAAEA,aAAa,GAAG,IAAI;IAAE;IACtD,IAAIC,gBAAgB,KAAK,KAAK,CAAC,EAAE;MAAEA,gBAAgB,GAAG,EAAE;IAAE;IAC1D,OAAO,IAAIL,eAAe,CAACE,OAAO,EAAEC,cAAc,EAAEC,aAAa,EAAEC,gBAAgB,CAAC;EACxF,CAAC;EACD,OAAOL,eAAe;AAC1B,CAAC,CAACH,SAAS,CAAE;AACb,eAAeG,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}