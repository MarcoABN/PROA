{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport PDFDocument from \"../PDFDocument\";\nimport PDFButton from \"./PDFButton\";\nimport PDFCheckBox from \"./PDFCheckBox\";\nimport PDFDropdown from \"./PDFDropdown\";\nimport PDFOptionList from \"./PDFOptionList\";\nimport PDFRadioGroup from \"./PDFRadioGroup\";\nimport PDFSignature from \"./PDFSignature\";\nimport PDFTextField from \"./PDFTextField\";\nimport { NoSuchFieldError, UnexpectedFieldTypeError, FieldAlreadyExistsError, InvalidFieldNamePartError } from \"../errors\";\nimport PDFFont from \"../PDFFont\";\nimport { StandardFonts } from \"../StandardFonts\";\nimport { rotateInPlace } from \"../operations\";\nimport { drawObject, popGraphicsState, pushGraphicsState, translate } from \"../operators\";\nimport { PDFAcroForm, PDFAcroCheckBox, PDFAcroComboBox, PDFAcroListBox, PDFAcroRadioButton, PDFAcroSignature, PDFAcroText, PDFAcroPushButton, PDFAcroNonTerminal, PDFDict, PDFRef, createPDFAcroFields, PDFName } from \"../../core\";\nimport { assertIs, Cache, assertOrUndefined } from \"../../utils\";\n/**\r\n * Represents the interactive form of a [[PDFDocument]].\r\n *\r\n * Interactive forms (sometimes called _AcroForms_) are collections of fields\r\n * designed to gather information from a user. A PDF document may contains any\r\n * number of fields that appear on various pages, all of which make up a single,\r\n * global interactive form spanning the entire document. This means that\r\n * instances of [[PDFDocument]] shall contain at most one [[PDFForm]].\r\n *\r\n * The fields of an interactive form are represented by [[PDFField]] instances.\r\n */\nvar PDFForm = /** @class */function () {\n  function PDFForm(acroForm, doc) {\n    var _this = this;\n    this.embedDefaultFont = function () {\n      return _this.doc.embedStandardFont(StandardFonts.Helvetica);\n    };\n    assertIs(acroForm, 'acroForm', [[PDFAcroForm, 'PDFAcroForm']]);\n    assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n    this.acroForm = acroForm;\n    this.doc = doc;\n    this.dirtyFields = new Set();\n    this.defaultFontCache = Cache.populatedBy(this.embedDefaultFont);\n  }\n  /**\r\n   * Returns `true` if this [[PDFForm]] has XFA data. Most PDFs with form\r\n   * fields do not use XFA as it is not widely supported by PDF readers.\r\n   *\r\n   * > `pdf-lib` does not support creation, modification, or reading of XFA\r\n   * > fields.\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * const form = pdfDoc.getForm()\r\n   * if (form.hasXFA()) console.log('PDF has XFA data')\r\n   * ```\r\n   * @returns Whether or not this form has XFA data.\r\n   */\n  PDFForm.prototype.hasXFA = function () {\n    return this.acroForm.dict.has(PDFName.of('XFA'));\n  };\n  /**\r\n   * Disconnect the XFA data from this [[PDFForm]] (if any exists). This will\r\n   * force readers to fallback to standard fields if the [[PDFDocument]]\r\n   * contains any. For example:\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * const form = pdfDoc.getForm()\r\n   * form.deleteXFA()\r\n   * ```\r\n   */\n  PDFForm.prototype.deleteXFA = function () {\n    this.acroForm.dict.delete(PDFName.of('XFA'));\n  };\n  /**\r\n   * Get all fields contained in this [[PDFForm]]. For example:\r\n   * ```js\r\n   * const form = pdfDoc.getForm()\r\n   * const fields = form.getFields()\r\n   * fields.forEach(field => {\r\n   *   const type = field.constructor.name\r\n   *   const name = field.getName()\r\n   *   console.log(`${type}: ${name}`)\r\n   * })\r\n   * ```\r\n   * @returns An array of all fields in this form.\r\n   */\n  PDFForm.prototype.getFields = function () {\n    var allFields = this.acroForm.getAllFields();\n    var fields = [];\n    for (var idx = 0, len = allFields.length; idx < len; idx++) {\n      var _a = allFields[idx],\n        acroField = _a[0],\n        ref = _a[1];\n      var field = convertToPDFField(acroField, ref, this.doc);\n      if (field) fields.push(field);\n    }\n    return fields;\n  };\n  /**\r\n   * Get the field in this [[PDFForm]] with the given name. For example:\r\n   * ```js\r\n   * const form = pdfDoc.getForm()\r\n   * const field = form.getFieldMaybe('Page1.Foo.Bar[0]')\r\n   * if (field) console.log('Field exists!')\r\n   * ```\r\n   * @param name A fully qualified field name.\r\n   * @returns The field with the specified name, if one exists.\r\n   */\n  PDFForm.prototype.getFieldMaybe = function (name) {\n    assertIs(name, 'name', ['string']);\n    var fields = this.getFields();\n    for (var idx = 0, len = fields.length; idx < len; idx++) {\n      var field = fields[idx];\n      if (field.getName() === name) return field;\n    }\n    return undefined;\n  };\n  /**\r\n   * Get the field in this [[PDFForm]] with the given name. For example:\r\n   * ```js\r\n   * const form = pdfDoc.getForm()\r\n   * const field = form.getField('Page1.Foo.Bar[0]')\r\n   * ```\r\n   * If no field exists with the provided name, an error will be thrown.\r\n   * @param name A fully qualified field name.\r\n   * @returns The field with the specified name.\r\n   */\n  PDFForm.prototype.getField = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getFieldMaybe(name);\n    if (field) return field;\n    throw new NoSuchFieldError(name);\n  };\n  /**\r\n   * Get the button field in this [[PDFForm]] with the given name. For example:\r\n   * ```js\r\n   * const form = pdfDoc.getForm()\r\n   * const button = form.getButton('Page1.Foo.Button[0]')\r\n   * ```\r\n   * An error will be thrown if no field exists with the provided name, or if\r\n   * the field exists but is not a button.\r\n   * @param name A fully qualified button name.\r\n   * @returns The button with the specified name.\r\n   */\n  PDFForm.prototype.getButton = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFButton) return field;\n    throw new UnexpectedFieldTypeError(name, PDFButton, field);\n  };\n  /**\r\n   * Get the check box field in this [[PDFForm]] with the given name.\r\n   * For example:\r\n   * ```js\r\n   * const form = pdfDoc.getForm()\r\n   * const checkBox = form.getCheckBox('Page1.Foo.CheckBox[0]')\r\n   * checkBox.check()\r\n   * ```\r\n   * An error will be thrown if no field exists with the provided name, or if\r\n   * the field exists but is not a check box.\r\n   * @param name A fully qualified check box name.\r\n   * @returns The check box with the specified name.\r\n   */\n  PDFForm.prototype.getCheckBox = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFCheckBox) return field;\n    throw new UnexpectedFieldTypeError(name, PDFCheckBox, field);\n  };\n  /**\r\n   * Get the dropdown field in this [[PDFForm]] with the given name.\r\n   * For example:\r\n   * ```js\r\n   * const form = pdfDoc.getForm()\r\n   * const dropdown = form.getDropdown('Page1.Foo.Dropdown[0]')\r\n   * const options = dropdown.getOptions()\r\n   * dropdown.select(options[0])\r\n   * ```\r\n   * An error will be thrown if no field exists with the provided name, or if\r\n   * the field exists but is not a dropdown.\r\n   * @param name A fully qualified dropdown name.\r\n   * @returns The dropdown with the specified name.\r\n   */\n  PDFForm.prototype.getDropdown = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFDropdown) return field;\n    throw new UnexpectedFieldTypeError(name, PDFDropdown, field);\n  };\n  /**\r\n   * Get the option list field in this [[PDFForm]] with the given name.\r\n   * For example:\r\n   * ```js\r\n   * const form = pdfDoc.getForm()\r\n   * const optionList = form.getOptionList('Page1.Foo.OptionList[0]')\r\n   * const options = optionList.getOptions()\r\n   * optionList.select(options[0])\r\n   * ```\r\n   * An error will be thrown if no field exists with the provided name, or if\r\n   * the field exists but is not an option list.\r\n   * @param name A fully qualified option list name.\r\n   * @returns The option list with the specified name.\r\n   */\n  PDFForm.prototype.getOptionList = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFOptionList) return field;\n    throw new UnexpectedFieldTypeError(name, PDFOptionList, field);\n  };\n  /**\r\n   * Get the radio group field in this [[PDFForm]] with the given name.\r\n   * For example:\r\n   * ```js\r\n   * const form = pdfDoc.getForm()\r\n   * const radioGroup = form.getRadioGroup('Page1.Foo.RadioGroup[0]')\r\n   * const options = radioGroup.getOptions()\r\n   * radioGroup.select(options[0])\r\n   * ```\r\n   * An error will be thrown if no field exists with the provided name, or if\r\n   * the field exists but is not a radio group.\r\n   * @param name A fully qualified radio group name.\r\n   * @returns The radio group with the specified name.\r\n   */\n  PDFForm.prototype.getRadioGroup = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFRadioGroup) return field;\n    throw new UnexpectedFieldTypeError(name, PDFRadioGroup, field);\n  };\n  /**\r\n   * Get the signature field in this [[PDFForm]] with the given name.\r\n   * For example:\r\n   * ```js\r\n   * const form = pdfDoc.getForm()\r\n   * const signature = form.getSignature('Page1.Foo.Signature[0]')\r\n   * ```\r\n   * An error will be thrown if no field exists with the provided name, or if\r\n   * the field exists but is not a signature.\r\n   * @param name A fully qualified signature name.\r\n   * @returns The signature with the specified name.\r\n   */\n  PDFForm.prototype.getSignature = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFSignature) return field;\n    throw new UnexpectedFieldTypeError(name, PDFSignature, field);\n  };\n  /**\r\n   * Get the text field in this [[PDFForm]] with the given name.\r\n   * For example:\r\n   * ```js\r\n   * const form = pdfDoc.getForm()\r\n   * const textField = form.getTextField('Page1.Foo.TextField[0]')\r\n   * textField.setText('Are you designed to act or to be acted upon?')\r\n   * ```\r\n   * An error will be thrown if no field exists with the provided name, or if\r\n   * the field exists but is not a text field.\r\n   * @param name A fully qualified text field name.\r\n   * @returns The text field with the specified name.\r\n   */\n  PDFForm.prototype.getTextField = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFTextField) return field;\n    throw new UnexpectedFieldTypeError(name, PDFTextField, field);\n  };\n  /**\r\n   * Create a new button field in this [[PDFForm]] with the given name.\r\n   * For example:\r\n   * ```js\r\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n   * const page = pdfDoc.addPage()\r\n   *\r\n   * const form = pdfDoc.getForm()\r\n   * const button = form.createButton('cool.new.button')\r\n   *\r\n   * button.addToPage('Do Stuff', font, page)\r\n   * ```\r\n   * An error will be thrown if a field already exists with the provided name.\r\n   * @param name The fully qualified name for the new button.\r\n   * @returns The new button field.\r\n   */\n  PDFForm.prototype.createButton = function (name) {\n    assertIs(name, 'name', ['string']);\n    var nameParts = splitFieldName(name);\n    var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n    var button = PDFAcroPushButton.create(this.doc.context);\n    button.setPartialName(nameParts.terminal);\n    addFieldToParent(parent, [button, button.ref], nameParts.terminal);\n    return PDFButton.of(button, button.ref, this.doc);\n  };\n  /**\r\n   * Create a new check box field in this [[PDFForm]] with the given name.\r\n   * For example:\r\n   * ```js\r\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n   * const page = pdfDoc.addPage()\r\n   *\r\n   * const form = pdfDoc.getForm()\r\n   * const checkBox = form.createCheckBox('cool.new.checkBox')\r\n   *\r\n   * checkBox.addToPage(page)\r\n   * ```\r\n   * An error will be thrown if a field already exists with the provided name.\r\n   * @param name The fully qualified name for the new check box.\r\n   * @returns The new check box field.\r\n   */\n  PDFForm.prototype.createCheckBox = function (name) {\n    assertIs(name, 'name', ['string']);\n    var nameParts = splitFieldName(name);\n    var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n    var checkBox = PDFAcroCheckBox.create(this.doc.context);\n    checkBox.setPartialName(nameParts.terminal);\n    addFieldToParent(parent, [checkBox, checkBox.ref], nameParts.terminal);\n    return PDFCheckBox.of(checkBox, checkBox.ref, this.doc);\n  };\n  /**\r\n   * Create a new dropdown field in this [[PDFForm]] with the given name.\r\n   * For example:\r\n   * ```js\r\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n   * const page = pdfDoc.addPage()\r\n   *\r\n   * const form = pdfDoc.getForm()\r\n   * const dropdown = form.createDropdown('cool.new.dropdown')\r\n   *\r\n   * dropdown.addToPage(font, page)\r\n   * ```\r\n   * An error will be thrown if a field already exists with the provided name.\r\n   * @param name The fully qualified name for the new dropdown.\r\n   * @returns The new dropdown field.\r\n   */\n  PDFForm.prototype.createDropdown = function (name) {\n    assertIs(name, 'name', ['string']);\n    var nameParts = splitFieldName(name);\n    var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n    var comboBox = PDFAcroComboBox.create(this.doc.context);\n    comboBox.setPartialName(nameParts.terminal);\n    addFieldToParent(parent, [comboBox, comboBox.ref], nameParts.terminal);\n    return PDFDropdown.of(comboBox, comboBox.ref, this.doc);\n  };\n  /**\r\n   * Create a new option list field in this [[PDFForm]] with the given name.\r\n   * For example:\r\n   * ```js\r\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n   * const page = pdfDoc.addPage()\r\n   *\r\n   * const form = pdfDoc.getForm()\r\n   * const optionList = form.createOptionList('cool.new.optionList')\r\n   *\r\n   * optionList.addToPage(font, page)\r\n   * ```\r\n   * An error will be thrown if a field already exists with the provided name.\r\n   * @param name The fully qualified name for the new option list.\r\n   * @returns The new option list field.\r\n   */\n  PDFForm.prototype.createOptionList = function (name) {\n    assertIs(name, 'name', ['string']);\n    var nameParts = splitFieldName(name);\n    var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n    var listBox = PDFAcroListBox.create(this.doc.context);\n    listBox.setPartialName(nameParts.terminal);\n    addFieldToParent(parent, [listBox, listBox.ref], nameParts.terminal);\n    return PDFOptionList.of(listBox, listBox.ref, this.doc);\n  };\n  /**\r\n   * Create a new radio group field in this [[PDFForm]] with the given name.\r\n   * For example:\r\n   * ```js\r\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n   * const page = pdfDoc.addPage()\r\n   *\r\n   * const form = pdfDoc.getForm()\r\n   * const radioGroup = form.createRadioGroup('cool.new.radioGroup')\r\n   *\r\n   * radioGroup.addOptionToPage('is-dog', page, { y: 0 })\r\n   * radioGroup.addOptionToPage('is-cat', page, { y: 75 })\r\n   * ```\r\n   * An error will be thrown if a field already exists with the provided name.\r\n   * @param name The fully qualified name for the new radio group.\r\n   * @returns The new radio group field.\r\n   */\n  PDFForm.prototype.createRadioGroup = function (name) {\n    assertIs(name, 'name', ['string']);\n    var nameParts = splitFieldName(name);\n    var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n    var radioButton = PDFAcroRadioButton.create(this.doc.context);\n    radioButton.setPartialName(nameParts.terminal);\n    addFieldToParent(parent, [radioButton, radioButton.ref], nameParts.terminal);\n    return PDFRadioGroup.of(radioButton, radioButton.ref, this.doc);\n  };\n  /**\r\n   * Create a new text field in this [[PDFForm]] with the given name.\r\n   * For example:\r\n   * ```js\r\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n   * const page = pdfDoc.addPage()\r\n   *\r\n   * const form = pdfDoc.getForm()\r\n   * const textField = form.createTextField('cool.new.textField')\r\n   *\r\n   * textField.addToPage(font, page)\r\n   * ```\r\n   * An error will be thrown if a field already exists with the provided name.\r\n   * @param name The fully qualified name for the new radio group.\r\n   * @returns The new radio group field.\r\n   */\n  PDFForm.prototype.createTextField = function (name) {\n    assertIs(name, 'name', ['string']);\n    var nameParts = splitFieldName(name);\n    var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n    var text = PDFAcroText.create(this.doc.context);\n    text.setPartialName(nameParts.terminal);\n    addFieldToParent(parent, [text, text.ref], nameParts.terminal);\n    return PDFTextField.of(text, text.ref, this.doc);\n  };\n  /**\r\n   * Flatten all fields in this [[PDFForm]].\r\n   *\r\n   * Flattening a form field will take the current appearance for each of that\r\n   * field's widgets and make them part of their page's content stream. All form\r\n   * fields and annotations associated are then removed. Note that once a form\r\n   * has been flattened its fields can no longer be accessed or edited.\r\n   *\r\n   * This operation is often used after filling form fields to ensure a\r\n   * consistent appearance across different PDF readers and/or printers.\r\n   * Another common use case is to copy a template document with form fields\r\n   * into another document. In this scenario you would load the template\r\n   * document, fill its fields, flatten it, and then copy its pages into the\r\n   * recipient document - the filled fields will be copied over.\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * const form = pdfDoc.getForm();\r\n   * form.flatten();\r\n   * ```\r\n   */\n  PDFForm.prototype.flatten = function (options) {\n    if (options === void 0) {\n      options = {\n        updateFieldAppearances: true\n      };\n    }\n    if (options.updateFieldAppearances) {\n      this.updateFieldAppearances();\n    }\n    var fields = this.getFields();\n    for (var i = 0, lenFields = fields.length; i < lenFields; i++) {\n      var field = fields[i];\n      var widgets = field.acroField.getWidgets();\n      for (var j = 0, lenWidgets = widgets.length; j < lenWidgets; j++) {\n        var widget = widgets[j];\n        var page = this.findWidgetPage(widget);\n        var widgetRef = this.findWidgetAppearanceRef(field, widget);\n        var xObjectKey = page.node.newXObject('FlatWidget', widgetRef);\n        var rectangle = widget.getRectangle();\n        var operators = __spreadArrays([pushGraphicsState(), translate(rectangle.x, rectangle.y)], rotateInPlace(__assign(__assign({}, rectangle), {\n          rotation: 0\n        })), [drawObject(xObjectKey), popGraphicsState()]).filter(Boolean);\n        page.pushOperators.apply(page, operators);\n      }\n      this.removeField(field);\n    }\n  };\n  /**\r\n   * Remove a field from this [[PDFForm]].\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * const form = pdfDoc.getForm();\r\n   * const ageField = form.getFields().find(x => x.getName() === 'Age');\r\n   * form.removeField(ageField);\r\n   * ```\r\n   */\n  PDFForm.prototype.removeField = function (field) {\n    var widgets = field.acroField.getWidgets();\n    var pages = new Set();\n    for (var i = 0, len = widgets.length; i < len; i++) {\n      var widget = widgets[i];\n      var widgetRef = this.findWidgetAppearanceRef(field, widget);\n      var page = this.findWidgetPage(widget);\n      pages.add(page);\n      page.node.removeAnnot(widgetRef);\n    }\n    pages.forEach(function (page) {\n      return page.node.removeAnnot(field.ref);\n    });\n    this.acroForm.removeField(field.acroField);\n    var fieldKids = field.acroField.normalizedEntries().Kids;\n    var kidsCount = fieldKids.size();\n    for (var childIndex = 0; childIndex < kidsCount; childIndex++) {\n      var child = fieldKids.get(childIndex);\n      if (child instanceof PDFRef) {\n        this.doc.context.delete(child);\n      }\n    }\n    this.doc.context.delete(field.ref);\n  };\n  /**\r\n   * Update the appearance streams for all widgets of all fields in this\r\n   * [[PDFForm]]. Appearance streams will only be created for a widget if it\r\n   * does not have any existing appearance streams, or the field's value has\r\n   * changed (e.g. by calling [[PDFTextField.setText]] or\r\n   * [[PDFDropdown.select]]).\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * const courier = await pdfDoc.embedFont(StandardFonts.Courier)\r\n   * const form = pdfDoc.getForm()\r\n   * form.updateFieldAppearances(courier)\r\n   * ```\r\n   *\r\n   * **IMPORTANT:** The default value for the `font` parameter is\r\n   * [[StandardFonts.Helvetica]]. Note that this is a WinAnsi font. This means\r\n   * that encoding errors will be thrown if any fields contain text with\r\n   * characters outside the WinAnsi character set (the latin alphabet).\r\n   *\r\n   * Embedding a custom font and passing that as the `font`\r\n   * parameter allows you to generate appearance streams with non WinAnsi\r\n   * characters (assuming your custom font supports them).\r\n   *\r\n   * > **NOTE:** The [[PDFDocument.save]] method will call this method to\r\n   * > update appearances automatically if a form was accessed via the\r\n   * > [[PDFDocument.getForm]] method prior to saving.\r\n   *\r\n   * @param font Optionally, the font to use when creating new appearances.\r\n   */\n  PDFForm.prototype.updateFieldAppearances = function (font) {\n    assertOrUndefined(font, 'font', [[PDFFont, 'PDFFont']]);\n    font = font !== null && font !== void 0 ? font : this.getDefaultFont();\n    var fields = this.getFields();\n    for (var idx = 0, len = fields.length; idx < len; idx++) {\n      var field = fields[idx];\n      if (field.needsAppearancesUpdate()) {\n        field.defaultUpdateAppearances(font);\n      }\n    }\n  };\n  /**\r\n   * Mark a field as dirty. This will cause its appearance streams to be\r\n   * updated by [[PDFForm.updateFieldAppearances]].\r\n   * ```js\r\n   * const form = pdfDoc.getForm()\r\n   * const field = form.getField('foo.bar')\r\n   * form.markFieldAsDirty(field.ref)\r\n   * ```\r\n   * @param fieldRef The reference to the field that should be marked.\r\n   */\n  PDFForm.prototype.markFieldAsDirty = function (fieldRef) {\n    assertOrUndefined(fieldRef, 'fieldRef', [[PDFRef, 'PDFRef']]);\n    this.dirtyFields.add(fieldRef);\n  };\n  /**\r\n   * Mark a field as dirty. This will cause its appearance streams to not be\r\n   * updated by [[PDFForm.updateFieldAppearances]].\r\n   * ```js\r\n   * const form = pdfDoc.getForm()\r\n   * const field = form.getField('foo.bar')\r\n   * form.markFieldAsClean(field.ref)\r\n   * ```\r\n   * @param fieldRef The reference to the field that should be marked.\r\n   */\n  PDFForm.prototype.markFieldAsClean = function (fieldRef) {\n    assertOrUndefined(fieldRef, 'fieldRef', [[PDFRef, 'PDFRef']]);\n    this.dirtyFields.delete(fieldRef);\n  };\n  /**\r\n   * Returns `true` is the specified field has been marked as dirty.\r\n   * ```js\r\n   * const form = pdfDoc.getForm()\r\n   * const field = form.getField('foo.bar')\r\n   * if (form.fieldIsDirty(field.ref)) console.log('Field is dirty')\r\n   * ```\r\n   * @param fieldRef The reference to the field that should be checked.\r\n   * @returns Whether or not the specified field is dirty.\r\n   */\n  PDFForm.prototype.fieldIsDirty = function (fieldRef) {\n    assertOrUndefined(fieldRef, 'fieldRef', [[PDFRef, 'PDFRef']]);\n    return this.dirtyFields.has(fieldRef);\n  };\n  PDFForm.prototype.getDefaultFont = function () {\n    return this.defaultFontCache.access();\n  };\n  PDFForm.prototype.findWidgetPage = function (widget) {\n    var pageRef = widget.P();\n    var page = this.doc.getPages().find(function (x) {\n      return x.ref === pageRef;\n    });\n    if (page === undefined) {\n      var widgetRef = this.doc.context.getObjectRef(widget.dict);\n      if (widgetRef === undefined) {\n        throw new Error('Could not find PDFRef for PDFObject');\n      }\n      page = this.doc.findPageForAnnotationRef(widgetRef);\n      if (page === undefined) {\n        throw new Error(\"Could not find page for PDFRef \" + widgetRef);\n      }\n    }\n    return page;\n  };\n  PDFForm.prototype.findWidgetAppearanceRef = function (field, widget) {\n    var _a;\n    var refOrDict = widget.getNormalAppearance();\n    if (refOrDict instanceof PDFDict && (field instanceof PDFCheckBox || field instanceof PDFRadioGroup)) {\n      var value = field.acroField.getValue();\n      var ref = (_a = refOrDict.get(value)) !== null && _a !== void 0 ? _a : refOrDict.get(PDFName.of('Off'));\n      if (ref instanceof PDFRef) {\n        refOrDict = ref;\n      }\n    }\n    if (!(refOrDict instanceof PDFRef)) {\n      var name_1 = field.getName();\n      throw new Error(\"Failed to extract appearance ref for: \" + name_1);\n    }\n    return refOrDict;\n  };\n  PDFForm.prototype.findOrCreateNonTerminals = function (partialNames) {\n    var nonTerminal = [this.acroForm];\n    for (var idx = 0, len = partialNames.length; idx < len; idx++) {\n      var namePart = partialNames[idx];\n      if (!namePart) throw new InvalidFieldNamePartError(namePart);\n      var parent_1 = nonTerminal[0],\n        parentRef = nonTerminal[1];\n      var res = this.findNonTerminal(namePart, parent_1);\n      if (res) {\n        nonTerminal = res;\n      } else {\n        var node = PDFAcroNonTerminal.create(this.doc.context);\n        node.setPartialName(namePart);\n        node.setParent(parentRef);\n        var nodeRef = this.doc.context.register(node.dict);\n        parent_1.addField(nodeRef);\n        nonTerminal = [node, nodeRef];\n      }\n    }\n    return nonTerminal;\n  };\n  PDFForm.prototype.findNonTerminal = function (partialName, parent) {\n    var fields = parent instanceof PDFAcroForm ? this.acroForm.getFields() : createPDFAcroFields(parent.Kids());\n    for (var idx = 0, len = fields.length; idx < len; idx++) {\n      var _a = fields[idx],\n        field = _a[0],\n        ref = _a[1];\n      if (field.getPartialName() === partialName) {\n        if (field instanceof PDFAcroNonTerminal) return [field, ref];\n        throw new FieldAlreadyExistsError(partialName);\n      }\n    }\n    return undefined;\n  };\n  /**\r\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\r\n   * > consider using the [[PDFDocument.getForm]] method, which will create an\r\n   * > instance of [[PDFForm]] for you.\r\n   *\r\n   * Create an instance of [[PDFForm]] from an existing acroForm and embedder\r\n   *\r\n   * @param acroForm The underlying `PDFAcroForm` for this form.\r\n   * @param doc The document to which the form will belong.\r\n   */\n  PDFForm.of = function (acroForm, doc) {\n    return new PDFForm(acroForm, doc);\n  };\n  return PDFForm;\n}();\nexport default PDFForm;\nvar convertToPDFField = function (field, ref, doc) {\n  if (field instanceof PDFAcroPushButton) return PDFButton.of(field, ref, doc);\n  if (field instanceof PDFAcroCheckBox) return PDFCheckBox.of(field, ref, doc);\n  if (field instanceof PDFAcroComboBox) return PDFDropdown.of(field, ref, doc);\n  if (field instanceof PDFAcroListBox) return PDFOptionList.of(field, ref, doc);\n  if (field instanceof PDFAcroText) return PDFTextField.of(field, ref, doc);\n  if (field instanceof PDFAcroRadioButton) {\n    return PDFRadioGroup.of(field, ref, doc);\n  }\n  if (field instanceof PDFAcroSignature) {\n    return PDFSignature.of(field, ref, doc);\n  }\n  return undefined;\n};\nvar splitFieldName = function (fullyQualifiedName) {\n  if (fullyQualifiedName.length === 0) {\n    throw new Error('PDF field names must not be empty strings');\n  }\n  var parts = fullyQualifiedName.split('.');\n  for (var idx = 0, len = parts.length; idx < len; idx++) {\n    if (parts[idx] === '') {\n      throw new Error(\"Periods in PDF field names must be separated by at least one character: \\\"\" + fullyQualifiedName + \"\\\"\");\n    }\n  }\n  if (parts.length === 1) return {\n    nonTerminal: [],\n    terminal: parts[0]\n  };\n  return {\n    nonTerminal: parts.slice(0, parts.length - 1),\n    terminal: parts[parts.length - 1]\n  };\n};\nvar addFieldToParent = function (_a, _b, partialName) {\n  var parent = _a[0],\n    parentRef = _a[1];\n  var field = _b[0],\n    fieldRef = _b[1];\n  var entries = parent.normalizedEntries();\n  var fields = createPDFAcroFields('Kids' in entries ? entries.Kids : entries.Fields);\n  for (var idx = 0, len = fields.length; idx < len; idx++) {\n    if (fields[idx][0].getPartialName() === partialName) {\n      throw new FieldAlreadyExistsError(partialName);\n    }\n  }\n  parent.addField(fieldRef);\n  field.setParent(parentRef);\n};\n//# sourceMappingURL=PDFForm.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}