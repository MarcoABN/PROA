{"ast":null,"code":"import UPNG from '@pdf-lib/upng';\nvar getImageType = function (ctype) {\n  if (ctype === 0) return PngType.Greyscale;\n  if (ctype === 2) return PngType.Truecolour;\n  if (ctype === 3) return PngType.IndexedColour;\n  if (ctype === 4) return PngType.GreyscaleWithAlpha;\n  if (ctype === 6) return PngType.TruecolourWithAlpha;\n  throw new Error(\"Unknown color type: \" + ctype);\n};\nvar splitAlphaChannel = function (rgbaChannel) {\n  var pixelCount = Math.floor(rgbaChannel.length / 4);\n  var rgbChannel = new Uint8Array(pixelCount * 3);\n  var alphaChannel = new Uint8Array(pixelCount * 1);\n  var rgbaOffset = 0;\n  var rgbOffset = 0;\n  var alphaOffset = 0;\n  while (rgbaOffset < rgbaChannel.length) {\n    rgbChannel[rgbOffset++] = rgbaChannel[rgbaOffset++];\n    rgbChannel[rgbOffset++] = rgbaChannel[rgbaOffset++];\n    rgbChannel[rgbOffset++] = rgbaChannel[rgbaOffset++];\n    alphaChannel[alphaOffset++] = rgbaChannel[rgbaOffset++];\n  }\n  return {\n    rgbChannel: rgbChannel,\n    alphaChannel: alphaChannel\n  };\n};\nexport var PngType;\n(function (PngType) {\n  PngType[\"Greyscale\"] = \"Greyscale\";\n  PngType[\"Truecolour\"] = \"Truecolour\";\n  PngType[\"IndexedColour\"] = \"IndexedColour\";\n  PngType[\"GreyscaleWithAlpha\"] = \"GreyscaleWithAlpha\";\n  PngType[\"TruecolourWithAlpha\"] = \"TruecolourWithAlpha\";\n})(PngType || (PngType = {}));\nvar PNG = /** @class */function () {\n  function PNG(pngData) {\n    var upng = UPNG.decode(pngData);\n    var frames = UPNG.toRGBA8(upng);\n    if (frames.length > 1) throw new Error(\"Animated PNGs are not supported\");\n    var frame = new Uint8Array(frames[0]);\n    var _a = splitAlphaChannel(frame),\n      rgbChannel = _a.rgbChannel,\n      alphaChannel = _a.alphaChannel;\n    this.rgbChannel = rgbChannel;\n    var hasAlphaValues = alphaChannel.some(function (a) {\n      return a < 255;\n    });\n    if (hasAlphaValues) this.alphaChannel = alphaChannel;\n    this.type = getImageType(upng.ctype);\n    this.width = upng.width;\n    this.height = upng.height;\n    this.bitsPerComponent = 8;\n  }\n  PNG.load = function (pngData) {\n    return new PNG(pngData);\n  };\n  return PNG;\n}();\nexport { PNG };","map":{"version":3,"names":["UPNG","getImageType","ctype","PngType","Greyscale","Truecolour","IndexedColour","GreyscaleWithAlpha","TruecolourWithAlpha","Error","splitAlphaChannel","rgbaChannel","pixelCount","Math","floor","length","rgbChannel","Uint8Array","alphaChannel","rgbaOffset","rgbOffset","alphaOffset","PNG","pngData","upng","decode","frames","toRGBA8","frame","_a","hasAlphaValues","some","a","type","width","height","bitsPerComponent","load"],"sources":["E:/PROA/frontPROA/node_modules/pdf-lib/es/utils/png.js"],"sourcesContent":["import UPNG from '@pdf-lib/upng';\nvar getImageType = function (ctype) {\n    if (ctype === 0)\n        return PngType.Greyscale;\n    if (ctype === 2)\n        return PngType.Truecolour;\n    if (ctype === 3)\n        return PngType.IndexedColour;\n    if (ctype === 4)\n        return PngType.GreyscaleWithAlpha;\n    if (ctype === 6)\n        return PngType.TruecolourWithAlpha;\n    throw new Error(\"Unknown color type: \" + ctype);\n};\nvar splitAlphaChannel = function (rgbaChannel) {\n    var pixelCount = Math.floor(rgbaChannel.length / 4);\n    var rgbChannel = new Uint8Array(pixelCount * 3);\n    var alphaChannel = new Uint8Array(pixelCount * 1);\n    var rgbaOffset = 0;\n    var rgbOffset = 0;\n    var alphaOffset = 0;\n    while (rgbaOffset < rgbaChannel.length) {\n        rgbChannel[rgbOffset++] = rgbaChannel[rgbaOffset++];\n        rgbChannel[rgbOffset++] = rgbaChannel[rgbaOffset++];\n        rgbChannel[rgbOffset++] = rgbaChannel[rgbaOffset++];\n        alphaChannel[alphaOffset++] = rgbaChannel[rgbaOffset++];\n    }\n    return { rgbChannel: rgbChannel, alphaChannel: alphaChannel };\n};\nexport var PngType;\n(function (PngType) {\n    PngType[\"Greyscale\"] = \"Greyscale\";\n    PngType[\"Truecolour\"] = \"Truecolour\";\n    PngType[\"IndexedColour\"] = \"IndexedColour\";\n    PngType[\"GreyscaleWithAlpha\"] = \"GreyscaleWithAlpha\";\n    PngType[\"TruecolourWithAlpha\"] = \"TruecolourWithAlpha\";\n})(PngType || (PngType = {}));\nvar PNG = /** @class */ (function () {\n    function PNG(pngData) {\n        var upng = UPNG.decode(pngData);\n        var frames = UPNG.toRGBA8(upng);\n        if (frames.length > 1)\n            throw new Error(\"Animated PNGs are not supported\");\n        var frame = new Uint8Array(frames[0]);\n        var _a = splitAlphaChannel(frame), rgbChannel = _a.rgbChannel, alphaChannel = _a.alphaChannel;\n        this.rgbChannel = rgbChannel;\n        var hasAlphaValues = alphaChannel.some(function (a) { return a < 255; });\n        if (hasAlphaValues)\n            this.alphaChannel = alphaChannel;\n        this.type = getImageType(upng.ctype);\n        this.width = upng.width;\n        this.height = upng.height;\n        this.bitsPerComponent = 8;\n    }\n    PNG.load = function (pngData) { return new PNG(pngData); };\n    return PNG;\n}());\nexport { PNG };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}