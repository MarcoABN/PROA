{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport { ReparseError } from \"../errors\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFNumber from \"../objects/PDFNumber\";\nimport PDFRef from \"../objects/PDFRef\";\nimport ByteStream from \"./ByteStream\";\nimport PDFObjectParser from \"./PDFObjectParser\";\nimport { waitForTick } from \"../../utils\";\nvar PDFObjectStreamParser = /** @class */function (_super) {\n  __extends(PDFObjectStreamParser, _super);\n  function PDFObjectStreamParser(rawStream, shouldWaitForTick) {\n    var _this = _super.call(this, ByteStream.fromPDFRawStream(rawStream), rawStream.dict.context) || this;\n    var dict = rawStream.dict;\n    _this.alreadyParsed = false;\n    _this.shouldWaitForTick = shouldWaitForTick || function () {\n      return false;\n    };\n    _this.firstOffset = dict.lookup(PDFName.of('First'), PDFNumber).asNumber();\n    _this.objectCount = dict.lookup(PDFName.of('N'), PDFNumber).asNumber();\n    return _this;\n  }\n  PDFObjectStreamParser.prototype.parseIntoContext = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var offsetsAndObjectNumbers, idx, len, _a, objectNumber, offset, object, ref;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (this.alreadyParsed) {\n              throw new ReparseError('PDFObjectStreamParser', 'parseIntoContext');\n            }\n            this.alreadyParsed = true;\n            offsetsAndObjectNumbers = this.parseOffsetsAndObjectNumbers();\n            idx = 0, len = offsetsAndObjectNumbers.length;\n            _b.label = 1;\n          case 1:\n            if (!(idx < len)) return [3 /*break*/, 4];\n            _a = offsetsAndObjectNumbers[idx], objectNumber = _a.objectNumber, offset = _a.offset;\n            this.bytes.moveTo(this.firstOffset + offset);\n            object = this.parseObject();\n            ref = PDFRef.of(objectNumber, 0);\n            this.context.assign(ref, object);\n            if (!this.shouldWaitForTick()) return [3 /*break*/, 3];\n            return [4 /*yield*/, waitForTick()];\n          case 2:\n            _b.sent();\n            _b.label = 3;\n          case 3:\n            idx++;\n            return [3 /*break*/, 1];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  PDFObjectStreamParser.prototype.parseOffsetsAndObjectNumbers = function () {\n    var offsetsAndObjectNumbers = [];\n    for (var idx = 0, len = this.objectCount; idx < len; idx++) {\n      this.skipWhitespaceAndComments();\n      var objectNumber = this.parseRawInt();\n      this.skipWhitespaceAndComments();\n      var offset = this.parseRawInt();\n      offsetsAndObjectNumbers.push({\n        objectNumber: objectNumber,\n        offset: offset\n      });\n    }\n    return offsetsAndObjectNumbers;\n  };\n  PDFObjectStreamParser.forStream = function (rawStream, shouldWaitForTick) {\n    return new PDFObjectStreamParser(rawStream, shouldWaitForTick);\n  };\n  return PDFObjectStreamParser;\n}(PDFObjectParser);\nexport default PDFObjectStreamParser;\n//# sourceMappingURL=PDFObjectStreamParser.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}