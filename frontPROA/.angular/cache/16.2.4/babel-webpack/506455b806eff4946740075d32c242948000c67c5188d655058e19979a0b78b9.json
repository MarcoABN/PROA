{"ast":null,"code":"import PDFArray from \"../objects/PDFArray\";\nimport PDFBool from \"../objects/PDFBool\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFNumber from \"../objects/PDFNumber\";\nimport { assertEachIs, assertInteger, assertIsOneOf, assertRange } from \"../../utils\";\nvar asEnum = function (rawValue, enumType) {\n  if (rawValue === undefined) return undefined;\n  return enumType[rawValue];\n};\nexport var NonFullScreenPageMode = /*#__PURE__*/function (NonFullScreenPageMode) {\n  /**\r\n   * After exiting FullScreen mode, neither the document outline nor thumbnail\r\n   * images should be visible.\r\n   */\n  NonFullScreenPageMode[\"UseNone\"] = \"UseNone\";\n  /** After exiting FullScreen mode, the document outline should be visible. */\n  NonFullScreenPageMode[\"UseOutlines\"] = \"UseOutlines\";\n  /** After exiting FullScreen mode, thumbnail images should be visible. */\n  NonFullScreenPageMode[\"UseThumbs\"] = \"UseThumbs\";\n  /**\r\n   * After exiting FullScreen mode, the optional content group panel should be\r\n   * visible.\r\n   */\n  NonFullScreenPageMode[\"UseOC\"] = \"UseOC\";\n  return NonFullScreenPageMode;\n}(NonFullScreenPageMode || {});\nexport var ReadingDirection = /*#__PURE__*/function (ReadingDirection) {\n  /** The predominant reading order is Left to Right. */\n  ReadingDirection[\"L2R\"] = \"L2R\";\n  /**\r\n   * The predominant reading order is Right to left (including vertical writing\r\n   * systems, such as Chinese, Japanese and Korean).\r\n   */\n  ReadingDirection[\"R2L\"] = \"R2L\";\n  return ReadingDirection;\n}(ReadingDirection || {});\nexport var PrintScaling = /*#__PURE__*/function (PrintScaling) {\n  /** No page scaling. */\n  PrintScaling[\"None\"] = \"None\";\n  /* Use the PDF reader's default print scaling. */\n  PrintScaling[\"AppDefault\"] = \"AppDefault\";\n  return PrintScaling;\n}(PrintScaling || {});\nexport var Duplex = /*#__PURE__*/function (Duplex) {\n  /** The PDF reader should print single-sided. */\n  Duplex[\"Simplex\"] = \"Simplex\";\n  /**\r\n   * The PDF reader should print double sided and flip on the short edge of the\r\n   * sheet.\r\n   */\n  Duplex[\"DuplexFlipShortEdge\"] = \"DuplexFlipShortEdge\";\n  /**\r\n   * The PDF reader should print double sided and flip on the long edge of the\r\n   * sheet.\r\n   */\n  Duplex[\"DuplexFlipLongEdge\"] = \"DuplexFlipLongEdge\";\n  return Duplex;\n}(Duplex || {});\nvar ViewerPreferences = /** @class */function () {\n  /** @ignore */\n  function ViewerPreferences(dict) {\n    this.dict = dict;\n  }\n  ViewerPreferences.prototype.lookupBool = function (key) {\n    var returnObj = this.dict.lookup(PDFName.of(key));\n    if (returnObj instanceof PDFBool) return returnObj;\n    return undefined;\n  };\n  ViewerPreferences.prototype.lookupName = function (key) {\n    var returnObj = this.dict.lookup(PDFName.of(key));\n    if (returnObj instanceof PDFName) return returnObj;\n    return undefined;\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.HideToolbar = function () {\n    return this.lookupBool('HideToolbar');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.HideMenubar = function () {\n    return this.lookupBool('HideMenubar');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.HideWindowUI = function () {\n    return this.lookupBool('HideWindowUI');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.FitWindow = function () {\n    return this.lookupBool('FitWindow');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.CenterWindow = function () {\n    return this.lookupBool('CenterWindow');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.DisplayDocTitle = function () {\n    return this.lookupBool('DisplayDocTitle');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.NonFullScreenPageMode = function () {\n    return this.lookupName('NonFullScreenPageMode');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.Direction = function () {\n    return this.lookupName('Direction');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.PrintScaling = function () {\n    return this.lookupName('PrintScaling');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.Duplex = function () {\n    return this.lookupName('Duplex');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.PickTrayByPDFSize = function () {\n    return this.lookupBool('PickTrayByPDFSize');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.PrintPageRange = function () {\n    var PrintPageRange = this.dict.lookup(PDFName.of('PrintPageRange'));\n    if (PrintPageRange instanceof PDFArray) return PrintPageRange;\n    return undefined;\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.NumCopies = function () {\n    var NumCopies = this.dict.lookup(PDFName.of('NumCopies'));\n    if (NumCopies instanceof PDFNumber) return NumCopies;\n    return undefined;\n  };\n  /**\r\n   * Returns `true` if PDF readers should hide the toolbar menus when displaying\r\n   * this document.\r\n   * @returns Whether or not toolbars should be hidden.\r\n   */\n  ViewerPreferences.prototype.getHideToolbar = function () {\n    var _a, _b;\n    return (_b = (_a = this.HideToolbar()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n  };\n  /**\r\n   * Returns `true` if PDF readers should hide the menu bar when displaying this\r\n   * document.\r\n   * @returns Whether or not the menu bar should be hidden.\r\n   */\n  ViewerPreferences.prototype.getHideMenubar = function () {\n    var _a, _b;\n    return (_b = (_a = this.HideMenubar()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n  };\n  /**\r\n   * Returns `true` if PDF readers should hide the user interface elements in\r\n   * the document's window (such as scroll bars and navigation controls),\r\n   * leaving only the document's contents displayed.\r\n   * @returns Whether or not user interface elements should be hidden.\r\n   */\n  ViewerPreferences.prototype.getHideWindowUI = function () {\n    var _a, _b;\n    return (_b = (_a = this.HideWindowUI()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n  };\n  /**\r\n   * Returns `true` if PDF readers should resize the document's window to fit\r\n   * the size of the first displayed page.\r\n   * @returns Whether or not the window should be resized to fit.\r\n   */\n  ViewerPreferences.prototype.getFitWindow = function () {\n    var _a, _b;\n    return (_b = (_a = this.FitWindow()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n  };\n  /**\r\n   * Returns `true` if PDF readers should position the document's window in the\r\n   * center of the screen.\r\n   * @returns Whether or not to center the document window.\r\n   */\n  ViewerPreferences.prototype.getCenterWindow = function () {\n    var _a, _b;\n    return (_b = (_a = this.CenterWindow()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n  };\n  /**\r\n   * Returns `true` if the window's title bar should display the document\r\n   * `Title`, taken from the document metadata (see [[PDFDocument.getTitle]]).\r\n   * Returns `false` if the title bar should instead display the filename of the\r\n   * PDF file.\r\n   * @returns Whether to display the document title.\r\n   */\n  ViewerPreferences.prototype.getDisplayDocTitle = function () {\n    var _a, _b;\n    return (_b = (_a = this.DisplayDocTitle()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n  };\n  /**\r\n   * Returns the page mode, which tells the PDF reader how to display the\r\n   * document after exiting full-screen mode.\r\n   * @returns The page mode after exiting full-screen mode.\r\n   */\n  ViewerPreferences.prototype.getNonFullScreenPageMode = function () {\n    var _a, _b;\n    var mode = (_a = this.NonFullScreenPageMode()) === null || _a === void 0 ? void 0 : _a.decodeText();\n    return (_b = asEnum(mode, NonFullScreenPageMode)) !== null && _b !== void 0 ? _b : NonFullScreenPageMode.UseNone;\n  };\n  /**\r\n   * Returns the predominant reading order for text.\r\n   * @returns The text reading order.\r\n   */\n  ViewerPreferences.prototype.getReadingDirection = function () {\n    var _a, _b;\n    var direction = (_a = this.Direction()) === null || _a === void 0 ? void 0 : _a.decodeText();\n    return (_b = asEnum(direction, ReadingDirection)) !== null && _b !== void 0 ? _b : ReadingDirection.L2R;\n  };\n  /**\r\n   * Returns the page scaling option that the PDF reader should select when the\r\n   * print dialog is displayed.\r\n   * @returns The page scaling option.\r\n   */\n  ViewerPreferences.prototype.getPrintScaling = function () {\n    var _a, _b;\n    var scaling = (_a = this.PrintScaling()) === null || _a === void 0 ? void 0 : _a.decodeText();\n    return (_b = asEnum(scaling, PrintScaling)) !== null && _b !== void 0 ? _b : PrintScaling.AppDefault;\n  };\n  /**\r\n   * Returns the paper handling option that should be used when printing the\r\n   * file from the print dialog.\r\n   * @returns The paper handling option.\r\n   */\n  ViewerPreferences.prototype.getDuplex = function () {\n    var _a;\n    var duplex = (_a = this.Duplex()) === null || _a === void 0 ? void 0 : _a.decodeText();\n    return asEnum(duplex, Duplex);\n  };\n  /**\r\n   * Returns `true` if the PDF page size should be used to select the input\r\n   * paper tray.\r\n   * @returns Whether or not the PDF page size should be used to select the\r\n   *          input paper tray.\r\n   */\n  ViewerPreferences.prototype.getPickTrayByPDFSize = function () {\n    var _a;\n    return (_a = this.PickTrayByPDFSize()) === null || _a === void 0 ? void 0 : _a.asBoolean();\n  };\n  /**\r\n   * Returns an array of page number ranges, which are the values used to\r\n   * initialize the print dialog box when the file is printed. Each range\r\n   * specifies the first (`start`) and last (`end`) pages in a sub-range of\r\n   * pages to be printed. The first page of the PDF file is denoted by 0.\r\n   * For example:\r\n   * ```js\r\n   * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\r\n   * const includesPage3 = viewerPrefs\r\n   *   .getPrintRanges()\r\n   *   .some(pr => pr.start =< 2 && pr.end >= 2)\r\n   * if (includesPage3) console.log('printRange includes page 3')\r\n   * ```\r\n   * @returns An array of objects, each with the properties `start` and `end`,\r\n   *          denoting page indices. If not, specified an empty array is\r\n   *          returned.\r\n   */\n  ViewerPreferences.prototype.getPrintPageRange = function () {\n    var rng = this.PrintPageRange();\n    if (!rng) return [];\n    var pageRanges = [];\n    for (var i = 0; i < rng.size(); i += 2) {\n      // Despite the spec clearly stating that \"The first page of the PDF file\n      // shall be donoted by 1\", several test PDFs (spec 1.7) created in\n      // Acrobat XI 11.0 and also read with Reader DC 2020.013 indicate this is\n      // actually a 0 based index.\n      var start = rng.lookup(i, PDFNumber).asNumber();\n      var end = rng.lookup(i + 1, PDFNumber).asNumber();\n      pageRanges.push({\n        start: start,\n        end: end\n      });\n    }\n    return pageRanges;\n  };\n  /**\r\n   * Returns the number of copies to be printed when the print dialog is opened\r\n   * for this document.\r\n   * @returns The default number of copies to be printed.\r\n   */\n  ViewerPreferences.prototype.getNumCopies = function () {\n    var _a, _b;\n    return (_b = (_a = this.NumCopies()) === null || _a === void 0 ? void 0 : _a.asNumber()) !== null && _b !== void 0 ? _b : 1;\n  };\n  /**\r\n   * Choose whether the PDF reader's toolbars should be hidden while the\r\n   * document is active.\r\n   * @param hideToolbar `true` if the toolbar should be hidden.\r\n   */\n  ViewerPreferences.prototype.setHideToolbar = function (hideToolbar) {\n    var HideToolbar = this.dict.context.obj(hideToolbar);\n    this.dict.set(PDFName.of('HideToolbar'), HideToolbar);\n  };\n  /**\r\n   * Choose whether the PDF reader's menu bar should be hidden while the\r\n   * document is active.\r\n   * @param hideMenubar `true` if the menu bar should be hidden.\r\n   */\n  ViewerPreferences.prototype.setHideMenubar = function (hideMenubar) {\n    var HideMenubar = this.dict.context.obj(hideMenubar);\n    this.dict.set(PDFName.of('HideMenubar'), HideMenubar);\n  };\n  /**\r\n   * Choose whether the PDF reader should hide user interface elements in the\r\n   * document's window (such as scroll bars and navigation controls), leaving\r\n   * only the document's contents displayed.\r\n   * @param hideWindowUI `true` if the user interface elements should be hidden.\r\n   */\n  ViewerPreferences.prototype.setHideWindowUI = function (hideWindowUI) {\n    var HideWindowUI = this.dict.context.obj(hideWindowUI);\n    this.dict.set(PDFName.of('HideWindowUI'), HideWindowUI);\n  };\n  /**\r\n   * Choose whether the PDF reader should resize the document's window to fit\r\n   * the size of the first displayed page.\r\n   * @param fitWindow `true` if the window should be resized.\r\n   */\n  ViewerPreferences.prototype.setFitWindow = function (fitWindow) {\n    var FitWindow = this.dict.context.obj(fitWindow);\n    this.dict.set(PDFName.of('FitWindow'), FitWindow);\n  };\n  /**\r\n   * Choose whether the PDF reader should position the document's window in the\r\n   * center of the screen.\r\n   * @param centerWindow `true` if the window should be centered.\r\n   */\n  ViewerPreferences.prototype.setCenterWindow = function (centerWindow) {\n    var CenterWindow = this.dict.context.obj(centerWindow);\n    this.dict.set(PDFName.of('CenterWindow'), CenterWindow);\n  };\n  /**\r\n   * Choose whether the window's title bar should display the document `Title`\r\n   * taken from the document metadata (see [[PDFDocument.setTitle]]). If\r\n   * `false`, the title bar should instead display the PDF filename.\r\n   * @param displayTitle `true` if the document title should be displayed.\r\n   */\n  ViewerPreferences.prototype.setDisplayDocTitle = function (displayTitle) {\n    var DisplayDocTitle = this.dict.context.obj(displayTitle);\n    this.dict.set(PDFName.of('DisplayDocTitle'), DisplayDocTitle);\n  };\n  /**\r\n   * Choose how the PDF reader should display the document upon exiting\r\n   * full-screen mode. This entry is meaningful only if the value of the\r\n   * `PageMode` entry in the document's [[PDFCatalog]] is `FullScreen`.\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * import { PDFDocument, NonFullScreenPageMode, PDFName } from 'pdf-lib'\r\n   *\r\n   * const pdfDoc = await PDFDocument.create()\r\n   *\r\n   * // Set the PageMode\r\n   * pdfDoc.catalog.set(PDFName.of('PageMode'),PDFName.of('FullScreen'))\r\n   *\r\n   * // Set what happens when full-screen is closed\r\n   * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\r\n   * viewerPrefs.setNonFullScreenPageMode(NonFullScreenPageMode.UseOutlines)\r\n   * ```\r\n   *\r\n   * @param nonFullScreenPageMode How the document should be displayed upon\r\n   *                              exiting full screen mode.\r\n   */\n  ViewerPreferences.prototype.setNonFullScreenPageMode = function (nonFullScreenPageMode) {\n    assertIsOneOf(nonFullScreenPageMode, 'nonFullScreenPageMode', NonFullScreenPageMode);\n    var mode = PDFName.of(nonFullScreenPageMode);\n    this.dict.set(PDFName.of('NonFullScreenPageMode'), mode);\n  };\n  /**\r\n   * Choose the predominant reading order for text.\r\n   *\r\n   * This entry has no direct effect on the document's contents or page\r\n   * numbering, but may be used to determine the relative positioning of pages\r\n   * when displayed side by side or printed n-up.\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * import { PDFDocument, ReadingDirection } from 'pdf-lib'\r\n   *\r\n   * const pdfDoc = await PDFDocument.create()\r\n   * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\r\n   * viewerPrefs.setReadingDirection(ReadingDirection.R2L)\r\n   * ```\r\n   *\r\n   * @param readingDirection The reading order for text.\r\n   */\n  ViewerPreferences.prototype.setReadingDirection = function (readingDirection) {\n    assertIsOneOf(readingDirection, 'readingDirection', ReadingDirection);\n    var direction = PDFName.of(readingDirection);\n    this.dict.set(PDFName.of('Direction'), direction);\n  };\n  /**\r\n   * Choose the page scaling option that should be selected when a print dialog\r\n   * is displayed for this document.\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * import { PDFDocument, PrintScaling } from 'pdf-lib'\r\n   *\r\n   * const pdfDoc = await PDFDocument.create()\r\n   * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\r\n   * viewerPrefs.setPrintScaling(PrintScaling.None)\r\n   * ```\r\n   *\r\n   * @param printScaling The print scaling option.\r\n   */\n  ViewerPreferences.prototype.setPrintScaling = function (printScaling) {\n    assertIsOneOf(printScaling, 'printScaling', PrintScaling);\n    var scaling = PDFName.of(printScaling);\n    this.dict.set(PDFName.of('PrintScaling'), scaling);\n  };\n  /**\r\n   * Choose the paper handling option that should be selected by default in the\r\n   * print dialog.\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * import { PDFDocument, Duplex } from 'pdf-lib'\r\n   *\r\n   * const pdfDoc = await PDFDocument.create()\r\n   * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\r\n   * viewerPrefs.setDuplex(Duplex.DuplexFlipShortEdge)\r\n   * ```\r\n   *\r\n   * @param duplex The double or single sided printing option.\r\n   */\n  ViewerPreferences.prototype.setDuplex = function (duplex) {\n    assertIsOneOf(duplex, 'duplex', Duplex);\n    var dup = PDFName.of(duplex);\n    this.dict.set(PDFName.of('Duplex'), dup);\n  };\n  /**\r\n   * Choose whether the PDF document's page size should be used to select the\r\n   * input paper tray when printing. This setting influences only the preset\r\n   * values used to populate the print dialog presented by a PDF reader.\r\n   *\r\n   * If PickTrayByPDFSize is true, the check box in the print dialog associated\r\n   * with input paper tray should be checked. This setting has no effect on\r\n   * operating systems that do not provide the ability to pick the input tray\r\n   * by size.\r\n   *\r\n   * @param pickTrayByPDFSize `true` if the document's page size should be used\r\n   *                          to select the input paper tray.\r\n   */\n  ViewerPreferences.prototype.setPickTrayByPDFSize = function (pickTrayByPDFSize) {\n    var PickTrayByPDFSize = this.dict.context.obj(pickTrayByPDFSize);\n    this.dict.set(PDFName.of('PickTrayByPDFSize'), PickTrayByPDFSize);\n  };\n  /**\r\n   * Choose the page numbers used to initialize the print dialog box when the\r\n   * file is printed. The first page of the PDF file is denoted by 0.\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * import { PDFDocument } from 'pdf-lib'\r\n   *\r\n   * const pdfDoc = await PDFDocument.create()\r\n   * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\r\n   *\r\n   * // We can set the default print range to only the first page\r\n   * viewerPrefs.setPrintPageRange({ start: 0, end: 0 })\r\n   *\r\n   * // Or we can supply noncontiguous ranges (e.g. pages 1, 3, and 5-7)\r\n   * viewerPrefs.setPrintPageRange([\r\n   *   { start: 0, end: 0 },\r\n   *   { start: 2, end: 2 },\r\n   *   { start: 4, end: 6 },\r\n   * ])\r\n   * ```\r\n   *\r\n   * @param printPageRange An object or array of objects, each with the\r\n   *                       properties `start` and `end`, denoting a range of\r\n   *                       page indices.\r\n   */\n  ViewerPreferences.prototype.setPrintPageRange = function (printPageRange) {\n    if (!Array.isArray(printPageRange)) printPageRange = [printPageRange];\n    var flatRange = [];\n    for (var idx = 0, len = printPageRange.length; idx < len; idx++) {\n      flatRange.push(printPageRange[idx].start);\n      flatRange.push(printPageRange[idx].end);\n    }\n    assertEachIs(flatRange, 'printPageRange', ['number']);\n    var pageRanges = this.dict.context.obj(flatRange);\n    this.dict.set(PDFName.of('PrintPageRange'), pageRanges);\n  };\n  /**\r\n   * Choose the default number of copies to be printed when the print dialog is\r\n   * opened for this file.\r\n   * @param numCopies The default number of copies.\r\n   */\n  ViewerPreferences.prototype.setNumCopies = function (numCopies) {\n    assertRange(numCopies, 'numCopies', 1, Number.MAX_VALUE);\n    assertInteger(numCopies, 'numCopies');\n    var NumCopies = this.dict.context.obj(numCopies);\n    this.dict.set(PDFName.of('NumCopies'), NumCopies);\n  };\n  /** @ignore */\n  ViewerPreferences.fromDict = function (dict) {\n    return new ViewerPreferences(dict);\n  };\n  /** @ignore */\n  ViewerPreferences.create = function (context) {\n    var dict = context.obj({});\n    return new ViewerPreferences(dict);\n  };\n  return ViewerPreferences;\n}();\nexport default ViewerPreferences;\n//# sourceMappingURL=ViewerPreferences.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}