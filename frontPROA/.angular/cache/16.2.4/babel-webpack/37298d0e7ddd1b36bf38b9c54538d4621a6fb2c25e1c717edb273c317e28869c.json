{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport PDFDocument from \"./PDFDocument\";\nimport { CustomFontEmbedder, PDFRef, StandardFontEmbedder } from \"../core\";\nimport { assertIs, assertOrUndefined } from \"../utils\";\n/**\n * Represents a font that has been embedded in a [[PDFDocument]].\n */\nvar PDFFont = /** @class */function () {\n  function PDFFont(ref, doc, embedder) {\n    this.modified = true;\n    assertIs(ref, 'ref', [[PDFRef, 'PDFRef']]);\n    assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n    assertIs(embedder, 'embedder', [[CustomFontEmbedder, 'CustomFontEmbedder'], [StandardFontEmbedder, 'StandardFontEmbedder']]);\n    this.ref = ref;\n    this.doc = doc;\n    this.name = embedder.fontName;\n    this.embedder = embedder;\n  }\n  /**\n   * > **NOTE:** You probably don't need to call this method directly. The\n   * > [[PDFPage.drawText]] method will automatically encode the text it is\n   * > given.\n   *\n   * Encodes a string of text in this font.\n   *\n   * @param text The text to be encoded.\n   * @returns The encoded text as a hex string.\n   */\n  PDFFont.prototype.encodeText = function (text) {\n    assertIs(text, 'text', ['string']);\n    this.modified = true;\n    return this.embedder.encodeText(text);\n  };\n  /**\n   * Measure the width of a string of text drawn in this font at a given size.\n   * For example:\n   * ```js\n   * const width = font.widthOfTextAtSize('Foo Bar Qux Baz', 36)\n   * ```\n   * @param text The string of text to be measured.\n   * @param size The font size to be used for this measurement.\n   * @returns The width of the string of text when drawn in this font at the\n   *          given size.\n   */\n  PDFFont.prototype.widthOfTextAtSize = function (text, size) {\n    assertIs(text, 'text', ['string']);\n    assertIs(size, 'size', ['number']);\n    return this.embedder.widthOfTextAtSize(text, size);\n  };\n  /**\n   * Measure the height of this font at a given size. For example:\n   * ```js\n   * const height = font.heightAtSize(24)\n   * ```\n   *\n   * The `options.descender` value controls whether or not the font's\n   * descender is included in the height calculation.\n   *\n   * @param size The font size to be used for this measurement.\n   * @param options The options to be used when computing this measurement.\n   * @returns The height of this font at the given size.\n   */\n  PDFFont.prototype.heightAtSize = function (size, options) {\n    var _a;\n    assertIs(size, 'size', ['number']);\n    assertOrUndefined(options === null || options === void 0 ? void 0 : options.descender, 'options.descender', ['boolean']);\n    return this.embedder.heightOfFontAtSize(size, {\n      descender: (_a = options === null || options === void 0 ? void 0 : options.descender) !== null && _a !== void 0 ? _a : true\n    });\n  };\n  /**\n   * Compute the font size at which this font is a given height. For example:\n   * ```js\n   * const fontSize = font.sizeAtHeight(12)\n   * ```\n   * @param height The height to be used for this calculation.\n   * @returns The font size at which this font is the given height.\n   */\n  PDFFont.prototype.sizeAtHeight = function (height) {\n    assertIs(height, 'height', ['number']);\n    return this.embedder.sizeOfFontAtHeight(height);\n  };\n  /**\n   * Get the set of unicode code points that can be represented by this font.\n   * @returns The set of unicode code points supported by this font.\n   */\n  PDFFont.prototype.getCharacterSet = function () {\n    if (this.embedder instanceof StandardFontEmbedder) {\n      return this.embedder.encoding.supportedCodePoints;\n    } else {\n      return this.embedder.font.characterSet;\n    }\n  };\n  /**\n   * > **NOTE:** You probably don't need to call this method directly. The\n   * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\n   * > automatically ensure all fonts get embedded.\n   *\n   * Embed this font in its document.\n   *\n   * @returns Resolves when the embedding is complete.\n   */\n  PDFFont.prototype.embed = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.modified) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.embedder.embedIntoContext(this.doc.context, this.ref)];\n          case 1:\n            _a.sent();\n            this.modified = false;\n            _a.label = 2;\n          case 2:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFDocument.embedFont]] and\n   * > [[PDFDocument.embedStandardFont]] methods, which will create instances\n   * > of [[PDFFont]] for you.\n   *\n   * Create an instance of [[PDFFont]] from an existing ref and embedder\n   *\n   * @param ref The unique reference for this font.\n   * @param doc The document to which the font will belong.\n   * @param embedder The embedder that will be used to embed the font.\n   */\n  PDFFont.of = function (ref, doc, embedder) {\n    return new PDFFont(ref, doc, embedder);\n  };\n  return PDFFont;\n}();\nexport default PDFFont;","map":{"version":3,"names":["__awaiter","__generator","PDFDocument","CustomFontEmbedder","PDFRef","StandardFontEmbedder","assertIs","assertOrUndefined","PDFFont","ref","doc","embedder","modified","name","fontName","prototype","encodeText","text","widthOfTextAtSize","size","heightAtSize","options","_a","descender","heightOfFontAtSize","sizeAtHeight","height","sizeOfFontAtHeight","getCharacterSet","encoding","supportedCodePoints","font","characterSet","embed","label","embedIntoContext","context","sent","of"],"sources":["E:/PROA/frontPROA/node_modules/pdf-lib/es/api/PDFFont.js"],"sourcesContent":["import { __awaiter, __generator } from \"tslib\";\nimport PDFDocument from \"./PDFDocument\";\nimport { CustomFontEmbedder, PDFRef, StandardFontEmbedder, } from \"../core\";\nimport { assertIs, assertOrUndefined } from \"../utils\";\n/**\n * Represents a font that has been embedded in a [[PDFDocument]].\n */\nvar PDFFont = /** @class */ (function () {\n    function PDFFont(ref, doc, embedder) {\n        this.modified = true;\n        assertIs(ref, 'ref', [[PDFRef, 'PDFRef']]);\n        assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n        assertIs(embedder, 'embedder', [\n            [CustomFontEmbedder, 'CustomFontEmbedder'],\n            [StandardFontEmbedder, 'StandardFontEmbedder'],\n        ]);\n        this.ref = ref;\n        this.doc = doc;\n        this.name = embedder.fontName;\n        this.embedder = embedder;\n    }\n    /**\n     * > **NOTE:** You probably don't need to call this method directly. The\n     * > [[PDFPage.drawText]] method will automatically encode the text it is\n     * > given.\n     *\n     * Encodes a string of text in this font.\n     *\n     * @param text The text to be encoded.\n     * @returns The encoded text as a hex string.\n     */\n    PDFFont.prototype.encodeText = function (text) {\n        assertIs(text, 'text', ['string']);\n        this.modified = true;\n        return this.embedder.encodeText(text);\n    };\n    /**\n     * Measure the width of a string of text drawn in this font at a given size.\n     * For example:\n     * ```js\n     * const width = font.widthOfTextAtSize('Foo Bar Qux Baz', 36)\n     * ```\n     * @param text The string of text to be measured.\n     * @param size The font size to be used for this measurement.\n     * @returns The width of the string of text when drawn in this font at the\n     *          given size.\n     */\n    PDFFont.prototype.widthOfTextAtSize = function (text, size) {\n        assertIs(text, 'text', ['string']);\n        assertIs(size, 'size', ['number']);\n        return this.embedder.widthOfTextAtSize(text, size);\n    };\n    /**\n     * Measure the height of this font at a given size. For example:\n     * ```js\n     * const height = font.heightAtSize(24)\n     * ```\n     *\n     * The `options.descender` value controls whether or not the font's\n     * descender is included in the height calculation.\n     *\n     * @param size The font size to be used for this measurement.\n     * @param options The options to be used when computing this measurement.\n     * @returns The height of this font at the given size.\n     */\n    PDFFont.prototype.heightAtSize = function (size, options) {\n        var _a;\n        assertIs(size, 'size', ['number']);\n        assertOrUndefined(options === null || options === void 0 ? void 0 : options.descender, 'options.descender', ['boolean']);\n        return this.embedder.heightOfFontAtSize(size, {\n            descender: (_a = options === null || options === void 0 ? void 0 : options.descender) !== null && _a !== void 0 ? _a : true,\n        });\n    };\n    /**\n     * Compute the font size at which this font is a given height. For example:\n     * ```js\n     * const fontSize = font.sizeAtHeight(12)\n     * ```\n     * @param height The height to be used for this calculation.\n     * @returns The font size at which this font is the given height.\n     */\n    PDFFont.prototype.sizeAtHeight = function (height) {\n        assertIs(height, 'height', ['number']);\n        return this.embedder.sizeOfFontAtHeight(height);\n    };\n    /**\n     * Get the set of unicode code points that can be represented by this font.\n     * @returns The set of unicode code points supported by this font.\n     */\n    PDFFont.prototype.getCharacterSet = function () {\n        if (this.embedder instanceof StandardFontEmbedder) {\n            return this.embedder.encoding.supportedCodePoints;\n        }\n        else {\n            return this.embedder.font.characterSet;\n        }\n    };\n    /**\n     * > **NOTE:** You probably don't need to call this method directly. The\n     * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\n     * > automatically ensure all fonts get embedded.\n     *\n     * Embed this font in its document.\n     *\n     * @returns Resolves when the embedding is complete.\n     */\n    PDFFont.prototype.embed = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.modified) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.embedder.embedIntoContext(this.doc.context, this.ref)];\n                    case 1:\n                        _a.sent();\n                        this.modified = false;\n                        _a.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * > **NOTE:** You probably don't want to call this method directly. Instead,\n     * > consider using the [[PDFDocument.embedFont]] and\n     * > [[PDFDocument.embedStandardFont]] methods, which will create instances\n     * > of [[PDFFont]] for you.\n     *\n     * Create an instance of [[PDFFont]] from an existing ref and embedder\n     *\n     * @param ref The unique reference for this font.\n     * @param doc The document to which the font will belong.\n     * @param embedder The embedder that will be used to embed the font.\n     */\n    PDFFont.of = function (ref, doc, embedder) {\n        return new PDFFont(ref, doc, embedder);\n    };\n    return PDFFont;\n}());\nexport default PDFFont;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}