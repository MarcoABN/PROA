{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport PDFDocument from \"../PDFDocument\";\nimport PDFButton from \"./PDFButton\";\nimport PDFCheckBox from \"./PDFCheckBox\";\nimport PDFDropdown from \"./PDFDropdown\";\nimport PDFOptionList from \"./PDFOptionList\";\nimport PDFRadioGroup from \"./PDFRadioGroup\";\nimport PDFSignature from \"./PDFSignature\";\nimport PDFTextField from \"./PDFTextField\";\nimport { NoSuchFieldError, UnexpectedFieldTypeError, FieldAlreadyExistsError, InvalidFieldNamePartError } from \"../errors\";\nimport PDFFont from \"../PDFFont\";\nimport { StandardFonts } from \"../StandardFonts\";\nimport { rotateInPlace } from \"../operations\";\nimport { drawObject, popGraphicsState, pushGraphicsState, translate } from \"../operators\";\nimport { PDFAcroForm, PDFAcroCheckBox, PDFAcroComboBox, PDFAcroListBox, PDFAcroRadioButton, PDFAcroSignature, PDFAcroText, PDFAcroPushButton, PDFAcroNonTerminal, PDFDict, PDFRef, createPDFAcroFields, PDFName } from \"../../core\";\nimport { assertIs, Cache, assertOrUndefined } from \"../../utils\";\n/**\n * Represents the interactive form of a [[PDFDocument]].\n *\n * Interactive forms (sometimes called _AcroForms_) are collections of fields\n * designed to gather information from a user. A PDF document may contains any\n * number of fields that appear on various pages, all of which make up a single,\n * global interactive form spanning the entire document. This means that\n * instances of [[PDFDocument]] shall contain at most one [[PDFForm]].\n *\n * The fields of an interactive form are represented by [[PDFField]] instances.\n */\nvar PDFForm = /** @class */function () {\n  function PDFForm(acroForm, doc) {\n    var _this = this;\n    this.embedDefaultFont = function () {\n      return _this.doc.embedStandardFont(StandardFonts.Helvetica);\n    };\n    assertIs(acroForm, 'acroForm', [[PDFAcroForm, 'PDFAcroForm']]);\n    assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n    this.acroForm = acroForm;\n    this.doc = doc;\n    this.dirtyFields = new Set();\n    this.defaultFontCache = Cache.populatedBy(this.embedDefaultFont);\n  }\n  /**\n   * Returns `true` if this [[PDFForm]] has XFA data. Most PDFs with form\n   * fields do not use XFA as it is not widely supported by PDF readers.\n   *\n   * > `pdf-lib` does not support creation, modification, or reading of XFA\n   * > fields.\n   *\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * if (form.hasXFA()) console.log('PDF has XFA data')\n   * ```\n   * @returns Whether or not this form has XFA data.\n   */\n  PDFForm.prototype.hasXFA = function () {\n    return this.acroForm.dict.has(PDFName.of('XFA'));\n  };\n  /**\n   * Disconnect the XFA data from this [[PDFForm]] (if any exists). This will\n   * force readers to fallback to standard fields if the [[PDFDocument]]\n   * contains any. For example:\n   *\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * form.deleteXFA()\n   * ```\n   */\n  PDFForm.prototype.deleteXFA = function () {\n    this.acroForm.dict.delete(PDFName.of('XFA'));\n  };\n  /**\n   * Get all fields contained in this [[PDFForm]]. For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const fields = form.getFields()\n   * fields.forEach(field => {\n   *   const type = field.constructor.name\n   *   const name = field.getName()\n   *   console.log(`${type}: ${name}`)\n   * })\n   * ```\n   * @returns An array of all fields in this form.\n   */\n  PDFForm.prototype.getFields = function () {\n    var allFields = this.acroForm.getAllFields();\n    var fields = [];\n    for (var idx = 0, len = allFields.length; idx < len; idx++) {\n      var _a = allFields[idx],\n        acroField = _a[0],\n        ref = _a[1];\n      var field = convertToPDFField(acroField, ref, this.doc);\n      if (field) fields.push(field);\n    }\n    return fields;\n  };\n  /**\n   * Get the field in this [[PDFForm]] with the given name. For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const field = form.getFieldMaybe('Page1.Foo.Bar[0]')\n   * if (field) console.log('Field exists!')\n   * ```\n   * @param name A fully qualified field name.\n   * @returns The field with the specified name, if one exists.\n   */\n  PDFForm.prototype.getFieldMaybe = function (name) {\n    assertIs(name, 'name', ['string']);\n    var fields = this.getFields();\n    for (var idx = 0, len = fields.length; idx < len; idx++) {\n      var field = fields[idx];\n      if (field.getName() === name) return field;\n    }\n    return undefined;\n  };\n  /**\n   * Get the field in this [[PDFForm]] with the given name. For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const field = form.getField('Page1.Foo.Bar[0]')\n   * ```\n   * If no field exists with the provided name, an error will be thrown.\n   * @param name A fully qualified field name.\n   * @returns The field with the specified name.\n   */\n  PDFForm.prototype.getField = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getFieldMaybe(name);\n    if (field) return field;\n    throw new NoSuchFieldError(name);\n  };\n  /**\n   * Get the button field in this [[PDFForm]] with the given name. For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const button = form.getButton('Page1.Foo.Button[0]')\n   * ```\n   * An error will be thrown if no field exists with the provided name, or if\n   * the field exists but is not a button.\n   * @param name A fully qualified button name.\n   * @returns The button with the specified name.\n   */\n  PDFForm.prototype.getButton = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFButton) return field;\n    throw new UnexpectedFieldTypeError(name, PDFButton, field);\n  };\n  /**\n   * Get the check box field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const checkBox = form.getCheckBox('Page1.Foo.CheckBox[0]')\n   * checkBox.check()\n   * ```\n   * An error will be thrown if no field exists with the provided name, or if\n   * the field exists but is not a check box.\n   * @param name A fully qualified check box name.\n   * @returns The check box with the specified name.\n   */\n  PDFForm.prototype.getCheckBox = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFCheckBox) return field;\n    throw new UnexpectedFieldTypeError(name, PDFCheckBox, field);\n  };\n  /**\n   * Get the dropdown field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const dropdown = form.getDropdown('Page1.Foo.Dropdown[0]')\n   * const options = dropdown.getOptions()\n   * dropdown.select(options[0])\n   * ```\n   * An error will be thrown if no field exists with the provided name, or if\n   * the field exists but is not a dropdown.\n   * @param name A fully qualified dropdown name.\n   * @returns The dropdown with the specified name.\n   */\n  PDFForm.prototype.getDropdown = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFDropdown) return field;\n    throw new UnexpectedFieldTypeError(name, PDFDropdown, field);\n  };\n  /**\n   * Get the option list field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const optionList = form.getOptionList('Page1.Foo.OptionList[0]')\n   * const options = optionList.getOptions()\n   * optionList.select(options[0])\n   * ```\n   * An error will be thrown if no field exists with the provided name, or if\n   * the field exists but is not an option list.\n   * @param name A fully qualified option list name.\n   * @returns The option list with the specified name.\n   */\n  PDFForm.prototype.getOptionList = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFOptionList) return field;\n    throw new UnexpectedFieldTypeError(name, PDFOptionList, field);\n  };\n  /**\n   * Get the radio group field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const radioGroup = form.getRadioGroup('Page1.Foo.RadioGroup[0]')\n   * const options = radioGroup.getOptions()\n   * radioGroup.select(options[0])\n   * ```\n   * An error will be thrown if no field exists with the provided name, or if\n   * the field exists but is not a radio group.\n   * @param name A fully qualified radio group name.\n   * @returns The radio group with the specified name.\n   */\n  PDFForm.prototype.getRadioGroup = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFRadioGroup) return field;\n    throw new UnexpectedFieldTypeError(name, PDFRadioGroup, field);\n  };\n  /**\n   * Get the signature field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const signature = form.getSignature('Page1.Foo.Signature[0]')\n   * ```\n   * An error will be thrown if no field exists with the provided name, or if\n   * the field exists but is not a signature.\n   * @param name A fully qualified signature name.\n   * @returns The signature with the specified name.\n   */\n  PDFForm.prototype.getSignature = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFSignature) return field;\n    throw new UnexpectedFieldTypeError(name, PDFSignature, field);\n  };\n  /**\n   * Get the text field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const textField = form.getTextField('Page1.Foo.TextField[0]')\n   * textField.setText('Are you designed to act or to be acted upon?')\n   * ```\n   * An error will be thrown if no field exists with the provided name, or if\n   * the field exists but is not a text field.\n   * @param name A fully qualified text field name.\n   * @returns The text field with the specified name.\n   */\n  PDFForm.prototype.getTextField = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFTextField) return field;\n    throw new UnexpectedFieldTypeError(name, PDFTextField, field);\n  };\n  /**\n   * Create a new button field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const button = form.createButton('cool.new.button')\n   *\n   * button.addToPage('Do Stuff', font, page)\n   * ```\n   * An error will be thrown if a field already exists with the provided name.\n   * @param name The fully qualified name for the new button.\n   * @returns The new button field.\n   */\n  PDFForm.prototype.createButton = function (name) {\n    assertIs(name, 'name', ['string']);\n    var nameParts = splitFieldName(name);\n    var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n    var button = PDFAcroPushButton.create(this.doc.context);\n    button.setPartialName(nameParts.terminal);\n    addFieldToParent(parent, [button, button.ref], nameParts.terminal);\n    return PDFButton.of(button, button.ref, this.doc);\n  };\n  /**\n   * Create a new check box field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const checkBox = form.createCheckBox('cool.new.checkBox')\n   *\n   * checkBox.addToPage(page)\n   * ```\n   * An error will be thrown if a field already exists with the provided name.\n   * @param name The fully qualified name for the new check box.\n   * @returns The new check box field.\n   */\n  PDFForm.prototype.createCheckBox = function (name) {\n    assertIs(name, 'name', ['string']);\n    var nameParts = splitFieldName(name);\n    var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n    var checkBox = PDFAcroCheckBox.create(this.doc.context);\n    checkBox.setPartialName(nameParts.terminal);\n    addFieldToParent(parent, [checkBox, checkBox.ref], nameParts.terminal);\n    return PDFCheckBox.of(checkBox, checkBox.ref, this.doc);\n  };\n  /**\n   * Create a new dropdown field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const dropdown = form.createDropdown('cool.new.dropdown')\n   *\n   * dropdown.addToPage(font, page)\n   * ```\n   * An error will be thrown if a field already exists with the provided name.\n   * @param name The fully qualified name for the new dropdown.\n   * @returns The new dropdown field.\n   */\n  PDFForm.prototype.createDropdown = function (name) {\n    assertIs(name, 'name', ['string']);\n    var nameParts = splitFieldName(name);\n    var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n    var comboBox = PDFAcroComboBox.create(this.doc.context);\n    comboBox.setPartialName(nameParts.terminal);\n    addFieldToParent(parent, [comboBox, comboBox.ref], nameParts.terminal);\n    return PDFDropdown.of(comboBox, comboBox.ref, this.doc);\n  };\n  /**\n   * Create a new option list field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const optionList = form.createOptionList('cool.new.optionList')\n   *\n   * optionList.addToPage(font, page)\n   * ```\n   * An error will be thrown if a field already exists with the provided name.\n   * @param name The fully qualified name for the new option list.\n   * @returns The new option list field.\n   */\n  PDFForm.prototype.createOptionList = function (name) {\n    assertIs(name, 'name', ['string']);\n    var nameParts = splitFieldName(name);\n    var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n    var listBox = PDFAcroListBox.create(this.doc.context);\n    listBox.setPartialName(nameParts.terminal);\n    addFieldToParent(parent, [listBox, listBox.ref], nameParts.terminal);\n    return PDFOptionList.of(listBox, listBox.ref, this.doc);\n  };\n  /**\n   * Create a new radio group field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const radioGroup = form.createRadioGroup('cool.new.radioGroup')\n   *\n   * radioGroup.addOptionToPage('is-dog', page, { y: 0 })\n   * radioGroup.addOptionToPage('is-cat', page, { y: 75 })\n   * ```\n   * An error will be thrown if a field already exists with the provided name.\n   * @param name The fully qualified name for the new radio group.\n   * @returns The new radio group field.\n   */\n  PDFForm.prototype.createRadioGroup = function (name) {\n    assertIs(name, 'name', ['string']);\n    var nameParts = splitFieldName(name);\n    var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n    var radioButton = PDFAcroRadioButton.create(this.doc.context);\n    radioButton.setPartialName(nameParts.terminal);\n    addFieldToParent(parent, [radioButton, radioButton.ref], nameParts.terminal);\n    return PDFRadioGroup.of(radioButton, radioButton.ref, this.doc);\n  };\n  /**\n   * Create a new text field in this [[PDFForm]] with the given name.\n   * For example:\n   * ```js\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const textField = form.createTextField('cool.new.textField')\n   *\n   * textField.addToPage(font, page)\n   * ```\n   * An error will be thrown if a field already exists with the provided name.\n   * @param name The fully qualified name for the new radio group.\n   * @returns The new radio group field.\n   */\n  PDFForm.prototype.createTextField = function (name) {\n    assertIs(name, 'name', ['string']);\n    var nameParts = splitFieldName(name);\n    var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n    var text = PDFAcroText.create(this.doc.context);\n    text.setPartialName(nameParts.terminal);\n    addFieldToParent(parent, [text, text.ref], nameParts.terminal);\n    return PDFTextField.of(text, text.ref, this.doc);\n  };\n  /**\n   * Flatten all fields in this [[PDFForm]].\n   *\n   * Flattening a form field will take the current appearance for each of that\n   * field's widgets and make them part of their page's content stream. All form\n   * fields and annotations associated are then removed. Note that once a form\n   * has been flattened its fields can no longer be accessed or edited.\n   *\n   * This operation is often used after filling form fields to ensure a\n   * consistent appearance across different PDF readers and/or printers.\n   * Another common use case is to copy a template document with form fields\n   * into another document. In this scenario you would load the template\n   * document, fill its fields, flatten it, and then copy its pages into the\n   * recipient document - the filled fields will be copied over.\n   *\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm();\n   * form.flatten();\n   * ```\n   */\n  PDFForm.prototype.flatten = function (options) {\n    if (options === void 0) {\n      options = {\n        updateFieldAppearances: true\n      };\n    }\n    if (options.updateFieldAppearances) {\n      this.updateFieldAppearances();\n    }\n    var fields = this.getFields();\n    for (var i = 0, lenFields = fields.length; i < lenFields; i++) {\n      var field = fields[i];\n      var widgets = field.acroField.getWidgets();\n      for (var j = 0, lenWidgets = widgets.length; j < lenWidgets; j++) {\n        var widget = widgets[j];\n        var page = this.findWidgetPage(widget);\n        var widgetRef = this.findWidgetAppearanceRef(field, widget);\n        var xObjectKey = page.node.newXObject('FlatWidget', widgetRef);\n        var rectangle = widget.getRectangle();\n        var operators = __spreadArrays([pushGraphicsState(), translate(rectangle.x, rectangle.y)], rotateInPlace(__assign(__assign({}, rectangle), {\n          rotation: 0\n        })), [drawObject(xObjectKey), popGraphicsState()]).filter(Boolean);\n        page.pushOperators.apply(page, operators);\n      }\n      this.removeField(field);\n    }\n  };\n  /**\n   * Remove a field from this [[PDFForm]].\n   *\n   * For example:\n   * ```js\n   * const form = pdfDoc.getForm();\n   * const ageField = form.getFields().find(x => x.getName() === 'Age');\n   * form.removeField(ageField);\n   * ```\n   */\n  PDFForm.prototype.removeField = function (field) {\n    var widgets = field.acroField.getWidgets();\n    var pages = new Set();\n    for (var i = 0, len = widgets.length; i < len; i++) {\n      var widget = widgets[i];\n      var widgetRef = this.findWidgetAppearanceRef(field, widget);\n      var page = this.findWidgetPage(widget);\n      pages.add(page);\n      page.node.removeAnnot(widgetRef);\n    }\n    pages.forEach(function (page) {\n      return page.node.removeAnnot(field.ref);\n    });\n    this.acroForm.removeField(field.acroField);\n    var fieldKids = field.acroField.normalizedEntries().Kids;\n    var kidsCount = fieldKids.size();\n    for (var childIndex = 0; childIndex < kidsCount; childIndex++) {\n      var child = fieldKids.get(childIndex);\n      if (child instanceof PDFRef) {\n        this.doc.context.delete(child);\n      }\n    }\n    this.doc.context.delete(field.ref);\n  };\n  /**\n   * Update the appearance streams for all widgets of all fields in this\n   * [[PDFForm]]. Appearance streams will only be created for a widget if it\n   * does not have any existing appearance streams, or the field's value has\n   * changed (e.g. by calling [[PDFTextField.setText]] or\n   * [[PDFDropdown.select]]).\n   *\n   * For example:\n   * ```js\n   * const courier = await pdfDoc.embedFont(StandardFonts.Courier)\n   * const form = pdfDoc.getForm()\n   * form.updateFieldAppearances(courier)\n   * ```\n   *\n   * **IMPORTANT:** The default value for the `font` parameter is\n   * [[StandardFonts.Helvetica]]. Note that this is a WinAnsi font. This means\n   * that encoding errors will be thrown if any fields contain text with\n   * characters outside the WinAnsi character set (the latin alphabet).\n   *\n   * Embedding a custom font and passing that as the `font`\n   * parameter allows you to generate appearance streams with non WinAnsi\n   * characters (assuming your custom font supports them).\n   *\n   * > **NOTE:** The [[PDFDocument.save]] method will call this method to\n   * > update appearances automatically if a form was accessed via the\n   * > [[PDFDocument.getForm]] method prior to saving.\n   *\n   * @param font Optionally, the font to use when creating new appearances.\n   */\n  PDFForm.prototype.updateFieldAppearances = function (font) {\n    assertOrUndefined(font, 'font', [[PDFFont, 'PDFFont']]);\n    font = font !== null && font !== void 0 ? font : this.getDefaultFont();\n    var fields = this.getFields();\n    for (var idx = 0, len = fields.length; idx < len; idx++) {\n      var field = fields[idx];\n      if (field.needsAppearancesUpdate()) {\n        field.defaultUpdateAppearances(font);\n      }\n    }\n  };\n  /**\n   * Mark a field as dirty. This will cause its appearance streams to be\n   * updated by [[PDFForm.updateFieldAppearances]].\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const field = form.getField('foo.bar')\n   * form.markFieldAsDirty(field.ref)\n   * ```\n   * @param fieldRef The reference to the field that should be marked.\n   */\n  PDFForm.prototype.markFieldAsDirty = function (fieldRef) {\n    assertOrUndefined(fieldRef, 'fieldRef', [[PDFRef, 'PDFRef']]);\n    this.dirtyFields.add(fieldRef);\n  };\n  /**\n   * Mark a field as dirty. This will cause its appearance streams to not be\n   * updated by [[PDFForm.updateFieldAppearances]].\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const field = form.getField('foo.bar')\n   * form.markFieldAsClean(field.ref)\n   * ```\n   * @param fieldRef The reference to the field that should be marked.\n   */\n  PDFForm.prototype.markFieldAsClean = function (fieldRef) {\n    assertOrUndefined(fieldRef, 'fieldRef', [[PDFRef, 'PDFRef']]);\n    this.dirtyFields.delete(fieldRef);\n  };\n  /**\n   * Returns `true` is the specified field has been marked as dirty.\n   * ```js\n   * const form = pdfDoc.getForm()\n   * const field = form.getField('foo.bar')\n   * if (form.fieldIsDirty(field.ref)) console.log('Field is dirty')\n   * ```\n   * @param fieldRef The reference to the field that should be checked.\n   * @returns Whether or not the specified field is dirty.\n   */\n  PDFForm.prototype.fieldIsDirty = function (fieldRef) {\n    assertOrUndefined(fieldRef, 'fieldRef', [[PDFRef, 'PDFRef']]);\n    return this.dirtyFields.has(fieldRef);\n  };\n  PDFForm.prototype.getDefaultFont = function () {\n    return this.defaultFontCache.access();\n  };\n  PDFForm.prototype.findWidgetPage = function (widget) {\n    var pageRef = widget.P();\n    var page = this.doc.getPages().find(function (x) {\n      return x.ref === pageRef;\n    });\n    if (page === undefined) {\n      var widgetRef = this.doc.context.getObjectRef(widget.dict);\n      if (widgetRef === undefined) {\n        throw new Error('Could not find PDFRef for PDFObject');\n      }\n      page = this.doc.findPageForAnnotationRef(widgetRef);\n      if (page === undefined) {\n        throw new Error(\"Could not find page for PDFRef \" + widgetRef);\n      }\n    }\n    return page;\n  };\n  PDFForm.prototype.findWidgetAppearanceRef = function (field, widget) {\n    var _a;\n    var refOrDict = widget.getNormalAppearance();\n    if (refOrDict instanceof PDFDict && (field instanceof PDFCheckBox || field instanceof PDFRadioGroup)) {\n      var value = field.acroField.getValue();\n      var ref = (_a = refOrDict.get(value)) !== null && _a !== void 0 ? _a : refOrDict.get(PDFName.of('Off'));\n      if (ref instanceof PDFRef) {\n        refOrDict = ref;\n      }\n    }\n    if (!(refOrDict instanceof PDFRef)) {\n      var name_1 = field.getName();\n      throw new Error(\"Failed to extract appearance ref for: \" + name_1);\n    }\n    return refOrDict;\n  };\n  PDFForm.prototype.findOrCreateNonTerminals = function (partialNames) {\n    var nonTerminal = [this.acroForm];\n    for (var idx = 0, len = partialNames.length; idx < len; idx++) {\n      var namePart = partialNames[idx];\n      if (!namePart) throw new InvalidFieldNamePartError(namePart);\n      var parent_1 = nonTerminal[0],\n        parentRef = nonTerminal[1];\n      var res = this.findNonTerminal(namePart, parent_1);\n      if (res) {\n        nonTerminal = res;\n      } else {\n        var node = PDFAcroNonTerminal.create(this.doc.context);\n        node.setPartialName(namePart);\n        node.setParent(parentRef);\n        var nodeRef = this.doc.context.register(node.dict);\n        parent_1.addField(nodeRef);\n        nonTerminal = [node, nodeRef];\n      }\n    }\n    return nonTerminal;\n  };\n  PDFForm.prototype.findNonTerminal = function (partialName, parent) {\n    var fields = parent instanceof PDFAcroForm ? this.acroForm.getFields() : createPDFAcroFields(parent.Kids());\n    for (var idx = 0, len = fields.length; idx < len; idx++) {\n      var _a = fields[idx],\n        field = _a[0],\n        ref = _a[1];\n      if (field.getPartialName() === partialName) {\n        if (field instanceof PDFAcroNonTerminal) return [field, ref];\n        throw new FieldAlreadyExistsError(partialName);\n      }\n    }\n    return undefined;\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFDocument.getForm]] method, which will create an\n   * > instance of [[PDFForm]] for you.\n   *\n   * Create an instance of [[PDFForm]] from an existing acroForm and embedder\n   *\n   * @param acroForm The underlying `PDFAcroForm` for this form.\n   * @param doc The document to which the form will belong.\n   */\n  PDFForm.of = function (acroForm, doc) {\n    return new PDFForm(acroForm, doc);\n  };\n  return PDFForm;\n}();\nexport default PDFForm;\nvar convertToPDFField = function (field, ref, doc) {\n  if (field instanceof PDFAcroPushButton) return PDFButton.of(field, ref, doc);\n  if (field instanceof PDFAcroCheckBox) return PDFCheckBox.of(field, ref, doc);\n  if (field instanceof PDFAcroComboBox) return PDFDropdown.of(field, ref, doc);\n  if (field instanceof PDFAcroListBox) return PDFOptionList.of(field, ref, doc);\n  if (field instanceof PDFAcroText) return PDFTextField.of(field, ref, doc);\n  if (field instanceof PDFAcroRadioButton) {\n    return PDFRadioGroup.of(field, ref, doc);\n  }\n  if (field instanceof PDFAcroSignature) {\n    return PDFSignature.of(field, ref, doc);\n  }\n  return undefined;\n};\nvar splitFieldName = function (fullyQualifiedName) {\n  if (fullyQualifiedName.length === 0) {\n    throw new Error('PDF field names must not be empty strings');\n  }\n  var parts = fullyQualifiedName.split('.');\n  for (var idx = 0, len = parts.length; idx < len; idx++) {\n    if (parts[idx] === '') {\n      throw new Error(\"Periods in PDF field names must be separated by at least one character: \\\"\" + fullyQualifiedName + \"\\\"\");\n    }\n  }\n  if (parts.length === 1) return {\n    nonTerminal: [],\n    terminal: parts[0]\n  };\n  return {\n    nonTerminal: parts.slice(0, parts.length - 1),\n    terminal: parts[parts.length - 1]\n  };\n};\nvar addFieldToParent = function (_a, _b, partialName) {\n  var parent = _a[0],\n    parentRef = _a[1];\n  var field = _b[0],\n    fieldRef = _b[1];\n  var entries = parent.normalizedEntries();\n  var fields = createPDFAcroFields('Kids' in entries ? entries.Kids : entries.Fields);\n  for (var idx = 0, len = fields.length; idx < len; idx++) {\n    if (fields[idx][0].getPartialName() === partialName) {\n      throw new FieldAlreadyExistsError(partialName);\n    }\n  }\n  parent.addField(fieldRef);\n  field.setParent(parentRef);\n};","map":{"version":3,"names":["__assign","__spreadArrays","PDFDocument","PDFButton","PDFCheckBox","PDFDropdown","PDFOptionList","PDFRadioGroup","PDFSignature","PDFTextField","NoSuchFieldError","UnexpectedFieldTypeError","FieldAlreadyExistsError","InvalidFieldNamePartError","PDFFont","StandardFonts","rotateInPlace","drawObject","popGraphicsState","pushGraphicsState","translate","PDFAcroForm","PDFAcroCheckBox","PDFAcroComboBox","PDFAcroListBox","PDFAcroRadioButton","PDFAcroSignature","PDFAcroText","PDFAcroPushButton","PDFAcroNonTerminal","PDFDict","PDFRef","createPDFAcroFields","PDFName","assertIs","Cache","assertOrUndefined","PDFForm","acroForm","doc","_this","embedDefaultFont","embedStandardFont","Helvetica","dirtyFields","Set","defaultFontCache","populatedBy","prototype","hasXFA","dict","has","of","deleteXFA","delete","getFields","allFields","getAllFields","fields","idx","len","length","_a","acroField","ref","field","convertToPDFField","push","getFieldMaybe","name","getName","undefined","getField","getButton","getCheckBox","getDropdown","getOptionList","getRadioGroup","getSignature","getTextField","createButton","nameParts","splitFieldName","parent","findOrCreateNonTerminals","nonTerminal","button","create","context","setPartialName","terminal","addFieldToParent","createCheckBox","checkBox","createDropdown","comboBox","createOptionList","listBox","createRadioGroup","radioButton","createTextField","text","flatten","options","updateFieldAppearances","i","lenFields","widgets","getWidgets","j","lenWidgets","widget","page","findWidgetPage","widgetRef","findWidgetAppearanceRef","xObjectKey","node","newXObject","rectangle","getRectangle","operators","x","y","rotation","filter","Boolean","pushOperators","apply","removeField","pages","add","removeAnnot","forEach","fieldKids","normalizedEntries","Kids","kidsCount","size","childIndex","child","get","font","getDefaultFont","needsAppearancesUpdate","defaultUpdateAppearances","markFieldAsDirty","fieldRef","markFieldAsClean","fieldIsDirty","access","pageRef","P","getPages","find","getObjectRef","Error","findPageForAnnotationRef","refOrDict","getNormalAppearance","value","getValue","name_1","partialNames","namePart","parent_1","parentRef","res","findNonTerminal","setParent","nodeRef","register","addField","partialName","getPartialName","fullyQualifiedName","parts","split","slice","_b","entries","Fields"],"sources":["E:/PROA/frontPROA/node_modules/pdf-lib/es/api/form/PDFForm.js"],"sourcesContent":["import { __assign, __spreadArrays } from \"tslib\";\nimport PDFDocument from \"../PDFDocument\";\nimport PDFButton from \"./PDFButton\";\nimport PDFCheckBox from \"./PDFCheckBox\";\nimport PDFDropdown from \"./PDFDropdown\";\nimport PDFOptionList from \"./PDFOptionList\";\nimport PDFRadioGroup from \"./PDFRadioGroup\";\nimport PDFSignature from \"./PDFSignature\";\nimport PDFTextField from \"./PDFTextField\";\nimport { NoSuchFieldError, UnexpectedFieldTypeError, FieldAlreadyExistsError, InvalidFieldNamePartError, } from \"../errors\";\nimport PDFFont from \"../PDFFont\";\nimport { StandardFonts } from \"../StandardFonts\";\nimport { rotateInPlace } from \"../operations\";\nimport { drawObject, popGraphicsState, pushGraphicsState, translate, } from \"../operators\";\nimport { PDFAcroForm, PDFAcroCheckBox, PDFAcroComboBox, PDFAcroListBox, PDFAcroRadioButton, PDFAcroSignature, PDFAcroText, PDFAcroPushButton, PDFAcroNonTerminal, PDFDict, PDFRef, createPDFAcroFields, PDFName, } from \"../../core\";\nimport { assertIs, Cache, assertOrUndefined } from \"../../utils\";\n/**\n * Represents the interactive form of a [[PDFDocument]].\n *\n * Interactive forms (sometimes called _AcroForms_) are collections of fields\n * designed to gather information from a user. A PDF document may contains any\n * number of fields that appear on various pages, all of which make up a single,\n * global interactive form spanning the entire document. This means that\n * instances of [[PDFDocument]] shall contain at most one [[PDFForm]].\n *\n * The fields of an interactive form are represented by [[PDFField]] instances.\n */\nvar PDFForm = /** @class */ (function () {\n    function PDFForm(acroForm, doc) {\n        var _this = this;\n        this.embedDefaultFont = function () {\n            return _this.doc.embedStandardFont(StandardFonts.Helvetica);\n        };\n        assertIs(acroForm, 'acroForm', [[PDFAcroForm, 'PDFAcroForm']]);\n        assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n        this.acroForm = acroForm;\n        this.doc = doc;\n        this.dirtyFields = new Set();\n        this.defaultFontCache = Cache.populatedBy(this.embedDefaultFont);\n    }\n    /**\n     * Returns `true` if this [[PDFForm]] has XFA data. Most PDFs with form\n     * fields do not use XFA as it is not widely supported by PDF readers.\n     *\n     * > `pdf-lib` does not support creation, modification, or reading of XFA\n     * > fields.\n     *\n     * For example:\n     * ```js\n     * const form = pdfDoc.getForm()\n     * if (form.hasXFA()) console.log('PDF has XFA data')\n     * ```\n     * @returns Whether or not this form has XFA data.\n     */\n    PDFForm.prototype.hasXFA = function () {\n        return this.acroForm.dict.has(PDFName.of('XFA'));\n    };\n    /**\n     * Disconnect the XFA data from this [[PDFForm]] (if any exists). This will\n     * force readers to fallback to standard fields if the [[PDFDocument]]\n     * contains any. For example:\n     *\n     * For example:\n     * ```js\n     * const form = pdfDoc.getForm()\n     * form.deleteXFA()\n     * ```\n     */\n    PDFForm.prototype.deleteXFA = function () {\n        this.acroForm.dict.delete(PDFName.of('XFA'));\n    };\n    /**\n     * Get all fields contained in this [[PDFForm]]. For example:\n     * ```js\n     * const form = pdfDoc.getForm()\n     * const fields = form.getFields()\n     * fields.forEach(field => {\n     *   const type = field.constructor.name\n     *   const name = field.getName()\n     *   console.log(`${type}: ${name}`)\n     * })\n     * ```\n     * @returns An array of all fields in this form.\n     */\n    PDFForm.prototype.getFields = function () {\n        var allFields = this.acroForm.getAllFields();\n        var fields = [];\n        for (var idx = 0, len = allFields.length; idx < len; idx++) {\n            var _a = allFields[idx], acroField = _a[0], ref = _a[1];\n            var field = convertToPDFField(acroField, ref, this.doc);\n            if (field)\n                fields.push(field);\n        }\n        return fields;\n    };\n    /**\n     * Get the field in this [[PDFForm]] with the given name. For example:\n     * ```js\n     * const form = pdfDoc.getForm()\n     * const field = form.getFieldMaybe('Page1.Foo.Bar[0]')\n     * if (field) console.log('Field exists!')\n     * ```\n     * @param name A fully qualified field name.\n     * @returns The field with the specified name, if one exists.\n     */\n    PDFForm.prototype.getFieldMaybe = function (name) {\n        assertIs(name, 'name', ['string']);\n        var fields = this.getFields();\n        for (var idx = 0, len = fields.length; idx < len; idx++) {\n            var field = fields[idx];\n            if (field.getName() === name)\n                return field;\n        }\n        return undefined;\n    };\n    /**\n     * Get the field in this [[PDFForm]] with the given name. For example:\n     * ```js\n     * const form = pdfDoc.getForm()\n     * const field = form.getField('Page1.Foo.Bar[0]')\n     * ```\n     * If no field exists with the provided name, an error will be thrown.\n     * @param name A fully qualified field name.\n     * @returns The field with the specified name.\n     */\n    PDFForm.prototype.getField = function (name) {\n        assertIs(name, 'name', ['string']);\n        var field = this.getFieldMaybe(name);\n        if (field)\n            return field;\n        throw new NoSuchFieldError(name);\n    };\n    /**\n     * Get the button field in this [[PDFForm]] with the given name. For example:\n     * ```js\n     * const form = pdfDoc.getForm()\n     * const button = form.getButton('Page1.Foo.Button[0]')\n     * ```\n     * An error will be thrown if no field exists with the provided name, or if\n     * the field exists but is not a button.\n     * @param name A fully qualified button name.\n     * @returns The button with the specified name.\n     */\n    PDFForm.prototype.getButton = function (name) {\n        assertIs(name, 'name', ['string']);\n        var field = this.getField(name);\n        if (field instanceof PDFButton)\n            return field;\n        throw new UnexpectedFieldTypeError(name, PDFButton, field);\n    };\n    /**\n     * Get the check box field in this [[PDFForm]] with the given name.\n     * For example:\n     * ```js\n     * const form = pdfDoc.getForm()\n     * const checkBox = form.getCheckBox('Page1.Foo.CheckBox[0]')\n     * checkBox.check()\n     * ```\n     * An error will be thrown if no field exists with the provided name, or if\n     * the field exists but is not a check box.\n     * @param name A fully qualified check box name.\n     * @returns The check box with the specified name.\n     */\n    PDFForm.prototype.getCheckBox = function (name) {\n        assertIs(name, 'name', ['string']);\n        var field = this.getField(name);\n        if (field instanceof PDFCheckBox)\n            return field;\n        throw new UnexpectedFieldTypeError(name, PDFCheckBox, field);\n    };\n    /**\n     * Get the dropdown field in this [[PDFForm]] with the given name.\n     * For example:\n     * ```js\n     * const form = pdfDoc.getForm()\n     * const dropdown = form.getDropdown('Page1.Foo.Dropdown[0]')\n     * const options = dropdown.getOptions()\n     * dropdown.select(options[0])\n     * ```\n     * An error will be thrown if no field exists with the provided name, or if\n     * the field exists but is not a dropdown.\n     * @param name A fully qualified dropdown name.\n     * @returns The dropdown with the specified name.\n     */\n    PDFForm.prototype.getDropdown = function (name) {\n        assertIs(name, 'name', ['string']);\n        var field = this.getField(name);\n        if (field instanceof PDFDropdown)\n            return field;\n        throw new UnexpectedFieldTypeError(name, PDFDropdown, field);\n    };\n    /**\n     * Get the option list field in this [[PDFForm]] with the given name.\n     * For example:\n     * ```js\n     * const form = pdfDoc.getForm()\n     * const optionList = form.getOptionList('Page1.Foo.OptionList[0]')\n     * const options = optionList.getOptions()\n     * optionList.select(options[0])\n     * ```\n     * An error will be thrown if no field exists with the provided name, or if\n     * the field exists but is not an option list.\n     * @param name A fully qualified option list name.\n     * @returns The option list with the specified name.\n     */\n    PDFForm.prototype.getOptionList = function (name) {\n        assertIs(name, 'name', ['string']);\n        var field = this.getField(name);\n        if (field instanceof PDFOptionList)\n            return field;\n        throw new UnexpectedFieldTypeError(name, PDFOptionList, field);\n    };\n    /**\n     * Get the radio group field in this [[PDFForm]] with the given name.\n     * For example:\n     * ```js\n     * const form = pdfDoc.getForm()\n     * const radioGroup = form.getRadioGroup('Page1.Foo.RadioGroup[0]')\n     * const options = radioGroup.getOptions()\n     * radioGroup.select(options[0])\n     * ```\n     * An error will be thrown if no field exists with the provided name, or if\n     * the field exists but is not a radio group.\n     * @param name A fully qualified radio group name.\n     * @returns The radio group with the specified name.\n     */\n    PDFForm.prototype.getRadioGroup = function (name) {\n        assertIs(name, 'name', ['string']);\n        var field = this.getField(name);\n        if (field instanceof PDFRadioGroup)\n            return field;\n        throw new UnexpectedFieldTypeError(name, PDFRadioGroup, field);\n    };\n    /**\n     * Get the signature field in this [[PDFForm]] with the given name.\n     * For example:\n     * ```js\n     * const form = pdfDoc.getForm()\n     * const signature = form.getSignature('Page1.Foo.Signature[0]')\n     * ```\n     * An error will be thrown if no field exists with the provided name, or if\n     * the field exists but is not a signature.\n     * @param name A fully qualified signature name.\n     * @returns The signature with the specified name.\n     */\n    PDFForm.prototype.getSignature = function (name) {\n        assertIs(name, 'name', ['string']);\n        var field = this.getField(name);\n        if (field instanceof PDFSignature)\n            return field;\n        throw new UnexpectedFieldTypeError(name, PDFSignature, field);\n    };\n    /**\n     * Get the text field in this [[PDFForm]] with the given name.\n     * For example:\n     * ```js\n     * const form = pdfDoc.getForm()\n     * const textField = form.getTextField('Page1.Foo.TextField[0]')\n     * textField.setText('Are you designed to act or to be acted upon?')\n     * ```\n     * An error will be thrown if no field exists with the provided name, or if\n     * the field exists but is not a text field.\n     * @param name A fully qualified text field name.\n     * @returns The text field with the specified name.\n     */\n    PDFForm.prototype.getTextField = function (name) {\n        assertIs(name, 'name', ['string']);\n        var field = this.getField(name);\n        if (field instanceof PDFTextField)\n            return field;\n        throw new UnexpectedFieldTypeError(name, PDFTextField, field);\n    };\n    /**\n     * Create a new button field in this [[PDFForm]] with the given name.\n     * For example:\n     * ```js\n     * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n     * const page = pdfDoc.addPage()\n     *\n     * const form = pdfDoc.getForm()\n     * const button = form.createButton('cool.new.button')\n     *\n     * button.addToPage('Do Stuff', font, page)\n     * ```\n     * An error will be thrown if a field already exists with the provided name.\n     * @param name The fully qualified name for the new button.\n     * @returns The new button field.\n     */\n    PDFForm.prototype.createButton = function (name) {\n        assertIs(name, 'name', ['string']);\n        var nameParts = splitFieldName(name);\n        var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n        var button = PDFAcroPushButton.create(this.doc.context);\n        button.setPartialName(nameParts.terminal);\n        addFieldToParent(parent, [button, button.ref], nameParts.terminal);\n        return PDFButton.of(button, button.ref, this.doc);\n    };\n    /**\n     * Create a new check box field in this [[PDFForm]] with the given name.\n     * For example:\n     * ```js\n     * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n     * const page = pdfDoc.addPage()\n     *\n     * const form = pdfDoc.getForm()\n     * const checkBox = form.createCheckBox('cool.new.checkBox')\n     *\n     * checkBox.addToPage(page)\n     * ```\n     * An error will be thrown if a field already exists with the provided name.\n     * @param name The fully qualified name for the new check box.\n     * @returns The new check box field.\n     */\n    PDFForm.prototype.createCheckBox = function (name) {\n        assertIs(name, 'name', ['string']);\n        var nameParts = splitFieldName(name);\n        var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n        var checkBox = PDFAcroCheckBox.create(this.doc.context);\n        checkBox.setPartialName(nameParts.terminal);\n        addFieldToParent(parent, [checkBox, checkBox.ref], nameParts.terminal);\n        return PDFCheckBox.of(checkBox, checkBox.ref, this.doc);\n    };\n    /**\n     * Create a new dropdown field in this [[PDFForm]] with the given name.\n     * For example:\n     * ```js\n     * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n     * const page = pdfDoc.addPage()\n     *\n     * const form = pdfDoc.getForm()\n     * const dropdown = form.createDropdown('cool.new.dropdown')\n     *\n     * dropdown.addToPage(font, page)\n     * ```\n     * An error will be thrown if a field already exists with the provided name.\n     * @param name The fully qualified name for the new dropdown.\n     * @returns The new dropdown field.\n     */\n    PDFForm.prototype.createDropdown = function (name) {\n        assertIs(name, 'name', ['string']);\n        var nameParts = splitFieldName(name);\n        var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n        var comboBox = PDFAcroComboBox.create(this.doc.context);\n        comboBox.setPartialName(nameParts.terminal);\n        addFieldToParent(parent, [comboBox, comboBox.ref], nameParts.terminal);\n        return PDFDropdown.of(comboBox, comboBox.ref, this.doc);\n    };\n    /**\n     * Create a new option list field in this [[PDFForm]] with the given name.\n     * For example:\n     * ```js\n     * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n     * const page = pdfDoc.addPage()\n     *\n     * const form = pdfDoc.getForm()\n     * const optionList = form.createOptionList('cool.new.optionList')\n     *\n     * optionList.addToPage(font, page)\n     * ```\n     * An error will be thrown if a field already exists with the provided name.\n     * @param name The fully qualified name for the new option list.\n     * @returns The new option list field.\n     */\n    PDFForm.prototype.createOptionList = function (name) {\n        assertIs(name, 'name', ['string']);\n        var nameParts = splitFieldName(name);\n        var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n        var listBox = PDFAcroListBox.create(this.doc.context);\n        listBox.setPartialName(nameParts.terminal);\n        addFieldToParent(parent, [listBox, listBox.ref], nameParts.terminal);\n        return PDFOptionList.of(listBox, listBox.ref, this.doc);\n    };\n    /**\n     * Create a new radio group field in this [[PDFForm]] with the given name.\n     * For example:\n     * ```js\n     * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n     * const page = pdfDoc.addPage()\n     *\n     * const form = pdfDoc.getForm()\n     * const radioGroup = form.createRadioGroup('cool.new.radioGroup')\n     *\n     * radioGroup.addOptionToPage('is-dog', page, { y: 0 })\n     * radioGroup.addOptionToPage('is-cat', page, { y: 75 })\n     * ```\n     * An error will be thrown if a field already exists with the provided name.\n     * @param name The fully qualified name for the new radio group.\n     * @returns The new radio group field.\n     */\n    PDFForm.prototype.createRadioGroup = function (name) {\n        assertIs(name, 'name', ['string']);\n        var nameParts = splitFieldName(name);\n        var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n        var radioButton = PDFAcroRadioButton.create(this.doc.context);\n        radioButton.setPartialName(nameParts.terminal);\n        addFieldToParent(parent, [radioButton, radioButton.ref], nameParts.terminal);\n        return PDFRadioGroup.of(radioButton, radioButton.ref, this.doc);\n    };\n    /**\n     * Create a new text field in this [[PDFForm]] with the given name.\n     * For example:\n     * ```js\n     * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n     * const page = pdfDoc.addPage()\n     *\n     * const form = pdfDoc.getForm()\n     * const textField = form.createTextField('cool.new.textField')\n     *\n     * textField.addToPage(font, page)\n     * ```\n     * An error will be thrown if a field already exists with the provided name.\n     * @param name The fully qualified name for the new radio group.\n     * @returns The new radio group field.\n     */\n    PDFForm.prototype.createTextField = function (name) {\n        assertIs(name, 'name', ['string']);\n        var nameParts = splitFieldName(name);\n        var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n        var text = PDFAcroText.create(this.doc.context);\n        text.setPartialName(nameParts.terminal);\n        addFieldToParent(parent, [text, text.ref], nameParts.terminal);\n        return PDFTextField.of(text, text.ref, this.doc);\n    };\n    /**\n     * Flatten all fields in this [[PDFForm]].\n     *\n     * Flattening a form field will take the current appearance for each of that\n     * field's widgets and make them part of their page's content stream. All form\n     * fields and annotations associated are then removed. Note that once a form\n     * has been flattened its fields can no longer be accessed or edited.\n     *\n     * This operation is often used after filling form fields to ensure a\n     * consistent appearance across different PDF readers and/or printers.\n     * Another common use case is to copy a template document with form fields\n     * into another document. In this scenario you would load the template\n     * document, fill its fields, flatten it, and then copy its pages into the\n     * recipient document - the filled fields will be copied over.\n     *\n     * For example:\n     * ```js\n     * const form = pdfDoc.getForm();\n     * form.flatten();\n     * ```\n     */\n    PDFForm.prototype.flatten = function (options) {\n        if (options === void 0) { options = { updateFieldAppearances: true }; }\n        if (options.updateFieldAppearances) {\n            this.updateFieldAppearances();\n        }\n        var fields = this.getFields();\n        for (var i = 0, lenFields = fields.length; i < lenFields; i++) {\n            var field = fields[i];\n            var widgets = field.acroField.getWidgets();\n            for (var j = 0, lenWidgets = widgets.length; j < lenWidgets; j++) {\n                var widget = widgets[j];\n                var page = this.findWidgetPage(widget);\n                var widgetRef = this.findWidgetAppearanceRef(field, widget);\n                var xObjectKey = page.node.newXObject('FlatWidget', widgetRef);\n                var rectangle = widget.getRectangle();\n                var operators = __spreadArrays([\n                    pushGraphicsState(),\n                    translate(rectangle.x, rectangle.y)\n                ], rotateInPlace(__assign(__assign({}, rectangle), { rotation: 0 })), [\n                    drawObject(xObjectKey),\n                    popGraphicsState(),\n                ]).filter(Boolean);\n                page.pushOperators.apply(page, operators);\n            }\n            this.removeField(field);\n        }\n    };\n    /**\n     * Remove a field from this [[PDFForm]].\n     *\n     * For example:\n     * ```js\n     * const form = pdfDoc.getForm();\n     * const ageField = form.getFields().find(x => x.getName() === 'Age');\n     * form.removeField(ageField);\n     * ```\n     */\n    PDFForm.prototype.removeField = function (field) {\n        var widgets = field.acroField.getWidgets();\n        var pages = new Set();\n        for (var i = 0, len = widgets.length; i < len; i++) {\n            var widget = widgets[i];\n            var widgetRef = this.findWidgetAppearanceRef(field, widget);\n            var page = this.findWidgetPage(widget);\n            pages.add(page);\n            page.node.removeAnnot(widgetRef);\n        }\n        pages.forEach(function (page) { return page.node.removeAnnot(field.ref); });\n        this.acroForm.removeField(field.acroField);\n        var fieldKids = field.acroField.normalizedEntries().Kids;\n        var kidsCount = fieldKids.size();\n        for (var childIndex = 0; childIndex < kidsCount; childIndex++) {\n            var child = fieldKids.get(childIndex);\n            if (child instanceof PDFRef) {\n                this.doc.context.delete(child);\n            }\n        }\n        this.doc.context.delete(field.ref);\n    };\n    /**\n     * Update the appearance streams for all widgets of all fields in this\n     * [[PDFForm]]. Appearance streams will only be created for a widget if it\n     * does not have any existing appearance streams, or the field's value has\n     * changed (e.g. by calling [[PDFTextField.setText]] or\n     * [[PDFDropdown.select]]).\n     *\n     * For example:\n     * ```js\n     * const courier = await pdfDoc.embedFont(StandardFonts.Courier)\n     * const form = pdfDoc.getForm()\n     * form.updateFieldAppearances(courier)\n     * ```\n     *\n     * **IMPORTANT:** The default value for the `font` parameter is\n     * [[StandardFonts.Helvetica]]. Note that this is a WinAnsi font. This means\n     * that encoding errors will be thrown if any fields contain text with\n     * characters outside the WinAnsi character set (the latin alphabet).\n     *\n     * Embedding a custom font and passing that as the `font`\n     * parameter allows you to generate appearance streams with non WinAnsi\n     * characters (assuming your custom font supports them).\n     *\n     * > **NOTE:** The [[PDFDocument.save]] method will call this method to\n     * > update appearances automatically if a form was accessed via the\n     * > [[PDFDocument.getForm]] method prior to saving.\n     *\n     * @param font Optionally, the font to use when creating new appearances.\n     */\n    PDFForm.prototype.updateFieldAppearances = function (font) {\n        assertOrUndefined(font, 'font', [[PDFFont, 'PDFFont']]);\n        font = font !== null && font !== void 0 ? font : this.getDefaultFont();\n        var fields = this.getFields();\n        for (var idx = 0, len = fields.length; idx < len; idx++) {\n            var field = fields[idx];\n            if (field.needsAppearancesUpdate()) {\n                field.defaultUpdateAppearances(font);\n            }\n        }\n    };\n    /**\n     * Mark a field as dirty. This will cause its appearance streams to be\n     * updated by [[PDFForm.updateFieldAppearances]].\n     * ```js\n     * const form = pdfDoc.getForm()\n     * const field = form.getField('foo.bar')\n     * form.markFieldAsDirty(field.ref)\n     * ```\n     * @param fieldRef The reference to the field that should be marked.\n     */\n    PDFForm.prototype.markFieldAsDirty = function (fieldRef) {\n        assertOrUndefined(fieldRef, 'fieldRef', [[PDFRef, 'PDFRef']]);\n        this.dirtyFields.add(fieldRef);\n    };\n    /**\n     * Mark a field as dirty. This will cause its appearance streams to not be\n     * updated by [[PDFForm.updateFieldAppearances]].\n     * ```js\n     * const form = pdfDoc.getForm()\n     * const field = form.getField('foo.bar')\n     * form.markFieldAsClean(field.ref)\n     * ```\n     * @param fieldRef The reference to the field that should be marked.\n     */\n    PDFForm.prototype.markFieldAsClean = function (fieldRef) {\n        assertOrUndefined(fieldRef, 'fieldRef', [[PDFRef, 'PDFRef']]);\n        this.dirtyFields.delete(fieldRef);\n    };\n    /**\n     * Returns `true` is the specified field has been marked as dirty.\n     * ```js\n     * const form = pdfDoc.getForm()\n     * const field = form.getField('foo.bar')\n     * if (form.fieldIsDirty(field.ref)) console.log('Field is dirty')\n     * ```\n     * @param fieldRef The reference to the field that should be checked.\n     * @returns Whether or not the specified field is dirty.\n     */\n    PDFForm.prototype.fieldIsDirty = function (fieldRef) {\n        assertOrUndefined(fieldRef, 'fieldRef', [[PDFRef, 'PDFRef']]);\n        return this.dirtyFields.has(fieldRef);\n    };\n    PDFForm.prototype.getDefaultFont = function () {\n        return this.defaultFontCache.access();\n    };\n    PDFForm.prototype.findWidgetPage = function (widget) {\n        var pageRef = widget.P();\n        var page = this.doc.getPages().find(function (x) { return x.ref === pageRef; });\n        if (page === undefined) {\n            var widgetRef = this.doc.context.getObjectRef(widget.dict);\n            if (widgetRef === undefined) {\n                throw new Error('Could not find PDFRef for PDFObject');\n            }\n            page = this.doc.findPageForAnnotationRef(widgetRef);\n            if (page === undefined) {\n                throw new Error(\"Could not find page for PDFRef \" + widgetRef);\n            }\n        }\n        return page;\n    };\n    PDFForm.prototype.findWidgetAppearanceRef = function (field, widget) {\n        var _a;\n        var refOrDict = widget.getNormalAppearance();\n        if (refOrDict instanceof PDFDict &&\n            (field instanceof PDFCheckBox || field instanceof PDFRadioGroup)) {\n            var value = field.acroField.getValue();\n            var ref = (_a = refOrDict.get(value)) !== null && _a !== void 0 ? _a : refOrDict.get(PDFName.of('Off'));\n            if (ref instanceof PDFRef) {\n                refOrDict = ref;\n            }\n        }\n        if (!(refOrDict instanceof PDFRef)) {\n            var name_1 = field.getName();\n            throw new Error(\"Failed to extract appearance ref for: \" + name_1);\n        }\n        return refOrDict;\n    };\n    PDFForm.prototype.findOrCreateNonTerminals = function (partialNames) {\n        var nonTerminal = [\n            this.acroForm,\n        ];\n        for (var idx = 0, len = partialNames.length; idx < len; idx++) {\n            var namePart = partialNames[idx];\n            if (!namePart)\n                throw new InvalidFieldNamePartError(namePart);\n            var parent_1 = nonTerminal[0], parentRef = nonTerminal[1];\n            var res = this.findNonTerminal(namePart, parent_1);\n            if (res) {\n                nonTerminal = res;\n            }\n            else {\n                var node = PDFAcroNonTerminal.create(this.doc.context);\n                node.setPartialName(namePart);\n                node.setParent(parentRef);\n                var nodeRef = this.doc.context.register(node.dict);\n                parent_1.addField(nodeRef);\n                nonTerminal = [node, nodeRef];\n            }\n        }\n        return nonTerminal;\n    };\n    PDFForm.prototype.findNonTerminal = function (partialName, parent) {\n        var fields = parent instanceof PDFAcroForm\n            ? this.acroForm.getFields()\n            : createPDFAcroFields(parent.Kids());\n        for (var idx = 0, len = fields.length; idx < len; idx++) {\n            var _a = fields[idx], field = _a[0], ref = _a[1];\n            if (field.getPartialName() === partialName) {\n                if (field instanceof PDFAcroNonTerminal)\n                    return [field, ref];\n                throw new FieldAlreadyExistsError(partialName);\n            }\n        }\n        return undefined;\n    };\n    /**\n     * > **NOTE:** You probably don't want to call this method directly. Instead,\n     * > consider using the [[PDFDocument.getForm]] method, which will create an\n     * > instance of [[PDFForm]] for you.\n     *\n     * Create an instance of [[PDFForm]] from an existing acroForm and embedder\n     *\n     * @param acroForm The underlying `PDFAcroForm` for this form.\n     * @param doc The document to which the form will belong.\n     */\n    PDFForm.of = function (acroForm, doc) {\n        return new PDFForm(acroForm, doc);\n    };\n    return PDFForm;\n}());\nexport default PDFForm;\nvar convertToPDFField = function (field, ref, doc) {\n    if (field instanceof PDFAcroPushButton)\n        return PDFButton.of(field, ref, doc);\n    if (field instanceof PDFAcroCheckBox)\n        return PDFCheckBox.of(field, ref, doc);\n    if (field instanceof PDFAcroComboBox)\n        return PDFDropdown.of(field, ref, doc);\n    if (field instanceof PDFAcroListBox)\n        return PDFOptionList.of(field, ref, doc);\n    if (field instanceof PDFAcroText)\n        return PDFTextField.of(field, ref, doc);\n    if (field instanceof PDFAcroRadioButton) {\n        return PDFRadioGroup.of(field, ref, doc);\n    }\n    if (field instanceof PDFAcroSignature) {\n        return PDFSignature.of(field, ref, doc);\n    }\n    return undefined;\n};\nvar splitFieldName = function (fullyQualifiedName) {\n    if (fullyQualifiedName.length === 0) {\n        throw new Error('PDF field names must not be empty strings');\n    }\n    var parts = fullyQualifiedName.split('.');\n    for (var idx = 0, len = parts.length; idx < len; idx++) {\n        if (parts[idx] === '') {\n            throw new Error(\"Periods in PDF field names must be separated by at least one character: \\\"\" + fullyQualifiedName + \"\\\"\");\n        }\n    }\n    if (parts.length === 1)\n        return { nonTerminal: [], terminal: parts[0] };\n    return {\n        nonTerminal: parts.slice(0, parts.length - 1),\n        terminal: parts[parts.length - 1],\n    };\n};\nvar addFieldToParent = function (_a, _b, partialName) {\n    var parent = _a[0], parentRef = _a[1];\n    var field = _b[0], fieldRef = _b[1];\n    var entries = parent.normalizedEntries();\n    var fields = createPDFAcroFields('Kids' in entries ? entries.Kids : entries.Fields);\n    for (var idx = 0, len = fields.length; idx < len; idx++) {\n        if (fields[idx][0].getPartialName() === partialName) {\n            throw new FieldAlreadyExistsError(partialName);\n        }\n    }\n    parent.addField(fieldRef);\n    field.setParent(parentRef);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}