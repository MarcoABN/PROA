{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { PDFName, PDFArray, PDFDict, PDFHexString } from \"../core\";\n/**\n * Represents a file that has been embedded in a [[PDFDocument]].\n */\nvar PDFEmbeddedFile = /** @class */function () {\n  function PDFEmbeddedFile(ref, doc, embedder) {\n    this.alreadyEmbedded = false;\n    this.ref = ref;\n    this.doc = doc;\n    this.embedder = embedder;\n  }\n  /**\n   * > **NOTE:** You probably don't need to call this method directly. The\n   * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\n   * > automatically ensure all embeddable files get embedded.\n   *\n   * Embed this embeddable file in its document.\n   *\n   * @returns Resolves when the embedding is complete.\n   */\n  PDFEmbeddedFile.prototype.embed = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var ref, Names, EmbeddedFiles, EFNames, AF;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!this.alreadyEmbedded) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.embedder.embedIntoContext(this.doc.context, this.ref)];\n          case 1:\n            ref = _a.sent();\n            if (!this.doc.catalog.has(PDFName.of('Names'))) {\n              this.doc.catalog.set(PDFName.of('Names'), this.doc.context.obj({}));\n            }\n            Names = this.doc.catalog.lookup(PDFName.of('Names'), PDFDict);\n            if (!Names.has(PDFName.of('EmbeddedFiles'))) {\n              Names.set(PDFName.of('EmbeddedFiles'), this.doc.context.obj({}));\n            }\n            EmbeddedFiles = Names.lookup(PDFName.of('EmbeddedFiles'), PDFDict);\n            if (!EmbeddedFiles.has(PDFName.of('Names'))) {\n              EmbeddedFiles.set(PDFName.of('Names'), this.doc.context.obj([]));\n            }\n            EFNames = EmbeddedFiles.lookup(PDFName.of('Names'), PDFArray);\n            EFNames.push(PDFHexString.fromText(this.embedder.fileName));\n            EFNames.push(ref);\n            /**\n             * The AF-Tag is needed to achieve PDF-A3 compliance for embedded files\n             *\n             * The following document outlines the uses cases of the associated files (AF) tag.\n             * See:\n             * https://www.pdfa.org/wp-content/uploads/2018/10/PDF20_AN002-AF.pdf\n             */\n            if (!this.doc.catalog.has(PDFName.of('AF'))) {\n              this.doc.catalog.set(PDFName.of('AF'), this.doc.context.obj([]));\n            }\n            AF = this.doc.catalog.lookup(PDFName.of('AF'), PDFArray);\n            AF.push(ref);\n            this.alreadyEmbedded = true;\n            _a.label = 2;\n          case 2:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFDocument.attach]] method, which will create\n   * instances of [[PDFEmbeddedFile]] for you.\n   *\n   * Create an instance of [[PDFEmbeddedFile]] from an existing ref and embedder\n   *\n   * @param ref The unique reference for this file.\n   * @param doc The document to which the file will belong.\n   * @param embedder The embedder that will be used to embed the file.\n   */\n  PDFEmbeddedFile.of = function (ref, doc, embedder) {\n    return new PDFEmbeddedFile(ref, doc, embedder);\n  };\n  return PDFEmbeddedFile;\n}();\nexport default PDFEmbeddedFile;","map":{"version":3,"names":["__awaiter","__generator","PDFName","PDFArray","PDFDict","PDFHexString","PDFEmbeddedFile","ref","doc","embedder","alreadyEmbedded","prototype","embed","Names","EmbeddedFiles","EFNames","AF","_a","label","embedIntoContext","context","sent","catalog","has","of","set","obj","lookup","push","fromText","fileName"],"sources":["E:/PROA/frontPROA/node_modules/pdf-lib/es/api/PDFEmbeddedFile.js"],"sourcesContent":["import { __awaiter, __generator } from \"tslib\";\nimport { PDFName, PDFArray, PDFDict, PDFHexString } from \"../core\";\n/**\n * Represents a file that has been embedded in a [[PDFDocument]].\n */\nvar PDFEmbeddedFile = /** @class */ (function () {\n    function PDFEmbeddedFile(ref, doc, embedder) {\n        this.alreadyEmbedded = false;\n        this.ref = ref;\n        this.doc = doc;\n        this.embedder = embedder;\n    }\n    /**\n     * > **NOTE:** You probably don't need to call this method directly. The\n     * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\n     * > automatically ensure all embeddable files get embedded.\n     *\n     * Embed this embeddable file in its document.\n     *\n     * @returns Resolves when the embedding is complete.\n     */\n    PDFEmbeddedFile.prototype.embed = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var ref, Names, EmbeddedFiles, EFNames, AF;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!!this.alreadyEmbedded) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.embedder.embedIntoContext(this.doc.context, this.ref)];\n                    case 1:\n                        ref = _a.sent();\n                        if (!this.doc.catalog.has(PDFName.of('Names'))) {\n                            this.doc.catalog.set(PDFName.of('Names'), this.doc.context.obj({}));\n                        }\n                        Names = this.doc.catalog.lookup(PDFName.of('Names'), PDFDict);\n                        if (!Names.has(PDFName.of('EmbeddedFiles'))) {\n                            Names.set(PDFName.of('EmbeddedFiles'), this.doc.context.obj({}));\n                        }\n                        EmbeddedFiles = Names.lookup(PDFName.of('EmbeddedFiles'), PDFDict);\n                        if (!EmbeddedFiles.has(PDFName.of('Names'))) {\n                            EmbeddedFiles.set(PDFName.of('Names'), this.doc.context.obj([]));\n                        }\n                        EFNames = EmbeddedFiles.lookup(PDFName.of('Names'), PDFArray);\n                        EFNames.push(PDFHexString.fromText(this.embedder.fileName));\n                        EFNames.push(ref);\n                        /**\n                         * The AF-Tag is needed to achieve PDF-A3 compliance for embedded files\n                         *\n                         * The following document outlines the uses cases of the associated files (AF) tag.\n                         * See:\n                         * https://www.pdfa.org/wp-content/uploads/2018/10/PDF20_AN002-AF.pdf\n                         */\n                        if (!this.doc.catalog.has(PDFName.of('AF'))) {\n                            this.doc.catalog.set(PDFName.of('AF'), this.doc.context.obj([]));\n                        }\n                        AF = this.doc.catalog.lookup(PDFName.of('AF'), PDFArray);\n                        AF.push(ref);\n                        this.alreadyEmbedded = true;\n                        _a.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * > **NOTE:** You probably don't want to call this method directly. Instead,\n     * > consider using the [[PDFDocument.attach]] method, which will create\n     * instances of [[PDFEmbeddedFile]] for you.\n     *\n     * Create an instance of [[PDFEmbeddedFile]] from an existing ref and embedder\n     *\n     * @param ref The unique reference for this file.\n     * @param doc The document to which the file will belong.\n     * @param embedder The embedder that will be used to embed the file.\n     */\n    PDFEmbeddedFile.of = function (ref, doc, embedder) {\n        return new PDFEmbeddedFile(ref, doc, embedder);\n    };\n    return PDFEmbeddedFile;\n}());\nexport default PDFEmbeddedFile;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}