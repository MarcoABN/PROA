{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFObject from \"./PDFObject\";\nimport CharCodes from \"../syntax/CharCodes\";\nimport { copyStringIntoBuffer, toHexStringOfMinLength, utf16Decode, utf16Encode, pdfDocEncodingDecode, parseDate, hasUtf16BOM } from \"../../utils\";\nimport { InvalidPDFDateStringError } from \"../errors\";\nvar PDFHexString = /** @class */function (_super) {\n  __extends(PDFHexString, _super);\n  function PDFHexString(value) {\n    var _this = _super.call(this) || this;\n    _this.value = value;\n    return _this;\n  }\n  PDFHexString.prototype.asBytes = function () {\n    // Append a zero if the number of digits is odd. See PDF spec 7.3.4.3\n    var hex = this.value + (this.value.length % 2 === 1 ? '0' : '');\n    var hexLength = hex.length;\n    var bytes = new Uint8Array(hex.length / 2);\n    var hexOffset = 0;\n    var bytesOffset = 0;\n    // Interpret each pair of hex digits as a single byte\n    while (hexOffset < hexLength) {\n      var byte = parseInt(hex.substring(hexOffset, hexOffset + 2), 16);\n      bytes[bytesOffset] = byte;\n      hexOffset += 2;\n      bytesOffset += 1;\n    }\n    return bytes;\n  };\n  PDFHexString.prototype.decodeText = function () {\n    var bytes = this.asBytes();\n    if (hasUtf16BOM(bytes)) return utf16Decode(bytes);\n    return pdfDocEncodingDecode(bytes);\n  };\n  PDFHexString.prototype.decodeDate = function () {\n    var text = this.decodeText();\n    var date = parseDate(text);\n    if (!date) throw new InvalidPDFDateStringError(text);\n    return date;\n  };\n  PDFHexString.prototype.asString = function () {\n    return this.value;\n  };\n  PDFHexString.prototype.clone = function () {\n    return PDFHexString.of(this.value);\n  };\n  PDFHexString.prototype.toString = function () {\n    return \"<\" + this.value + \">\";\n  };\n  PDFHexString.prototype.sizeInBytes = function () {\n    return this.value.length + 2;\n  };\n  PDFHexString.prototype.copyBytesInto = function (buffer, offset) {\n    buffer[offset++] = CharCodes.LessThan;\n    offset += copyStringIntoBuffer(this.value, buffer, offset);\n    buffer[offset++] = CharCodes.GreaterThan;\n    return this.value.length + 2;\n  };\n  PDFHexString.of = function (value) {\n    return new PDFHexString(value);\n  };\n  PDFHexString.fromText = function (value) {\n    var encoded = utf16Encode(value);\n    var hex = '';\n    for (var idx = 0, len = encoded.length; idx < len; idx++) {\n      hex += toHexStringOfMinLength(encoded[idx], 4);\n    }\n    return new PDFHexString(hex);\n  };\n  return PDFHexString;\n}(PDFObject);\nexport default PDFHexString;","map":{"version":3,"names":["__extends","PDFObject","CharCodes","copyStringIntoBuffer","toHexStringOfMinLength","utf16Decode","utf16Encode","pdfDocEncodingDecode","parseDate","hasUtf16BOM","InvalidPDFDateStringError","PDFHexString","_super","value","_this","call","prototype","asBytes","hex","length","hexLength","bytes","Uint8Array","hexOffset","bytesOffset","byte","parseInt","substring","decodeText","decodeDate","text","date","asString","clone","of","toString","sizeInBytes","copyBytesInto","buffer","offset","LessThan","GreaterThan","fromText","encoded","idx","len"],"sources":["E:/PROA/frontPROA/node_modules/pdf-lib/es/core/objects/PDFHexString.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport PDFObject from \"./PDFObject\";\nimport CharCodes from \"../syntax/CharCodes\";\nimport { copyStringIntoBuffer, toHexStringOfMinLength, utf16Decode, utf16Encode, pdfDocEncodingDecode, parseDate, hasUtf16BOM, } from \"../../utils\";\nimport { InvalidPDFDateStringError } from \"../errors\";\nvar PDFHexString = /** @class */ (function (_super) {\n    __extends(PDFHexString, _super);\n    function PDFHexString(value) {\n        var _this = _super.call(this) || this;\n        _this.value = value;\n        return _this;\n    }\n    PDFHexString.prototype.asBytes = function () {\n        // Append a zero if the number of digits is odd. See PDF spec 7.3.4.3\n        var hex = this.value + (this.value.length % 2 === 1 ? '0' : '');\n        var hexLength = hex.length;\n        var bytes = new Uint8Array(hex.length / 2);\n        var hexOffset = 0;\n        var bytesOffset = 0;\n        // Interpret each pair of hex digits as a single byte\n        while (hexOffset < hexLength) {\n            var byte = parseInt(hex.substring(hexOffset, hexOffset + 2), 16);\n            bytes[bytesOffset] = byte;\n            hexOffset += 2;\n            bytesOffset += 1;\n        }\n        return bytes;\n    };\n    PDFHexString.prototype.decodeText = function () {\n        var bytes = this.asBytes();\n        if (hasUtf16BOM(bytes))\n            return utf16Decode(bytes);\n        return pdfDocEncodingDecode(bytes);\n    };\n    PDFHexString.prototype.decodeDate = function () {\n        var text = this.decodeText();\n        var date = parseDate(text);\n        if (!date)\n            throw new InvalidPDFDateStringError(text);\n        return date;\n    };\n    PDFHexString.prototype.asString = function () {\n        return this.value;\n    };\n    PDFHexString.prototype.clone = function () {\n        return PDFHexString.of(this.value);\n    };\n    PDFHexString.prototype.toString = function () {\n        return \"<\" + this.value + \">\";\n    };\n    PDFHexString.prototype.sizeInBytes = function () {\n        return this.value.length + 2;\n    };\n    PDFHexString.prototype.copyBytesInto = function (buffer, offset) {\n        buffer[offset++] = CharCodes.LessThan;\n        offset += copyStringIntoBuffer(this.value, buffer, offset);\n        buffer[offset++] = CharCodes.GreaterThan;\n        return this.value.length + 2;\n    };\n    PDFHexString.of = function (value) { return new PDFHexString(value); };\n    PDFHexString.fromText = function (value) {\n        var encoded = utf16Encode(value);\n        var hex = '';\n        for (var idx = 0, len = encoded.length; idx < len; idx++) {\n            hex += toHexStringOfMinLength(encoded[idx], 4);\n        }\n        return new PDFHexString(hex);\n    };\n    return PDFHexString;\n}(PDFObject));\nexport default PDFHexString;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}