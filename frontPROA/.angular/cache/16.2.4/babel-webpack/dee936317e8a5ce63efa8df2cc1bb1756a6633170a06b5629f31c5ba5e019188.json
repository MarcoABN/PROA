{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class ValidadorcpfcnpjService {\n  constructor() {}\n  validarCpfCnpj(cpfCnpj) {\n    const valor = cpfCnpj.replace(/[^\\d]+/g, '');\n    if (valor.length === 11) {\n      return this.validarCPF(valor);\n    } else if (valor.length === 14) {\n      return this.validarCNPJ(valor);\n    }\n    return false;\n  }\n  validarCPF(cpf) {\n    if (cpf.length !== 11 || /^(\\d)\\1{10}$/.test(cpf)) {\n      return false;\n    }\n    let soma = 0;\n    let resto;\n    for (let i = 1; i <= 9; i++) {\n      soma += parseInt(cpf.substring(i - 1, i)) * (11 - i);\n    }\n    resto = soma * 10 % 11;\n    if (resto === 10 || resto === 11) {\n      resto = 0;\n    }\n    if (resto !== parseInt(cpf.substring(9, 10))) {\n      return false;\n    }\n    soma = 0;\n    for (let i = 1; i <= 10; i++) {\n      soma += parseInt(cpf.substring(i - 1, i)) * (12 - i);\n    }\n    resto = soma * 10 % 11;\n    if (resto === 10 || resto === 11) {\n      resto = 0;\n    }\n    return resto === parseInt(cpf.substring(10, 11));\n  }\n  validarCNPJ(cnpj) {\n    if (cnpj.length !== 14 || /^(\\d)\\1{13}$/.test(cnpj)) {\n      return false;\n    }\n    let tamanho = cnpj.length - 2;\n    let numeros = cnpj.substring(0, tamanho);\n    let digitos = cnpj.substring(tamanho);\n    let soma = 0;\n    let pos = tamanho - 7;\n    for (let i = tamanho; i >= 1; i--) {\n      soma += parseInt(numeros.charAt(tamanho - i)) * pos--;\n      if (pos < 2) {\n        pos = 9;\n      }\n    }\n    let resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;\n    if (resultado !== parseInt(digitos.charAt(0))) {\n      return false;\n    }\n    tamanho = tamanho + 1;\n    numeros = cnpj.substring(0, tamanho);\n    soma = 0;\n    pos = tamanho - 7;\n    for (let i = tamanho; i >= 1; i--) {\n      soma += parseInt(numeros.charAt(tamanho - i)) * pos--;\n      if (pos < 2) {\n        pos = 9;\n      }\n    }\n    resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;\n    return resultado === parseInt(digitos.charAt(1));\n  }\n  static #_ = this.ɵfac = function ValidadorcpfcnpjService_Factory(t) {\n    return new (t || ValidadorcpfcnpjService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ValidadorcpfcnpjService,\n    factory: ValidadorcpfcnpjService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["ValidadorcpfcnpjService","constructor","validarCpfCnpj","cpfCnpj","valor","replace","length","validarCPF","validarCNPJ","cpf","test","soma","resto","i","parseInt","substring","cnpj","tamanho","numeros","digitos","pos","charAt","resultado","_","_2","factory","ɵfac","providedIn"],"sources":["E:\\PROA\\frontPROA\\src\\app\\services\\validacao\\validadorcpfcnpj.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ValidadorcpfcnpjService {\r\n\r\n  constructor() { }\r\n\r\n  public validarCpfCnpj(cpfCnpj: string): boolean {\r\n    const valor = cpfCnpj.replace(/[^\\d]+/g, '');\r\n\r\n    if (valor.length === 11) {\r\n      return this.validarCPF(valor);\r\n    } else if (valor.length === 14) {\r\n      return this.validarCNPJ(valor);\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  private validarCPF(cpf: string): boolean {\r\n    if (cpf.length !== 11 || /^(\\d)\\1{10}$/.test(cpf)) {\r\n      return false;\r\n    }\r\n\r\n    let soma = 0;\r\n    let resto;\r\n\r\n    for (let i = 1; i <= 9; i++) {\r\n      soma += parseInt(cpf.substring(i - 1, i)) * (11 - i);\r\n    }\r\n\r\n    resto = (soma * 10) % 11;\r\n\r\n    if (resto === 10 || resto === 11) {\r\n      resto = 0;\r\n    }\r\n\r\n    if (resto !== parseInt(cpf.substring(9, 10))) {\r\n      return false;\r\n    }\r\n\r\n    soma = 0;\r\n\r\n    for (let i = 1; i <= 10; i++) {\r\n      soma += parseInt(cpf.substring(i - 1, i)) * (12 - i);\r\n    }\r\n\r\n    resto = (soma * 10) % 11;\r\n\r\n    if (resto === 10 || resto === 11) {\r\n      resto = 0;\r\n    }\r\n\r\n    return resto === parseInt(cpf.substring(10, 11));\r\n  }\r\n\r\n  private validarCNPJ(cnpj: string): boolean {\r\n    if (cnpj.length !== 14 || /^(\\d)\\1{13}$/.test(cnpj)) {\r\n      return false;\r\n    }\r\n\r\n    let tamanho = cnpj.length - 2;\r\n    let numeros = cnpj.substring(0, tamanho);\r\n    let digitos = cnpj.substring(tamanho);\r\n    let soma = 0;\r\n    let pos = tamanho - 7;\r\n\r\n    for (let i = tamanho; i >= 1; i--) {\r\n      soma += parseInt(numeros.charAt(tamanho - i)) * pos--;\r\n      if (pos < 2) {\r\n        pos = 9;\r\n      }\r\n    }\r\n\r\n    let resultado = soma % 11 < 2 ? 0 : 11 - (soma % 11);\r\n\r\n    if (resultado !== parseInt(digitos.charAt(0))) {\r\n      return false;\r\n    }\r\n\r\n    tamanho = tamanho + 1;\r\n    numeros = cnpj.substring(0, tamanho);\r\n    soma = 0;\r\n    pos = tamanho - 7;\r\n\r\n    for (let i = tamanho; i >= 1; i--) {\r\n      soma += parseInt(numeros.charAt(tamanho - i)) * pos--;\r\n      if (pos < 2) {\r\n        pos = 9;\r\n      }\r\n    }\r\n\r\n    resultado = soma % 11 < 2 ? 0 : 11 - (soma % 11);\r\n\r\n    return resultado === parseInt(digitos.charAt(1));\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}