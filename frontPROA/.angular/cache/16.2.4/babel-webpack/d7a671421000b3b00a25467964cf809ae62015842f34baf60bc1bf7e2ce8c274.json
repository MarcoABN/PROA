{"ast":null,"code":"import _asyncToGenerator from \"E:/PROA/frontPROA/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { PDFDocument } from 'pdf-lib';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"../front-motor.service\";\nimport * as i3 from \"../front-notafiscal.service\";\nexport let AnexosService = /*#__PURE__*/(() => {\n  class AnexosService {\n    constructor(datePipe, motorService, notaFiscalService) {\n      this.datePipe = datePipe;\n      this.motorService = motorService;\n      this.notaFiscalService = notaFiscalService;\n      this.motores = [];\n    }\n    //Função para gerar o Anexo 2D. Se for uma solicitação única não é necessário o último parâmtro na chamada da função e o PDF será exibido diretamente.\n    //Se for uma chamada do serviço-anexo é necessário passar algo no último parâmetro. Isso irá sinalizar que é um serviço e retornar o arquivo de forma dinâmica.\n    anexo2D(embarcacao, cliente, natureza, servico) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        _this.motorService.listarMotorPorEmbarcacao(embarcacao.id).subscribe(motores => {\n          _this.motores = motores;\n        });\n        _this.notaFiscalService.listarNotaFiscalPorEmbarcacao(embarcacao.id).subscribe(notasFiscais => {\n          _this.notaFiscal = notasFiscais[0];\n        });\n        try {\n          const pdfBytes = yield fetch('assets/pdfanexos/Anexo2D-N211.pdf').then(res => res.arrayBuffer());\n          const pdfDoc = yield PDFDocument.load(pdfBytes);\n          const form = pdfDoc.getForm();\n          //Formatação das datas:\n          const formattedDtConstrucao = _this.datePipe.transform(embarcacao.dtConstrucao, 'dd/MM/yyyy') || '';\n          const formattedDtEmissao = _this.datePipe.transform(cliente.dtEmissao, 'dd/MM/yyyy') || '';\n          form.getTextField('nomeembarcacao').setText(embarcacao.nomeEmbarcacao);\n          form.getTextField('inscricao').setText(embarcacao.numInscricao ?? '');\n          form.getTextField('arqbruta').setText(embarcacao.arqueacaoBruta.toString());\n          form.getTextField('tipo').setText(embarcacao.tipoEmbarcacao);\n          form.getTextField('atividade').setText(embarcacao.tipoAtividade);\n          form.getTextField('arqliquida').setText(embarcacao.arqueacaoLiquida.toString());\n          form.getTextField('comprimento').setText(embarcacao.compTotal.toString());\n          form.getTextField('tripulantes').setText(embarcacao.qtdTripulantes.toString());\n          form.getTextField('anoconstrucao').setText(formattedDtConstrucao);\n          form.getTextField('boca').setText(embarcacao.bocaMoldada.toString());\n          form.getTextField('passageiros').setText(embarcacao.lotacao.toString());\n          form.getTextField('numcasco').setText(embarcacao.numCasco);\n          form.getTextField('contorno').setText(embarcacao.contorno.toString());\n          form.getTextField('pontal').setText(embarcacao.pontalMoldado.toString());\n          form.getTextField('matcasco').setText(embarcacao.matCasco);\n          if (natureza === 'Inscrição') {\n            form.getCheckBox('check_inscricao').check();\n          } else if (natureza === 'Cancelamento') {\n            form.getCheckBox('check_cancelamento').check();\n          } else if (natureza === 'Transf. Propriedade') {\n            form.getCheckBox('check_transfproprietario').check();\n          } else if (natureza === 'Transf. Jurisdição') {\n            form.getCheckBox('check_transfjurisdicao').check();\n          } else if (natureza === 'Atualização de Dados') {\n            form.getCheckBox('check_atualizacaodados').check();\n          } else if (natureza === 'Emissão de Certidão') {\n            form.getCheckBox('check_emissaocertidao').check();\n          }\n          ;\n          form.getTextField('nomeproprietario').setText(cliente.nome);\n          form.getTextField('endereco').setText(`${cliente.logradouro}, ${cliente.numero} - ${cliente.complemento}`);\n          form.getTextField('cidade').setText(cliente.cidade);\n          form.getTextField('bairro').setText(cliente.bairro);\n          form.getTextField('cep').setText(cliente.cep);\n          form.getTextField('rg').setText(cliente.rg);\n          form.getTextField('orgemissor').setText(cliente.orgEmissor);\n          form.getTextField('dtemissao').setText(formattedDtEmissao);\n          form.getTextField('cpfcnpj').setText(cliente.cpfcnpj);\n          form.getTextField('telefone').setText(cliente.telefone);\n          form.getTextField('celular').setText(cliente.celular);\n          form.getTextField('email').setText(cliente.email);\n          if (_this.motores.length === 1) {\n            form.getTextField('marcamotor1').setText(_this.motores[0].marca.toString());\n            form.getTextField('potmotor1').setText(_this.motores[0].potencia.toString());\n            form.getTextField('numseriemotor1').setText(_this.motores[0].numSerie.toString());\n          }\n          if (_this.motores.length === 2) {\n            form.getTextField('marcamotor1').setText(_this.motores[0].marca.toString());\n            form.getTextField('potmotor1').setText(_this.motores[0].potencia.toString());\n            form.getTextField('numseriemotor1').setText(_this.motores[0].numSerie.toString());\n            form.getTextField('marcamotor2').setText(_this.motores[1].marca.toString());\n            form.getTextField('potmotor2').setText(_this.motores[1].potencia.toString());\n            form.getTextField('numseriemotor2').setText(_this.motores[1].numSerie.toString());\n          }\n          if (_this.motores.length === 3) {\n            form.getTextField('marcamotor1').setText(_this.motores[0].marca.toString());\n            form.getTextField('potmotor1').setText(_this.motores[0].potencia.toString());\n            form.getTextField('numseriemotor1').setText(_this.motores[0].numSerie.toString());\n            form.getTextField('marcamotor2').setText(_this.motores[1].marca.toString());\n            form.getTextField('potmotor2').setText(_this.motores[1].potencia.toString());\n            form.getTextField('numseriemotor2').setText(_this.motores[1].numSerie.toString());\n            form.getTextField('marcamotor3').setText(_this.motores[2].marca.toString());\n            form.getTextField('potmotor3').setText(_this.motores[2].potencia.toString());\n            form.getTextField('numseriemotor3').setText(_this.motores[2].numSerie.toString());\n          }\n          if (_this.notaFiscal) {\n            const formattedDtvenda = _this.datePipe.transform(_this.notaFiscal.dtVenda, 'dd/MM/yyyy') || '';\n            form.getTextField('numnota').setText(_this.notaFiscal.numeroNotaFiscal.toString());\n            form.getTextField('dtvenda').setText(formattedDtvenda);\n            form.getTextField('local').setText(_this.notaFiscal.local.toString());\n            form.getTextField('vendedor').setText(_this.notaFiscal.razaoSocial.toString());\n            form.getTextField('cpfcnpj_vendedor').setText(_this.notaFiscal.cnpjvendedor.toString());\n          }\n          const hoje = new Date();\n          const dia = hoje.getDate().toString().padStart(2, '0');\n          const mes = (hoje.getMonth() + 1).toString().padStart(2, '0'); //Os meses são baseados em zero, então é necessário adicionar 1.\n          const ano = hoje.getFullYear().toString();\n          form.getTextField('localdata').setText(embarcacao.cidade + ', ' + dia + '/' + mes + '/' + ano);\n          form.flatten();\n          const modifiedPdfBytes = yield pdfDoc.save();\n          if (!servico) {\n            _this.abrirPDFemJanela(modifiedPdfBytes);\n            console.log('PDF Criado!');\n          } else {\n            return modifiedPdfBytes;\n          }\n        } catch (err) {\n          console.error(err);\n        }\n      })();\n    }\n    downloadPdf(data, filename) {\n      const blob = new Blob([data], {\n        type: 'application/pdf'\n      });\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      document.body.appendChild(a);\n      a.style.display = 'none';\n      a.href = url;\n      a.download = filename;\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    }\n    abrirPDFemJanela(data) {\n      const blob = new Blob([data], {\n        type: 'application/pdf'\n      });\n      const url = window.URL.createObjectURL(blob);\n      window.open(url, '_blank');\n    }\n    static #_ = this.ɵfac = function AnexosService_Factory(t) {\n      return new (t || AnexosService)(i0.ɵɵinject(i1.DatePipe), i0.ɵɵinject(i2.FrontMotorService), i0.ɵɵinject(i3.FrontNotafiscalService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AnexosService,\n      factory: AnexosService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AnexosService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}