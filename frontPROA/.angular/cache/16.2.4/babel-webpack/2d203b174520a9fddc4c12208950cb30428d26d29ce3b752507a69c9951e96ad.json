{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFDict from \"../objects/PDFDict\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFAcroField from \"./PDFAcroField\";\nimport PDFWidgetAnnotation from \"../annotation/PDFWidgetAnnotation\";\nimport { IndexOutOfBoundsError } from \"../errors\";\nvar PDFAcroTerminal = /** @class */function (_super) {\n  __extends(PDFAcroTerminal, _super);\n  function PDFAcroTerminal() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  PDFAcroTerminal.prototype.FT = function () {\n    var nameOrRef = this.getInheritableAttribute(PDFName.of('FT'));\n    return this.dict.context.lookup(nameOrRef, PDFName);\n  };\n  PDFAcroTerminal.prototype.getWidgets = function () {\n    var kidDicts = this.Kids();\n    // This field is itself a widget\n    if (!kidDicts) return [PDFWidgetAnnotation.fromDict(this.dict)];\n    // This field's kids are its widgets\n    var widgets = new Array(kidDicts.size());\n    for (var idx = 0, len = kidDicts.size(); idx < len; idx++) {\n      var dict = kidDicts.lookup(idx, PDFDict);\n      widgets[idx] = PDFWidgetAnnotation.fromDict(dict);\n    }\n    return widgets;\n  };\n  PDFAcroTerminal.prototype.addWidget = function (ref) {\n    var Kids = this.normalizedEntries().Kids;\n    Kids.push(ref);\n  };\n  PDFAcroTerminal.prototype.removeWidget = function (idx) {\n    var kidDicts = this.Kids();\n    if (!kidDicts) {\n      // This field is itself a widget\n      if (idx !== 0) throw new IndexOutOfBoundsError(idx, 0, 0);\n      this.setKids([]);\n    } else {\n      // This field's kids are its widgets\n      if (idx < 0 || idx > kidDicts.size()) {\n        throw new IndexOutOfBoundsError(idx, 0, kidDicts.size());\n      }\n      kidDicts.remove(idx);\n    }\n  };\n  PDFAcroTerminal.prototype.normalizedEntries = function () {\n    var Kids = this.Kids();\n    // If this field is itself a widget (because it was only rendered once in\n    // the document, so the field and widget properties were merged) then we\n    // add itself to the `Kids` array. The alternative would be to try\n    // splitting apart the widget properties and creating a separate object\n    // for them.\n    if (!Kids) {\n      Kids = this.dict.context.obj([this.ref]);\n      this.dict.set(PDFName.of('Kids'), Kids);\n    }\n    return {\n      Kids: Kids\n    };\n  };\n  PDFAcroTerminal.fromDict = function (dict, ref) {\n    return new PDFAcroTerminal(dict, ref);\n  };\n  return PDFAcroTerminal;\n}(PDFAcroField);\nexport default PDFAcroTerminal;\n//# sourceMappingURL=PDFAcroTerminal.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}