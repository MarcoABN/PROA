{"ast":null,"code":"/* tslint:disable max-classes-per-file */\nimport { decompressJson, padStart } from './utils';\nimport AllEncodingsCompressed from './all-encodings.compressed.json';\nvar decompressedEncodings = decompressJson(AllEncodingsCompressed);\nvar allUnicodeMappings = JSON.parse(decompressedEncodings);\nvar Encoding = /** @class */function () {\n  function Encoding(name, unicodeMappings) {\n    var _this = this;\n    this.canEncodeUnicodeCodePoint = function (codePoint) {\n      return codePoint in _this.unicodeMappings;\n    };\n    this.encodeUnicodeCodePoint = function (codePoint) {\n      var mapped = _this.unicodeMappings[codePoint];\n      if (!mapped) {\n        var str = String.fromCharCode(codePoint);\n        var hexCode = \"0x\" + padStart(codePoint.toString(16), 4, '0');\n        var msg = _this.name + \" cannot encode \\\"\" + str + \"\\\" (\" + hexCode + \")\";\n        throw new Error(msg);\n      }\n      return {\n        code: mapped[0],\n        name: mapped[1]\n      };\n    };\n    this.name = name;\n    this.supportedCodePoints = Object.keys(unicodeMappings).map(Number).sort(function (a, b) {\n      return a - b;\n    });\n    this.unicodeMappings = unicodeMappings;\n  }\n  return Encoding;\n}();\nexport var Encodings = {\n  Symbol: new Encoding('Symbol', allUnicodeMappings.symbol),\n  ZapfDingbats: new Encoding('ZapfDingbats', allUnicodeMappings.zapfdingbats),\n  WinAnsi: new Encoding('WinAnsi', allUnicodeMappings.win1252)\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}