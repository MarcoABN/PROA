{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFAcroButton from \"./PDFAcroButton\";\nimport { AcroButtonFlags } from \"./flags\";\nimport { InvalidAcroFieldValueError } from \"../errors\";\nvar PDFAcroRadioButton = /** @class */function (_super) {\n  __extends(PDFAcroRadioButton, _super);\n  function PDFAcroRadioButton() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  PDFAcroRadioButton.prototype.setValue = function (value) {\n    var onValues = this.getOnValues();\n    if (!onValues.includes(value) && value !== PDFName.of('Off')) {\n      throw new InvalidAcroFieldValueError();\n    }\n    this.dict.set(PDFName.of('V'), value);\n    var widgets = this.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var state = widget.getOnValue() === value ? value : PDFName.of('Off');\n      widget.setAppearanceState(state);\n    }\n  };\n  PDFAcroRadioButton.prototype.getValue = function () {\n    var v = this.V();\n    if (v instanceof PDFName) return v;\n    return PDFName.of('Off');\n  };\n  PDFAcroRadioButton.prototype.getOnValues = function () {\n    var widgets = this.getWidgets();\n    var onValues = [];\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var onValue = widgets[idx].getOnValue();\n      if (onValue) onValues.push(onValue);\n    }\n    return onValues;\n  };\n  PDFAcroRadioButton.fromDict = function (dict, ref) {\n    return new PDFAcroRadioButton(dict, ref);\n  };\n  PDFAcroRadioButton.create = function (context) {\n    var dict = context.obj({\n      FT: 'Btn',\n      Ff: AcroButtonFlags.Radio,\n      Kids: []\n    });\n    var ref = context.register(dict);\n    return new PDFAcroRadioButton(dict, ref);\n  };\n  return PDFAcroRadioButton;\n}(PDFAcroButton);\nexport default PDFAcroRadioButton;\n//# sourceMappingURL=PDFAcroRadioButton.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}