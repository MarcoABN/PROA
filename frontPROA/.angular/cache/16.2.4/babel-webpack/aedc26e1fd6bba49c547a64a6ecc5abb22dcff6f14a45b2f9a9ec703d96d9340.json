{"ast":null,"code":"// tslint:disable radix\n/**\n * Converts a number to its string representation in decimal. This function\n * differs from simply converting a number to a string with `.toString()`\n * because this function's output string will **not** contain exponential\n * notation.\n *\n * Credit: https://stackoverflow.com/a/46545519\n */\nexport var numberToString = function (num) {\n  var numStr = String(num);\n  if (Math.abs(num) < 1.0) {\n    var e = parseInt(num.toString().split('e-')[1]);\n    if (e) {\n      var negative = num < 0;\n      if (negative) num *= -1;\n      num *= Math.pow(10, e - 1);\n      numStr = '0.' + new Array(e).join('0') + num.toString().substring(2);\n      if (negative) numStr = '-' + numStr;\n    }\n  } else {\n    var e = parseInt(num.toString().split('+')[1]);\n    if (e > 20) {\n      e -= 20;\n      num /= Math.pow(10, e);\n      numStr = num.toString() + new Array(e + 1).join('0');\n    }\n  }\n  return numStr;\n};\nexport var sizeInBytes = function (n) {\n  return Math.ceil(n.toString(2).length / 8);\n};\n/**\n * Converts a number into its constituent bytes and returns them as\n * a number[].\n *\n * Returns most significant byte as first element in array. It may be necessary\n * to call .reverse() to get the bits in the desired order.\n *\n * Example:\n *   bytesFor(0x02A41E) => [ 0b10, 0b10100100, 0b11110 ]\n *\n * Credit for algorithm: https://stackoverflow.com/a/1936865\n */\nexport var bytesFor = function (n) {\n  var bytes = new Uint8Array(sizeInBytes(n));\n  for (var i = 1; i <= bytes.length; i++) {\n    bytes[i - 1] = n >> (bytes.length - i) * 8;\n  }\n  return bytes;\n};","map":{"version":3,"names":["numberToString","num","numStr","String","Math","abs","e","parseInt","toString","split","negative","pow","Array","join","substring","sizeInBytes","n","ceil","length","bytesFor","bytes","Uint8Array","i"],"sources":["E:/PROA/frontPROA/node_modules/pdf-lib/es/utils/numbers.js"],"sourcesContent":["// tslint:disable radix\n/**\n * Converts a number to its string representation in decimal. This function\n * differs from simply converting a number to a string with `.toString()`\n * because this function's output string will **not** contain exponential\n * notation.\n *\n * Credit: https://stackoverflow.com/a/46545519\n */\nexport var numberToString = function (num) {\n    var numStr = String(num);\n    if (Math.abs(num) < 1.0) {\n        var e = parseInt(num.toString().split('e-')[1]);\n        if (e) {\n            var negative = num < 0;\n            if (negative)\n                num *= -1;\n            num *= Math.pow(10, e - 1);\n            numStr = '0.' + new Array(e).join('0') + num.toString().substring(2);\n            if (negative)\n                numStr = '-' + numStr;\n        }\n    }\n    else {\n        var e = parseInt(num.toString().split('+')[1]);\n        if (e > 20) {\n            e -= 20;\n            num /= Math.pow(10, e);\n            numStr = num.toString() + new Array(e + 1).join('0');\n        }\n    }\n    return numStr;\n};\nexport var sizeInBytes = function (n) { return Math.ceil(n.toString(2).length / 8); };\n/**\n * Converts a number into its constituent bytes and returns them as\n * a number[].\n *\n * Returns most significant byte as first element in array. It may be necessary\n * to call .reverse() to get the bits in the desired order.\n *\n * Example:\n *   bytesFor(0x02A41E) => [ 0b10, 0b10100100, 0b11110 ]\n *\n * Credit for algorithm: https://stackoverflow.com/a/1936865\n */\nexport var bytesFor = function (n) {\n    var bytes = new Uint8Array(sizeInBytes(n));\n    for (var i = 1; i <= bytes.length; i++) {\n        bytes[i - 1] = n >> ((bytes.length - i) * 8);\n    }\n    return bytes;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIA,cAAc,GAAG,SAAAA,CAAUC,GAAG,EAAE;EACvC,IAAIC,MAAM,GAAGC,MAAM,CAACF,GAAG,CAAC;EACxB,IAAIG,IAAI,CAACC,GAAG,CAACJ,GAAG,CAAC,GAAG,GAAG,EAAE;IACrB,IAAIK,CAAC,GAAGC,QAAQ,CAACN,GAAG,CAACO,QAAQ,CAAC,CAAC,CAACC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/C,IAAIH,CAAC,EAAE;MACH,IAAII,QAAQ,GAAGT,GAAG,GAAG,CAAC;MACtB,IAAIS,QAAQ,EACRT,GAAG,IAAI,CAAC,CAAC;MACbA,GAAG,IAAIG,IAAI,CAACO,GAAG,CAAC,EAAE,EAAEL,CAAC,GAAG,CAAC,CAAC;MAC1BJ,MAAM,GAAG,IAAI,GAAG,IAAIU,KAAK,CAACN,CAAC,CAAC,CAACO,IAAI,CAAC,GAAG,CAAC,GAAGZ,GAAG,CAACO,QAAQ,CAAC,CAAC,CAACM,SAAS,CAAC,CAAC,CAAC;MACpE,IAAIJ,QAAQ,EACRR,MAAM,GAAG,GAAG,GAAGA,MAAM;IAC7B;EACJ,CAAC,MACI;IACD,IAAII,CAAC,GAAGC,QAAQ,CAACN,GAAG,CAACO,QAAQ,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9C,IAAIH,CAAC,GAAG,EAAE,EAAE;MACRA,CAAC,IAAI,EAAE;MACPL,GAAG,IAAIG,IAAI,CAACO,GAAG,CAAC,EAAE,EAAEL,CAAC,CAAC;MACtBJ,MAAM,GAAGD,GAAG,CAACO,QAAQ,CAAC,CAAC,GAAG,IAAII,KAAK,CAACN,CAAC,GAAG,CAAC,CAAC,CAACO,IAAI,CAAC,GAAG,CAAC;IACxD;EACJ;EACA,OAAOX,MAAM;AACjB,CAAC;AACD,OAAO,IAAIa,WAAW,GAAG,SAAAA,CAAUC,CAAC,EAAE;EAAE,OAAOZ,IAAI,CAACa,IAAI,CAACD,CAAC,CAACR,QAAQ,CAAC,CAAC,CAAC,CAACU,MAAM,GAAG,CAAC,CAAC;AAAE,CAAC;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,QAAQ,GAAG,SAAAA,CAAUH,CAAC,EAAE;EAC/B,IAAII,KAAK,GAAG,IAAIC,UAAU,CAACN,WAAW,CAACC,CAAC,CAAC,CAAC;EAC1C,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIF,KAAK,CAACF,MAAM,EAAEI,CAAC,EAAE,EAAE;IACpCF,KAAK,CAACE,CAAC,GAAG,CAAC,CAAC,GAAGN,CAAC,IAAK,CAACI,KAAK,CAACF,MAAM,GAAGI,CAAC,IAAI,CAAE;EAChD;EACA,OAAOF,KAAK;AAChB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}