{"ast":null,"code":"/*\n * Copyright 2012 Mozilla Foundation\n *\n * The Ascii85Stream class contained in this file is a TypeScript port of the\n * JavaScript Ascii85Stream class in Mozilla's pdf.js project, made available\n * under the Apache 2.0 open source license.\n */\nimport { __extends } from \"tslib\";\nimport DecodeStream from \"./DecodeStream\";\nvar isSpace = function (ch) {\n  return ch === 0x20 || ch === 0x09 || ch === 0x0d || ch === 0x0a;\n};\nvar Ascii85Stream = /** @class */function (_super) {\n  __extends(Ascii85Stream, _super);\n  function Ascii85Stream(stream, maybeLength) {\n    var _this = _super.call(this, maybeLength) || this;\n    _this.stream = stream;\n    _this.input = new Uint8Array(5);\n    // Most streams increase in size when decoded, but Ascii85 streams\n    // typically shrink by ~20%.\n    if (maybeLength) {\n      maybeLength = 0.8 * maybeLength;\n    }\n    return _this;\n  }\n  Ascii85Stream.prototype.readBlock = function () {\n    var TILDA_CHAR = 0x7e; // '~'\n    var Z_LOWER_CHAR = 0x7a; // 'z'\n    var EOF = -1;\n    var stream = this.stream;\n    var c = stream.getByte();\n    while (isSpace(c)) {\n      c = stream.getByte();\n    }\n    if (c === EOF || c === TILDA_CHAR) {\n      this.eof = true;\n      return;\n    }\n    var bufferLength = this.bufferLength;\n    var buffer;\n    var i;\n    // special code for z\n    if (c === Z_LOWER_CHAR) {\n      buffer = this.ensureBuffer(bufferLength + 4);\n      for (i = 0; i < 4; ++i) {\n        buffer[bufferLength + i] = 0;\n      }\n      this.bufferLength += 4;\n    } else {\n      var input = this.input;\n      input[0] = c;\n      for (i = 1; i < 5; ++i) {\n        c = stream.getByte();\n        while (isSpace(c)) {\n          c = stream.getByte();\n        }\n        input[i] = c;\n        if (c === EOF || c === TILDA_CHAR) {\n          break;\n        }\n      }\n      buffer = this.ensureBuffer(bufferLength + i - 1);\n      this.bufferLength += i - 1;\n      // partial ending;\n      if (i < 5) {\n        for (; i < 5; ++i) {\n          input[i] = 0x21 + 84;\n        }\n        this.eof = true;\n      }\n      var t = 0;\n      for (i = 0; i < 5; ++i) {\n        t = t * 85 + (input[i] - 0x21);\n      }\n      for (i = 3; i >= 0; --i) {\n        buffer[bufferLength + i] = t & 0xff;\n        t >>= 8;\n      }\n    }\n  };\n  return Ascii85Stream;\n}(DecodeStream);\nexport default Ascii85Stream;","map":{"version":3,"names":["__extends","DecodeStream","isSpace","ch","Ascii85Stream","_super","stream","maybeLength","_this","call","input","Uint8Array","prototype","readBlock","TILDA_CHAR","Z_LOWER_CHAR","EOF","c","getByte","eof","bufferLength","buffer","i","ensureBuffer","t"],"sources":["E:/PROA/frontPROA/node_modules/pdf-lib/es/core/streams/Ascii85Stream.js"],"sourcesContent":["/*\n * Copyright 2012 Mozilla Foundation\n *\n * The Ascii85Stream class contained in this file is a TypeScript port of the\n * JavaScript Ascii85Stream class in Mozilla's pdf.js project, made available\n * under the Apache 2.0 open source license.\n */\nimport { __extends } from \"tslib\";\nimport DecodeStream from \"./DecodeStream\";\nvar isSpace = function (ch) {\n    return ch === 0x20 || ch === 0x09 || ch === 0x0d || ch === 0x0a;\n};\nvar Ascii85Stream = /** @class */ (function (_super) {\n    __extends(Ascii85Stream, _super);\n    function Ascii85Stream(stream, maybeLength) {\n        var _this = _super.call(this, maybeLength) || this;\n        _this.stream = stream;\n        _this.input = new Uint8Array(5);\n        // Most streams increase in size when decoded, but Ascii85 streams\n        // typically shrink by ~20%.\n        if (maybeLength) {\n            maybeLength = 0.8 * maybeLength;\n        }\n        return _this;\n    }\n    Ascii85Stream.prototype.readBlock = function () {\n        var TILDA_CHAR = 0x7e; // '~'\n        var Z_LOWER_CHAR = 0x7a; // 'z'\n        var EOF = -1;\n        var stream = this.stream;\n        var c = stream.getByte();\n        while (isSpace(c)) {\n            c = stream.getByte();\n        }\n        if (c === EOF || c === TILDA_CHAR) {\n            this.eof = true;\n            return;\n        }\n        var bufferLength = this.bufferLength;\n        var buffer;\n        var i;\n        // special code for z\n        if (c === Z_LOWER_CHAR) {\n            buffer = this.ensureBuffer(bufferLength + 4);\n            for (i = 0; i < 4; ++i) {\n                buffer[bufferLength + i] = 0;\n            }\n            this.bufferLength += 4;\n        }\n        else {\n            var input = this.input;\n            input[0] = c;\n            for (i = 1; i < 5; ++i) {\n                c = stream.getByte();\n                while (isSpace(c)) {\n                    c = stream.getByte();\n                }\n                input[i] = c;\n                if (c === EOF || c === TILDA_CHAR) {\n                    break;\n                }\n            }\n            buffer = this.ensureBuffer(bufferLength + i - 1);\n            this.bufferLength += i - 1;\n            // partial ending;\n            if (i < 5) {\n                for (; i < 5; ++i) {\n                    input[i] = 0x21 + 84;\n                }\n                this.eof = true;\n            }\n            var t = 0;\n            for (i = 0; i < 5; ++i) {\n                t = t * 85 + (input[i] - 0x21);\n            }\n            for (i = 3; i >= 0; --i) {\n                buffer[bufferLength + i] = t & 0xff;\n                t >>= 8;\n            }\n        }\n    };\n    return Ascii85Stream;\n}(DecodeStream));\nexport default Ascii85Stream;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}