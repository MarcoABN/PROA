{"ast":null,"code":"import { ReparseError } from \"../errors\";\nimport PDFArray from \"../objects/PDFArray\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFNumber from \"../objects/PDFNumber\";\nimport PDFRef from \"../objects/PDFRef\";\nimport ByteStream from \"./ByteStream\";\nvar PDFXRefStreamParser = /** @class */function () {\n  function PDFXRefStreamParser(rawStream) {\n    this.alreadyParsed = false;\n    this.dict = rawStream.dict;\n    this.bytes = ByteStream.fromPDFRawStream(rawStream);\n    this.context = this.dict.context;\n    var Size = this.dict.lookup(PDFName.of('Size'), PDFNumber);\n    var Index = this.dict.lookup(PDFName.of('Index'));\n    if (Index instanceof PDFArray) {\n      this.subsections = [];\n      for (var idx = 0, len = Index.size(); idx < len; idx += 2) {\n        var firstObjectNumber = Index.lookup(idx + 0, PDFNumber).asNumber();\n        var length_1 = Index.lookup(idx + 1, PDFNumber).asNumber();\n        this.subsections.push({\n          firstObjectNumber: firstObjectNumber,\n          length: length_1\n        });\n      }\n    } else {\n      this.subsections = [{\n        firstObjectNumber: 0,\n        length: Size.asNumber()\n      }];\n    }\n    var W = this.dict.lookup(PDFName.of('W'), PDFArray);\n    this.byteWidths = [-1, -1, -1];\n    for (var idx = 0, len = W.size(); idx < len; idx++) {\n      this.byteWidths[idx] = W.lookup(idx, PDFNumber).asNumber();\n    }\n  }\n  PDFXRefStreamParser.prototype.parseIntoContext = function () {\n    if (this.alreadyParsed) {\n      throw new ReparseError('PDFXRefStreamParser', 'parseIntoContext');\n    }\n    this.alreadyParsed = true;\n    this.context.trailerInfo = {\n      Root: this.dict.get(PDFName.of('Root')),\n      Encrypt: this.dict.get(PDFName.of('Encrypt')),\n      Info: this.dict.get(PDFName.of('Info')),\n      ID: this.dict.get(PDFName.of('ID'))\n    };\n    var entries = this.parseEntries();\n    // for (let idx = 0, len = entries.length; idx < len; idx++) {\n    // const entry = entries[idx];\n    // if (entry.deleted) this.context.delete(entry.ref);\n    // }\n    return entries;\n  };\n  PDFXRefStreamParser.prototype.parseEntries = function () {\n    var entries = [];\n    var _a = this.byteWidths,\n      typeFieldWidth = _a[0],\n      offsetFieldWidth = _a[1],\n      genFieldWidth = _a[2];\n    for (var subsectionIdx = 0, subsectionLen = this.subsections.length; subsectionIdx < subsectionLen; subsectionIdx++) {\n      var _b = this.subsections[subsectionIdx],\n        firstObjectNumber = _b.firstObjectNumber,\n        length_2 = _b.length;\n      for (var objIdx = 0; objIdx < length_2; objIdx++) {\n        var type = 0;\n        for (var idx = 0, len = typeFieldWidth; idx < len; idx++) {\n          type = type << 8 | this.bytes.next();\n        }\n        var offset = 0;\n        for (var idx = 0, len = offsetFieldWidth; idx < len; idx++) {\n          offset = offset << 8 | this.bytes.next();\n        }\n        var generationNumber = 0;\n        for (var idx = 0, len = genFieldWidth; idx < len; idx++) {\n          generationNumber = generationNumber << 8 | this.bytes.next();\n        }\n        // When the `type` field is absent, it defaults to 1\n        if (typeFieldWidth === 0) type = 1;\n        var objectNumber = firstObjectNumber + objIdx;\n        var entry = {\n          ref: PDFRef.of(objectNumber, generationNumber),\n          offset: offset,\n          deleted: type === 0,\n          inObjectStream: type === 2\n        };\n        entries.push(entry);\n      }\n    }\n    return entries;\n  };\n  PDFXRefStreamParser.forStream = function (rawStream) {\n    return new PDFXRefStreamParser(rawStream);\n  };\n  return PDFXRefStreamParser;\n}();\nexport default PDFXRefStreamParser;","map":{"version":3,"names":["ReparseError","PDFArray","PDFName","PDFNumber","PDFRef","ByteStream","PDFXRefStreamParser","rawStream","alreadyParsed","dict","bytes","fromPDFRawStream","context","Size","lookup","of","Index","subsections","idx","len","size","firstObjectNumber","asNumber","length_1","push","length","W","byteWidths","prototype","parseIntoContext","trailerInfo","Root","get","Encrypt","Info","ID","entries","parseEntries","_a","typeFieldWidth","offsetFieldWidth","genFieldWidth","subsectionIdx","subsectionLen","_b","length_2","objIdx","type","next","offset","generationNumber","objectNumber","entry","ref","deleted","inObjectStream","forStream"],"sources":["E:/PROA/frontPROA/node_modules/pdf-lib/es/core/parser/PDFXRefStreamParser.js"],"sourcesContent":["import { ReparseError } from \"../errors\";\nimport PDFArray from \"../objects/PDFArray\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFNumber from \"../objects/PDFNumber\";\nimport PDFRef from \"../objects/PDFRef\";\nimport ByteStream from \"./ByteStream\";\nvar PDFXRefStreamParser = /** @class */ (function () {\n    function PDFXRefStreamParser(rawStream) {\n        this.alreadyParsed = false;\n        this.dict = rawStream.dict;\n        this.bytes = ByteStream.fromPDFRawStream(rawStream);\n        this.context = this.dict.context;\n        var Size = this.dict.lookup(PDFName.of('Size'), PDFNumber);\n        var Index = this.dict.lookup(PDFName.of('Index'));\n        if (Index instanceof PDFArray) {\n            this.subsections = [];\n            for (var idx = 0, len = Index.size(); idx < len; idx += 2) {\n                var firstObjectNumber = Index.lookup(idx + 0, PDFNumber).asNumber();\n                var length_1 = Index.lookup(idx + 1, PDFNumber).asNumber();\n                this.subsections.push({ firstObjectNumber: firstObjectNumber, length: length_1 });\n            }\n        }\n        else {\n            this.subsections = [{ firstObjectNumber: 0, length: Size.asNumber() }];\n        }\n        var W = this.dict.lookup(PDFName.of('W'), PDFArray);\n        this.byteWidths = [-1, -1, -1];\n        for (var idx = 0, len = W.size(); idx < len; idx++) {\n            this.byteWidths[idx] = W.lookup(idx, PDFNumber).asNumber();\n        }\n    }\n    PDFXRefStreamParser.prototype.parseIntoContext = function () {\n        if (this.alreadyParsed) {\n            throw new ReparseError('PDFXRefStreamParser', 'parseIntoContext');\n        }\n        this.alreadyParsed = true;\n        this.context.trailerInfo = {\n            Root: this.dict.get(PDFName.of('Root')),\n            Encrypt: this.dict.get(PDFName.of('Encrypt')),\n            Info: this.dict.get(PDFName.of('Info')),\n            ID: this.dict.get(PDFName.of('ID')),\n        };\n        var entries = this.parseEntries();\n        // for (let idx = 0, len = entries.length; idx < len; idx++) {\n        // const entry = entries[idx];\n        // if (entry.deleted) this.context.delete(entry.ref);\n        // }\n        return entries;\n    };\n    PDFXRefStreamParser.prototype.parseEntries = function () {\n        var entries = [];\n        var _a = this.byteWidths, typeFieldWidth = _a[0], offsetFieldWidth = _a[1], genFieldWidth = _a[2];\n        for (var subsectionIdx = 0, subsectionLen = this.subsections.length; subsectionIdx < subsectionLen; subsectionIdx++) {\n            var _b = this.subsections[subsectionIdx], firstObjectNumber = _b.firstObjectNumber, length_2 = _b.length;\n            for (var objIdx = 0; objIdx < length_2; objIdx++) {\n                var type = 0;\n                for (var idx = 0, len = typeFieldWidth; idx < len; idx++) {\n                    type = (type << 8) | this.bytes.next();\n                }\n                var offset = 0;\n                for (var idx = 0, len = offsetFieldWidth; idx < len; idx++) {\n                    offset = (offset << 8) | this.bytes.next();\n                }\n                var generationNumber = 0;\n                for (var idx = 0, len = genFieldWidth; idx < len; idx++) {\n                    generationNumber = (generationNumber << 8) | this.bytes.next();\n                }\n                // When the `type` field is absent, it defaults to 1\n                if (typeFieldWidth === 0)\n                    type = 1;\n                var objectNumber = firstObjectNumber + objIdx;\n                var entry = {\n                    ref: PDFRef.of(objectNumber, generationNumber),\n                    offset: offset,\n                    deleted: type === 0,\n                    inObjectStream: type === 2,\n                };\n                entries.push(entry);\n            }\n        }\n        return entries;\n    };\n    PDFXRefStreamParser.forStream = function (rawStream) {\n        return new PDFXRefStreamParser(rawStream);\n    };\n    return PDFXRefStreamParser;\n}());\nexport default PDFXRefStreamParser;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}