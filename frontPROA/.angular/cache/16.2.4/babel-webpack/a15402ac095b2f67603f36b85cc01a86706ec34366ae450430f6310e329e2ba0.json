{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class FrontOrgmilitarService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://192.168.15.49:8080/corgmilitar/orgmilitar'; // URL do seu backend\n  }\n  // Método para listar todas as OrgMilitar\n  listar() {\n    return this.http.get(this.baseUrl);\n  }\n  // Método para consultar uma OrgMilitar por ID\n  consultar(id) {\n    const url = `${this.baseUrl}/${id}`;\n    return this.http.get(url);\n  }\n  // Método para inserir uma nova OrgMilitar\n  inserir(orgMilitar) {\n    return this.http.post(this.baseUrl, orgMilitar, {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    });\n  }\n  // Método para alterar uma OrgMilitar existente\n  alterar(id, orgMilitar) {\n    const url = `${this.baseUrl}/${id}`;\n    return this.http.put(url, orgMilitar, {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    });\n  }\n  // Método para excluir uma OrgMilitar por ID\n  excluir(id) {\n    const url = `${this.baseUrl}/${id}`;\n    return this.http.delete(url);\n  }\n  static #_ = this.ɵfac = function FrontOrgmilitarService_Factory(t) {\n    return new (t || FrontOrgmilitarService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FrontOrgmilitarService,\n    factory: FrontOrgmilitarService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","FrontOrgmilitarService","constructor","http","baseUrl","listar","get","consultar","id","url","inserir","orgMilitar","post","headers","alterar","put","excluir","delete","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["E:\\PROA\\frontPROA\\src\\app\\services\\front-orgmilitar.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { OrgMilitar } from '../model/orgmilitar' // ajuste o caminho conforme sua estrutura de pastas\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FrontOrgmilitarService {\r\n  private baseUrl = 'http://192.168.15.49:8080/corgmilitar/orgmilitar'; // URL do seu backend\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  // Método para listar todas as OrgMilitar\r\n  listar(): Observable<OrgMilitar[]> {\r\n    return this.http.get<OrgMilitar[]>(this.baseUrl);\r\n  }\r\n\r\n  // Método para consultar uma OrgMilitar por ID\r\n  consultar(id: number): Observable<OrgMilitar> {\r\n    const url = `${this.baseUrl}/${id}`;\r\n    return this.http.get<OrgMilitar>(url);\r\n  }\r\n\r\n  // Método para inserir uma nova OrgMilitar\r\n  inserir(orgMilitar: OrgMilitar): Observable<OrgMilitar> {\r\n    return this.http.post<OrgMilitar>(this.baseUrl, orgMilitar, {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json'\r\n      })\r\n    });\r\n  }\r\n\r\n  // Método para alterar uma OrgMilitar existente\r\n  alterar(id: number, orgMilitar: OrgMilitar): Observable<OrgMilitar> {\r\n    const url = `${this.baseUrl}/${id}`;\r\n    return this.http.put<OrgMilitar>(url, orgMilitar, {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json'\r\n      })\r\n    });\r\n  }\r\n\r\n  // Método para excluir uma OrgMilitar por ID\r\n  excluir(id: number): Observable<any> {\r\n    const url = `${this.baseUrl}/${id}`;\r\n    return this.http.delete(url);\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAO9D,OAAM,MAAOC,sBAAsB;EAGjCC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAG,kDAAkD,CAAC,CAAC;EAE/B;EAEvC;EACAC,MAAMA,CAAA;IACJ,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAe,IAAI,CAACF,OAAO,CAAC;EAClD;EAEA;EACAG,SAASA,CAACC,EAAU;IAClB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACL,OAAO,IAAII,EAAE,EAAE;IACnC,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAAaG,GAAG,CAAC;EACvC;EAEA;EACAC,OAAOA,CAACC,UAAsB;IAC5B,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAa,IAAI,CAACR,OAAO,EAAEO,UAAU,EAAE;MAC1DE,OAAO,EAAE,IAAIb,WAAW,CAAC;QACvB,cAAc,EAAE;OACjB;KACF,CAAC;EACJ;EAEA;EACAc,OAAOA,CAACN,EAAU,EAAEG,UAAsB;IACxC,MAAMF,GAAG,GAAG,GAAG,IAAI,CAACL,OAAO,IAAII,EAAE,EAAE;IACnC,OAAO,IAAI,CAACL,IAAI,CAACY,GAAG,CAAaN,GAAG,EAAEE,UAAU,EAAE;MAChDE,OAAO,EAAE,IAAIb,WAAW,CAAC;QACvB,cAAc,EAAE;OACjB;KACF,CAAC;EACJ;EAEA;EACAgB,OAAOA,CAACR,EAAU;IAChB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACL,OAAO,IAAII,EAAE,EAAE;IACnC,OAAO,IAAI,CAACL,IAAI,CAACc,MAAM,CAACR,GAAG,CAAC;EAC9B;EAAC,QAAAS,CAAA,G;qBAvCUjB,sBAAsB,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAtBtB,sBAAsB;IAAAuB,OAAA,EAAtBvB,sBAAsB,CAAAwB,IAAA;IAAAC,UAAA,EAFrB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}