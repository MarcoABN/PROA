{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFField from \"./PDFField\";\nimport { PDFAcroSignature } from \"../../core\";\nimport { assertIs } from \"../../utils\";\n/**\n * Represents a signature field of a [[PDFForm]].\n *\n * [[PDFSignature]] fields are digital signatures. `pdf-lib` does not\n * currently provide any specialized APIs for creating digital signatures or\n * reading the contents of existing digital signatures.\n */\nvar PDFSignature = /** @class */function (_super) {\n  __extends(PDFSignature, _super);\n  function PDFSignature(acroSignature, ref, doc) {\n    var _this = _super.call(this, acroSignature, ref, doc) || this;\n    assertIs(acroSignature, 'acroSignature', [[PDFAcroSignature, 'PDFAcroSignature']]);\n    _this.acroField = acroSignature;\n    return _this;\n  }\n  PDFSignature.prototype.needsAppearancesUpdate = function () {\n    return false;\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFForm.getSignature]] method, which will create an\n   * > instance of [[PDFSignature]] for you.\n   *\n   * Create an instance of [[PDFSignature]] from an existing acroSignature and\n   * ref\n   *\n   * @param acroSignature The underlying `PDFAcroSignature` for this signature.\n   * @param ref The unique reference for this signature.\n   * @param doc The document to which this signature will belong.\n   */\n  PDFSignature.of = function (acroSignature, ref, doc) {\n    return new PDFSignature(acroSignature, ref, doc);\n  };\n  return PDFSignature;\n}(PDFField);\nexport default PDFSignature;\n//# sourceMappingURL=PDFSignature.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}