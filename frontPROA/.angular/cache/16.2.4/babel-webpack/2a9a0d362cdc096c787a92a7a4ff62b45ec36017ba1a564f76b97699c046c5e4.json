{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { rgb } from \"./colors\";\nimport { drawImage, drawLine, drawLinesOfText, drawPage, drawRectangle, drawSvgPath, drawEllipse } from \"./operations\";\nimport { popGraphicsState, pushGraphicsState, translate, LineCapStyle, scale } from \"./operators\";\nimport PDFDocument from \"./PDFDocument\";\nimport PDFEmbeddedPage from \"./PDFEmbeddedPage\";\nimport PDFFont from \"./PDFFont\";\nimport PDFImage from \"./PDFImage\";\nimport { BlendMode } from \"./PDFPageOptions\";\nimport { degrees, toDegrees } from \"./rotations\";\nimport { StandardFonts } from \"./StandardFonts\";\nimport { PDFContentStream, PDFName, PDFOperator, PDFPageLeaf, PDFRef, PDFDict, PDFArray } from \"../core\";\nimport { assertEachIs, assertIs, assertMultiple, assertOrUndefined, breakTextIntoLines, cleanText, rectanglesAreEqual, lineSplit, assertRangeOrUndefined, assertIsOneOfOrUndefined } from \"../utils\";\n/**\n * Represents a single page of a [[PDFDocument]].\n */\nvar PDFPage = /** @class */function () {\n  function PDFPage(leafNode, ref, doc) {\n    this.fontSize = 24;\n    this.fontColor = rgb(0, 0, 0);\n    this.lineHeight = 24;\n    this.x = 0;\n    this.y = 0;\n    assertIs(leafNode, 'leafNode', [[PDFPageLeaf, 'PDFPageLeaf']]);\n    assertIs(ref, 'ref', [[PDFRef, 'PDFRef']]);\n    assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n    this.node = leafNode;\n    this.ref = ref;\n    this.doc = doc;\n  }\n  /**\n   * Rotate this page by a multiple of 90 degrees. For example:\n   * ```js\n   * import { degrees } from 'pdf-lib'\n   *\n   * page.setRotation(degrees(-90))\n   * page.setRotation(degrees(0))\n   * page.setRotation(degrees(90))\n   * page.setRotation(degrees(180))\n   * page.setRotation(degrees(270))\n   * ```\n   * @param angle The angle to rotate this page.\n   */\n  PDFPage.prototype.setRotation = function (angle) {\n    var degreesAngle = toDegrees(angle);\n    assertMultiple(degreesAngle, 'degreesAngle', 90);\n    this.node.set(PDFName.of('Rotate'), this.doc.context.obj(degreesAngle));\n  };\n  /**\n   * Get this page's rotation angle in degrees. For example:\n   * ```js\n   * const rotationAngle = page.getRotation().angle;\n   * ```\n   * @returns The rotation angle of the page in degrees (always a multiple of\n   *          90 degrees).\n   */\n  PDFPage.prototype.getRotation = function () {\n    var Rotate = this.node.Rotate();\n    return degrees(Rotate ? Rotate.asNumber() : 0);\n  };\n  /**\n   * Resize this page by increasing or decreasing its width and height. For\n   * example:\n   * ```js\n   * page.setSize(250, 500)\n   * page.setSize(page.getWidth() + 50, page.getHeight() + 100)\n   * page.setSize(page.getWidth() - 50, page.getHeight() - 100)\n   * ```\n   *\n   * Note that the PDF specification does not allow for pages to have explicit\n   * widths and heights. Instead it defines the \"size\" of a page in terms of\n   * five rectangles: the MediaBox, CropBox, BleedBox, TrimBox, and ArtBox. As a\n   * result, this method cannot directly change the width and height of a page.\n   * Instead, it works by adjusting these five boxes.\n   *\n   * This method performs the following steps:\n   *   1. Set width & height of MediaBox.\n   *   2. Set width & height of CropBox, if it has same dimensions as MediaBox.\n   *   3. Set width & height of BleedBox, if it has same dimensions as MediaBox.\n   *   4. Set width & height of TrimBox, if it has same dimensions as MediaBox.\n   *   5. Set width & height of ArtBox, if it has same dimensions as MediaBox.\n   *\n   * This approach works well for most PDF documents as all PDF pages must\n   * have a MediaBox, but relatively few have a CropBox, BleedBox, TrimBox, or\n   * ArtBox. And when they do have these additional boxes, they often have the\n   * same dimensions as the MediaBox. However, if you find this method does not\n   * work for your document, consider setting the boxes directly:\n   *   * [[PDFPage.setMediaBox]]\n   *   * [[PDFPage.setCropBox]]\n   *   * [[PDFPage.setBleedBox]]\n   *   * [[PDFPage.setTrimBox]]\n   *   * [[PDFPage.setArtBox]]\n   *\n   * @param width The new width of the page.\n   * @param height The new height of the page.\n   */\n  PDFPage.prototype.setSize = function (width, height) {\n    assertIs(width, 'width', ['number']);\n    assertIs(height, 'height', ['number']);\n    var mediaBox = this.getMediaBox();\n    this.setMediaBox(mediaBox.x, mediaBox.y, width, height);\n    var cropBox = this.getCropBox();\n    var bleedBox = this.getBleedBox();\n    var trimBox = this.getTrimBox();\n    var artBox = this.getArtBox();\n    var hasCropBox = this.node.CropBox();\n    var hasBleedBox = this.node.BleedBox();\n    var hasTrimBox = this.node.TrimBox();\n    var hasArtBox = this.node.ArtBox();\n    if (hasCropBox && rectanglesAreEqual(cropBox, mediaBox)) {\n      this.setCropBox(mediaBox.x, mediaBox.y, width, height);\n    }\n    if (hasBleedBox && rectanglesAreEqual(bleedBox, mediaBox)) {\n      this.setBleedBox(mediaBox.x, mediaBox.y, width, height);\n    }\n    if (hasTrimBox && rectanglesAreEqual(trimBox, mediaBox)) {\n      this.setTrimBox(mediaBox.x, mediaBox.y, width, height);\n    }\n    if (hasArtBox && rectanglesAreEqual(artBox, mediaBox)) {\n      this.setArtBox(mediaBox.x, mediaBox.y, width, height);\n    }\n  };\n  /**\n   * Resize this page by increasing or decreasing its width. For example:\n   * ```js\n   * page.setWidth(250)\n   * page.setWidth(page.getWidth() + 50)\n   * page.setWidth(page.getWidth() - 50)\n   * ```\n   *\n   * This method uses [[PDFPage.setSize]] to set the page's width.\n   *\n   * @param width The new width of the page.\n   */\n  PDFPage.prototype.setWidth = function (width) {\n    assertIs(width, 'width', ['number']);\n    this.setSize(width, this.getSize().height);\n  };\n  /**\n   * Resize this page by increasing or decreasing its height. For example:\n   * ```js\n   * page.setHeight(500)\n   * page.setHeight(page.getWidth() + 100)\n   * page.setHeight(page.getWidth() - 100)\n   * ```\n   *\n   * This method uses [[PDFPage.setSize]] to set the page's height.\n   *\n   * @param height The new height of the page.\n   */\n  PDFPage.prototype.setHeight = function (height) {\n    assertIs(height, 'height', ['number']);\n    this.setSize(this.getSize().width, height);\n  };\n  /**\n   * Set the MediaBox of this page. For example:\n   * ```js\n   * const mediaBox = page.getMediaBox()\n   *\n   * page.setMediaBox(0, 0, 250, 500)\n   * page.setMediaBox(mediaBox.x, mediaBox.y, 50, 100)\n   * page.setMediaBox(15, 5, mediaBox.width - 50, mediaBox.height - 100)\n   * ```\n   *\n   * See [[PDFPage.getMediaBox]] for details about what the MediaBox represents.\n   *\n   * @param x The x coordinate of the lower left corner of the new MediaBox.\n   * @param y The y coordinate of the lower left corner of the new MediaBox.\n   * @param width The width of the new MediaBox.\n   * @param height The height of the new MediaBox.\n   */\n  PDFPage.prototype.setMediaBox = function (x, y, width, height) {\n    assertIs(x, 'x', ['number']);\n    assertIs(y, 'y', ['number']);\n    assertIs(width, 'width', ['number']);\n    assertIs(height, 'height', ['number']);\n    var mediaBox = this.doc.context.obj([x, y, x + width, y + height]);\n    this.node.set(PDFName.MediaBox, mediaBox);\n  };\n  /**\n   * Set the CropBox of this page. For example:\n   * ```js\n   * const cropBox = page.getCropBox()\n   *\n   * page.setCropBox(0, 0, 250, 500)\n   * page.setCropBox(cropBox.x, cropBox.y, 50, 100)\n   * page.setCropBox(15, 5, cropBox.width - 50, cropBox.height - 100)\n   * ```\n   *\n   * See [[PDFPage.getCropBox]] for details about what the CropBox represents.\n   *\n   * @param x The x coordinate of the lower left corner of the new CropBox.\n   * @param y The y coordinate of the lower left corner of the new CropBox.\n   * @param width The width of the new CropBox.\n   * @param height The height of the new CropBox.\n   */\n  PDFPage.prototype.setCropBox = function (x, y, width, height) {\n    assertIs(x, 'x', ['number']);\n    assertIs(y, 'y', ['number']);\n    assertIs(width, 'width', ['number']);\n    assertIs(height, 'height', ['number']);\n    var cropBox = this.doc.context.obj([x, y, x + width, y + height]);\n    this.node.set(PDFName.CropBox, cropBox);\n  };\n  /**\n   * Set the BleedBox of this page. For example:\n   * ```js\n   * const bleedBox = page.getBleedBox()\n   *\n   * page.setBleedBox(0, 0, 250, 500)\n   * page.setBleedBox(bleedBox.x, bleedBox.y, 50, 100)\n   * page.setBleedBox(15, 5, bleedBox.width - 50, bleedBox.height - 100)\n   * ```\n   *\n   * See [[PDFPage.getBleedBox]] for details about what the BleedBox represents.\n   *\n   * @param x The x coordinate of the lower left corner of the new BleedBox.\n   * @param y The y coordinate of the lower left corner of the new BleedBox.\n   * @param width The width of the new BleedBox.\n   * @param height The height of the new BleedBox.\n   */\n  PDFPage.prototype.setBleedBox = function (x, y, width, height) {\n    assertIs(x, 'x', ['number']);\n    assertIs(y, 'y', ['number']);\n    assertIs(width, 'width', ['number']);\n    assertIs(height, 'height', ['number']);\n    var bleedBox = this.doc.context.obj([x, y, x + width, y + height]);\n    this.node.set(PDFName.BleedBox, bleedBox);\n  };\n  /**\n   * Set the TrimBox of this page. For example:\n   * ```js\n   * const trimBox = page.getTrimBox()\n   *\n   * page.setTrimBox(0, 0, 250, 500)\n   * page.setTrimBox(trimBox.x, trimBox.y, 50, 100)\n   * page.setTrimBox(15, 5, trimBox.width - 50, trimBox.height - 100)\n   * ```\n   *\n   * See [[PDFPage.getTrimBox]] for details about what the TrimBox represents.\n   *\n   * @param x The x coordinate of the lower left corner of the new TrimBox.\n   * @param y The y coordinate of the lower left corner of the new TrimBox.\n   * @param width The width of the new TrimBox.\n   * @param height The height of the new TrimBox.\n   */\n  PDFPage.prototype.setTrimBox = function (x, y, width, height) {\n    assertIs(x, 'x', ['number']);\n    assertIs(y, 'y', ['number']);\n    assertIs(width, 'width', ['number']);\n    assertIs(height, 'height', ['number']);\n    var trimBox = this.doc.context.obj([x, y, x + width, y + height]);\n    this.node.set(PDFName.TrimBox, trimBox);\n  };\n  /**\n   * Set the ArtBox of this page. For example:\n   * ```js\n   * const artBox = page.getArtBox()\n   *\n   * page.setArtBox(0, 0, 250, 500)\n   * page.setArtBox(artBox.x, artBox.y, 50, 100)\n   * page.setArtBox(15, 5, artBox.width - 50, artBox.height - 100)\n   * ```\n   *\n   * See [[PDFPage.getArtBox]] for details about what the ArtBox represents.\n   *\n   * @param x The x coordinate of the lower left corner of the new ArtBox.\n   * @param y The y coordinate of the lower left corner of the new ArtBox.\n   * @param width The width of the new ArtBox.\n   * @param height The height of the new ArtBox.\n   */\n  PDFPage.prototype.setArtBox = function (x, y, width, height) {\n    assertIs(x, 'x', ['number']);\n    assertIs(y, 'y', ['number']);\n    assertIs(width, 'width', ['number']);\n    assertIs(height, 'height', ['number']);\n    var artBox = this.doc.context.obj([x, y, x + width, y + height]);\n    this.node.set(PDFName.ArtBox, artBox);\n  };\n  /**\n   * Get this page's width and height. For example:\n   * ```js\n   * const { width, height } = page.getSize()\n   * ```\n   *\n   * This method uses [[PDFPage.getMediaBox]] to obtain the page's\n   * width and height.\n   *\n   * @returns The width and height of the page.\n   */\n  PDFPage.prototype.getSize = function () {\n    var _a = this.getMediaBox(),\n      width = _a.width,\n      height = _a.height;\n    return {\n      width: width,\n      height: height\n    };\n  };\n  /**\n   * Get this page's width. For example:\n   * ```js\n   * const width = page.getWidth()\n   * ```\n   *\n   * This method uses [[PDFPage.getSize]] to obtain the page's size.\n   *\n   * @returns The width of the page.\n   */\n  PDFPage.prototype.getWidth = function () {\n    return this.getSize().width;\n  };\n  /**\n   * Get this page's height. For example:\n   * ```js\n   * const height = page.getHeight()\n   * ```\n   *\n   * This method uses [[PDFPage.getSize]] to obtain the page's size.\n   *\n   * @returns The height of the page.\n   */\n  PDFPage.prototype.getHeight = function () {\n    return this.getSize().height;\n  };\n  /**\n   * Get the rectangle defining this page's MediaBox. For example:\n   * ```js\n   * const { x, y, width, height } = page.getMediaBox()\n   * ```\n   *\n   * The MediaBox of a page defines the boundaries of the physical medium on\n   * which the page is to be displayed/printed. It may include extended area\n   * surrounding the page content for bleed marks, printing marks, etc...\n   * It may also include areas close to the edges of the medium that cannot be\n   * marked because of physical limitations of the output device. Content\n   * falling outside this boundary may safely be discarded without affecting\n   * the meaning of the PDF file.\n   *\n   * @returns An object defining the lower left corner of the MediaBox and its\n   *          width & height.\n   */\n  PDFPage.prototype.getMediaBox = function () {\n    var mediaBox = this.node.MediaBox();\n    return mediaBox.asRectangle();\n  };\n  /**\n   * Get the rectangle defining this page's CropBox. For example:\n   * ```js\n   * const { x, y, width, height } = page.getCropBox()\n   * ```\n   *\n   * The CropBox of a page defines the region to which the contents of the page\n   * shall be clipped when displayed or printed. Unlike the other boxes, the\n   * CropBox does not necessarily represent the physical page geometry. It\n   * merely imposes clipping on the page contents.\n   *\n   * The CropBox's default value is the page's MediaBox.\n   *\n   * @returns An object defining the lower left corner of the CropBox and its\n   *          width & height.\n   */\n  PDFPage.prototype.getCropBox = function () {\n    var _a;\n    var cropBox = this.node.CropBox();\n    return (_a = cropBox === null || cropBox === void 0 ? void 0 : cropBox.asRectangle()) !== null && _a !== void 0 ? _a : this.getMediaBox();\n  };\n  /**\n   * Get the rectangle defining this page's BleedBox. For example:\n   * ```js\n   * const { x, y, width, height } = page.getBleedBox()\n   * ```\n   *\n   * The BleedBox of a page defines the region to which the contents of the\n   * page shall be clipped when output in a production environment. This may\n   * include any extra bleed area needed to accommodate the physical\n   * limitations of cutting, folding, and trimming equipment. The actual\n   * printed page may include printing marks that fall outside the BleedBox.\n   *\n   * The BleedBox's default value is the page's CropBox.\n   *\n   * @returns An object defining the lower left corner of the BleedBox and its\n   *          width & height.\n   */\n  PDFPage.prototype.getBleedBox = function () {\n    var _a;\n    var bleedBox = this.node.BleedBox();\n    return (_a = bleedBox === null || bleedBox === void 0 ? void 0 : bleedBox.asRectangle()) !== null && _a !== void 0 ? _a : this.getCropBox();\n  };\n  /**\n   * Get the rectangle defining this page's TrimBox. For example:\n   * ```js\n   * const { x, y, width, height } = page.getTrimBox()\n   * ```\n   *\n   * The TrimBox of a page defines the intended dimensions of the finished\n   * page after trimming. It may be smaller than the MediaBox to allow for\n   * production-related content, such as printing instructions, cut marks, or\n   * color bars.\n   *\n   * The TrimBox's default value is the page's CropBox.\n   *\n   * @returns An object defining the lower left corner of the TrimBox and its\n   *          width & height.\n   */\n  PDFPage.prototype.getTrimBox = function () {\n    var _a;\n    var trimBox = this.node.TrimBox();\n    return (_a = trimBox === null || trimBox === void 0 ? void 0 : trimBox.asRectangle()) !== null && _a !== void 0 ? _a : this.getCropBox();\n  };\n  /**\n   * Get the rectangle defining this page's ArtBox. For example:\n   * ```js\n   * const { x, y, width, height } = page.getArtBox()\n   * ```\n   *\n   * The ArtBox of a page defines the extent of the page's meaningful content\n   * (including potential white space).\n   *\n   * The ArtBox's default value is the page's CropBox.\n   *\n   * @returns An object defining the lower left corner of the ArtBox and its\n   *          width & height.\n   */\n  PDFPage.prototype.getArtBox = function () {\n    var _a;\n    var artBox = this.node.ArtBox();\n    return (_a = artBox === null || artBox === void 0 ? void 0 : artBox.asRectangle()) !== null && _a !== void 0 ? _a : this.getCropBox();\n  };\n  /**\n   * Translate this page's content to a new location on the page. This operation\n   * is often useful after resizing the page with [[setSize]]. For example:\n   * ```js\n   * // Add 50 units of whitespace to the top and right of the page\n   * page.setSize(page.getWidth() + 50, page.getHeight() + 50)\n   *\n   * // Move the page's content from the lower-left corner of the page\n   * // to the top-right corner.\n   * page.translateContent(50, 50)\n   *\n   * // Now there are 50 units of whitespace to the left and bottom of the page\n   * ```\n   * See also: [[resetPosition]]\n   * @param x The new position on the x-axis for this page's content.\n   * @param y The new position on the y-axis for this page's content.\n   */\n  PDFPage.prototype.translateContent = function (x, y) {\n    assertIs(x, 'x', ['number']);\n    assertIs(y, 'y', ['number']);\n    this.node.normalize();\n    this.getContentStream();\n    var start = this.createContentStream(pushGraphicsState(), translate(x, y));\n    var startRef = this.doc.context.register(start);\n    var end = this.createContentStream(popGraphicsState());\n    var endRef = this.doc.context.register(end);\n    this.node.wrapContentStreams(startRef, endRef);\n  };\n  /**\n   * Scale the size, content, and annotations of a page.\n   *\n   * For example:\n   * ```js\n   * page.scale(0.5, 0.5);\n   * ```\n   *\n   * @param x The factor by which the width for the page should be scaled\n   *          (e.g. `0.5` is 50%).\n   * @param y The factor by which the height for the page should be scaled\n   *          (e.g. `2.0` is 200%).\n   */\n  PDFPage.prototype.scale = function (x, y) {\n    assertIs(x, 'x', ['number']);\n    assertIs(y, 'y', ['number']);\n    this.setSize(this.getWidth() * x, this.getHeight() * y);\n    this.scaleContent(x, y);\n    this.scaleAnnotations(x, y);\n  };\n  /**\n   * Scale the content of a page. This is useful after resizing an existing\n   * page. This scales only the content, not the annotations.\n   *\n   * For example:\n   * ```js\n   * // Bisect the size of the page\n   * page.setSize(page.getWidth() / 2, page.getHeight() / 2);\n   *\n   * // Scale the content of the page down by 50% in x and y\n   * page.scaleContent(0.5, 0.5);\n   * ```\n   * See also: [[scaleAnnotations]]\n   * @param x The factor by which the x-axis for the content should be scaled\n   *          (e.g. `0.5` is 50%).\n   * @param y The factor by which the y-axis for the content should be scaled\n   *          (e.g. `2.0` is 200%).\n   */\n  PDFPage.prototype.scaleContent = function (x, y) {\n    assertIs(x, 'x', ['number']);\n    assertIs(y, 'y', ['number']);\n    this.node.normalize();\n    this.getContentStream();\n    var start = this.createContentStream(pushGraphicsState(), scale(x, y));\n    var startRef = this.doc.context.register(start);\n    var end = this.createContentStream(popGraphicsState());\n    var endRef = this.doc.context.register(end);\n    this.node.wrapContentStreams(startRef, endRef);\n  };\n  /**\n   * Scale the annotations of a page. This is useful if you want to scale a\n   * page with comments or other annotations.\n   * ```js\n   * // Scale the content of the page down by 50% in x and y\n   * page.scaleContent(0.5, 0.5);\n   *\n   * // Scale the content of the page down by 50% in x and y\n   * page.scaleAnnotations(0.5, 0.5);\n   * ```\n   * See also: [[scaleContent]]\n   * @param x The factor by which the x-axis for the annotations should be\n   *          scaled (e.g. `0.5` is 50%).\n   * @param y The factor by which the y-axis for the annotations should be\n   *          scaled (e.g. `2.0` is 200%).\n   */\n  PDFPage.prototype.scaleAnnotations = function (x, y) {\n    assertIs(x, 'x', ['number']);\n    assertIs(y, 'y', ['number']);\n    var annots = this.node.Annots();\n    if (!annots) return;\n    for (var idx = 0; idx < annots.size(); idx++) {\n      var annot = annots.lookup(idx);\n      if (annot instanceof PDFDict) this.scaleAnnot(annot, x, y);\n    }\n  };\n  /**\n   * Reset the x and y coordinates of this page to `(0, 0)`. This operation is\n   * often useful after calling [[translateContent]]. For example:\n   * ```js\n   * // Shift the page's contents up and to the right by 50 units\n   * page.translateContent(50, 50)\n   *\n   * // This text will shifted - it will be drawn at (50, 50)\n   * page.drawText('I am shifted')\n   *\n   * // Move back to (0, 0)\n   * page.resetPosition()\n   *\n   * // This text will not be shifted - it will be drawn at (0, 0)\n   * page.drawText('I am not shifted')\n   * ```\n   */\n  PDFPage.prototype.resetPosition = function () {\n    this.getContentStream(false);\n    this.x = 0;\n    this.y = 0;\n  };\n  /**\n   * Choose a default font for this page. The default font will be used whenever\n   * text is drawn on this page and no font is specified. For example:\n   * ```js\n   * import { StandardFonts } from 'pdf-lib'\n   *\n   * const timesRomanFont = await pdfDoc.embedFont(StandardFonts.TimesRoman)\n   * const helveticaFont = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const courierFont = await pdfDoc.embedFont(StandardFonts.Courier)\n   *\n   * const page = pdfDoc.addPage()\n   *\n   * page.setFont(helveticaFont)\n   * page.drawText('I will be drawn in Helvetica')\n   *\n   * page.setFont(timesRomanFont)\n   * page.drawText('I will be drawn in Courier', { font: courierFont })\n   * ```\n   * @param font The default font to be used when drawing text on this page.\n   */\n  PDFPage.prototype.setFont = function (font) {\n    // TODO: Reuse image Font name if we've already added this image to Resources.Fonts\n    assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n    this.font = font;\n    this.fontKey = this.node.newFontDictionary(this.font.name, this.font.ref);\n  };\n  /**\n   * Choose a default font size for this page. The default font size will be\n   * used whenever text is drawn on this page and no font size is specified.\n   * For example:\n   * ```js\n   * page.setFontSize(12)\n   * page.drawText('I will be drawn in size 12')\n   *\n   * page.setFontSize(36)\n   * page.drawText('I will be drawn in size 24', { fontSize: 24 })\n   * ```\n   * @param fontSize The default font size to be used when drawing text on this\n   *                 page.\n   */\n  PDFPage.prototype.setFontSize = function (fontSize) {\n    assertIs(fontSize, 'fontSize', ['number']);\n    this.fontSize = fontSize;\n  };\n  /**\n   * Choose a default font color for this page. The default font color will be\n   * used whenever text is drawn on this page and no font color is specified.\n   * For example:\n   * ```js\n   * import { rgb, cmyk, grayscale } from 'pdf-lib'\n   *\n   * page.setFontColor(rgb(0.97, 0.02, 0.97))\n   * page.drawText('I will be drawn in pink')\n   *\n   * page.setFontColor(cmyk(0.4, 0.7, 0.39, 0.15))\n   * page.drawText('I will be drawn in gray', { color: grayscale(0.5) })\n   * ```\n   * @param fontColor The default font color to be used when drawing text on\n   *                  this page.\n   */\n  PDFPage.prototype.setFontColor = function (fontColor) {\n    assertIs(fontColor, 'fontColor', [[Object, 'Color']]);\n    this.fontColor = fontColor;\n  };\n  /**\n   * Choose a default line height for this page. The default line height will be\n   * used whenever text is drawn on this page and no line height is specified.\n   * For example:\n   * ```js\n   * page.setLineHeight(12);\n   * page.drawText('These lines will be vertically \\n separated by 12 units')\n   *\n   * page.setLineHeight(36);\n   * page.drawText('These lines will be vertically \\n separated by 24 units', {\n   *   lineHeight: 24\n   * })\n   * ```\n   * @param lineHeight The default line height to be used when drawing text on\n   *                   this page.\n   */\n  PDFPage.prototype.setLineHeight = function (lineHeight) {\n    assertIs(lineHeight, 'lineHeight', ['number']);\n    this.lineHeight = lineHeight;\n  };\n  /**\n   * Get the default position of this page. For example:\n   * ```js\n   * const { x, y } = page.getPosition()\n   * ```\n   * @returns The default position of the page.\n   */\n  PDFPage.prototype.getPosition = function () {\n    return {\n      x: this.x,\n      y: this.y\n    };\n  };\n  /**\n   * Get the default x coordinate of this page. For example:\n   * ```js\n   * const x = page.getX()\n   * ```\n   * @returns The default x coordinate of the page.\n   */\n  PDFPage.prototype.getX = function () {\n    return this.x;\n  };\n  /**\n   * Get the default y coordinate of this page. For example:\n   * ```js\n   * const y = page.getY()\n   * ```\n   * @returns The default y coordinate of the page.\n   */\n  PDFPage.prototype.getY = function () {\n    return this.y;\n  };\n  /**\n   * Change the default position of this page. For example:\n   * ```js\n   * page.moveTo(0, 0)\n   * page.drawText('I will be drawn at the origin')\n   *\n   * page.moveTo(0, 25)\n   * page.drawText('I will be drawn 25 units up')\n   *\n   * page.moveTo(25, 25)\n   * page.drawText('I will be drawn 25 units up and 25 units to the right')\n   * ```\n   * @param x The new default position on the x-axis for this page.\n   * @param y The new default position on the y-axis for this page.\n   */\n  PDFPage.prototype.moveTo = function (x, y) {\n    assertIs(x, 'x', ['number']);\n    assertIs(y, 'y', ['number']);\n    this.x = x;\n    this.y = y;\n  };\n  /**\n   * Change the default position of this page to be further down the y-axis.\n   * For example:\n   * ```js\n   * page.moveTo(50, 50)\n   * page.drawText('I will be drawn at (50, 50)')\n   *\n   * page.moveDown(10)\n   * page.drawText('I will be drawn at (50, 40)')\n   * ```\n   * @param yDecrease The amount by which the page's default position along the\n   *                  y-axis should be decreased.\n   */\n  PDFPage.prototype.moveDown = function (yDecrease) {\n    assertIs(yDecrease, 'yDecrease', ['number']);\n    this.y -= yDecrease;\n  };\n  /**\n   * Change the default position of this page to be further up the y-axis.\n   * For example:\n   * ```js\n   * page.moveTo(50, 50)\n   * page.drawText('I will be drawn at (50, 50)')\n   *\n   * page.moveUp(10)\n   * page.drawText('I will be drawn at (50, 60)')\n   * ```\n   * @param yIncrease The amount by which the page's default position along the\n   *                  y-axis should be increased.\n   */\n  PDFPage.prototype.moveUp = function (yIncrease) {\n    assertIs(yIncrease, 'yIncrease', ['number']);\n    this.y += yIncrease;\n  };\n  /**\n   * Change the default position of this page to be further left on the x-axis.\n   * For example:\n   * ```js\n   * page.moveTo(50, 50)\n   * page.drawText('I will be drawn at (50, 50)')\n   *\n   * page.moveLeft(10)\n   * page.drawText('I will be drawn at (40, 50)')\n   * ```\n   * @param xDecrease The amount by which the page's default position along the\n   *                  x-axis should be decreased.\n   */\n  PDFPage.prototype.moveLeft = function (xDecrease) {\n    assertIs(xDecrease, 'xDecrease', ['number']);\n    this.x -= xDecrease;\n  };\n  /**\n   * Change the default position of this page to be further right on the y-axis.\n   * For example:\n   * ```js\n   * page.moveTo(50, 50)\n   * page.drawText('I will be drawn at (50, 50)')\n   *\n   * page.moveRight(10)\n   * page.drawText('I will be drawn at (60, 50)')\n   * ```\n   * @param xIncrease The amount by which the page's default position along the\n   *                  x-axis should be increased.\n   */\n  PDFPage.prototype.moveRight = function (xIncrease) {\n    assertIs(xIncrease, 'xIncrease', ['number']);\n    this.x += xIncrease;\n  };\n  /**\n   * Push one or more operators to the end of this page's current content\n   * stream. For example:\n   * ```js\n   * import {\n   *   pushGraphicsState,\n   *   moveTo,\n   *   lineTo,\n   *   closePath,\n   *   setFillingColor,\n   *   rgb,\n   *   fill,\n   *   popGraphicsState,\n   * } from 'pdf-lib'\n   *\n   * // Draw a green triangle in the lower-left corner of the page\n   * page.pushOperators(\n   *   pushGraphicsState(),\n   *   moveTo(0, 0),\n   *   lineTo(100, 0),\n   *   lineTo(50, 100),\n   *   closePath(),\n   *   setFillingColor(rgb(0.0, 1.0, 0.0)),\n   *   fill(),\n   *   popGraphicsState(),\n   * )\n   * ```\n   * @param operator The operators to be pushed.\n   */\n  PDFPage.prototype.pushOperators = function () {\n    var operator = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      operator[_i] = arguments[_i];\n    }\n    assertEachIs(operator, 'operator', [[PDFOperator, 'PDFOperator']]);\n    var contentStream = this.getContentStream();\n    contentStream.push.apply(contentStream, operator);\n  };\n  /**\n   * Draw one or more lines of text on this page. For example:\n   * ```js\n   * import { StandardFonts, rgb } from 'pdf-lib'\n   *\n   * const helveticaFont = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const timesRomanFont = await pdfDoc.embedFont(StandardFonts.TimesRoman)\n   *\n   * const page = pdfDoc.addPage()\n   *\n   * page.setFont(helveticaFont)\n   *\n   * page.moveTo(5, 200)\n   * page.drawText('The Life of an Egg', { size: 36 })\n   *\n   * page.moveDown(36)\n   * page.drawText('An Epic Tale of Woe', { size: 30 })\n   *\n   * page.drawText(\n   *   `Humpty Dumpty sat on a wall \\n` +\n   *   `Humpty Dumpty had a great fall; \\n` +\n   *   `All the king's horses and all the king's men \\n` +\n   *   `Couldn't put Humpty together again. \\n`,\n   *   {\n   *     x: 25,\n   *     y: 100,\n   *     font: timesRomanFont,\n   *     size: 24,\n   *     color: rgb(1, 0, 0),\n   *     lineHeight: 24,\n   *     opacity: 0.75,\n   *   },\n   * )\n   * ```\n   * @param text The text to be drawn.\n   * @param options The options to be used when drawing the text.\n   */\n  PDFPage.prototype.drawText = function (text, options) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    if (options === void 0) {\n      options = {};\n    }\n    assertIs(text, 'text', ['string']);\n    assertOrUndefined(options.color, 'options.color', [[Object, 'Color']]);\n    assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n    assertOrUndefined(options.font, 'options.font', [[PDFFont, 'PDFFont']]);\n    assertOrUndefined(options.size, 'options.size', ['number']);\n    assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n    assertOrUndefined(options.xSkew, 'options.xSkew', [[Object, 'Rotation']]);\n    assertOrUndefined(options.ySkew, 'options.ySkew', [[Object, 'Rotation']]);\n    assertOrUndefined(options.x, 'options.x', ['number']);\n    assertOrUndefined(options.y, 'options.y', ['number']);\n    assertOrUndefined(options.lineHeight, 'options.lineHeight', ['number']);\n    assertOrUndefined(options.maxWidth, 'options.maxWidth', ['number']);\n    assertOrUndefined(options.wordBreaks, 'options.wordBreaks', [Array]);\n    assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\n    var _h = this.setOrEmbedFont(options.font),\n      oldFont = _h.oldFont,\n      newFont = _h.newFont,\n      newFontKey = _h.newFontKey;\n    var fontSize = options.size || this.fontSize;\n    var wordBreaks = options.wordBreaks || this.doc.defaultWordBreaks;\n    var textWidth = function (t) {\n      return newFont.widthOfTextAtSize(t, fontSize);\n    };\n    var lines = options.maxWidth === undefined ? lineSplit(cleanText(text)) : breakTextIntoLines(text, wordBreaks, options.maxWidth, textWidth);\n    var encodedLines = new Array(lines.length);\n    for (var idx = 0, len = lines.length; idx < len; idx++) {\n      encodedLines[idx] = newFont.encodeText(lines[idx]);\n    }\n    var graphicsStateKey = this.maybeEmbedGraphicsState({\n      opacity: options.opacity,\n      blendMode: options.blendMode\n    });\n    var contentStream = this.getContentStream();\n    contentStream.push.apply(contentStream, drawLinesOfText(encodedLines, {\n      color: (_a = options.color) !== null && _a !== void 0 ? _a : this.fontColor,\n      font: newFontKey,\n      size: fontSize,\n      rotate: (_b = options.rotate) !== null && _b !== void 0 ? _b : degrees(0),\n      xSkew: (_c = options.xSkew) !== null && _c !== void 0 ? _c : degrees(0),\n      ySkew: (_d = options.ySkew) !== null && _d !== void 0 ? _d : degrees(0),\n      x: (_e = options.x) !== null && _e !== void 0 ? _e : this.x,\n      y: (_f = options.y) !== null && _f !== void 0 ? _f : this.y,\n      lineHeight: (_g = options.lineHeight) !== null && _g !== void 0 ? _g : this.lineHeight,\n      graphicsState: graphicsStateKey\n    }));\n    if (options.font) {\n      if (oldFont) this.setFont(oldFont);else this.resetFont();\n    }\n  };\n  /**\n   * Draw an image on this page. For example:\n   * ```js\n   * import { degrees } from 'pdf-lib'\n   *\n   * const jpgUrl = 'https://pdf-lib.js.org/assets/cat_riding_unicorn.jpg'\n   * const jpgImageBytes = await fetch(jpgUrl).then((res) => res.arrayBuffer())\n   *\n   * const jpgImage = await pdfDoc.embedJpg(jpgImageBytes)\n   * const jpgDims = jpgImage.scale(0.5)\n   *\n   * const page = pdfDoc.addPage()\n   *\n   * page.drawImage(jpgImage, {\n   *   x: 25,\n   *   y: 25,\n   *   width: jpgDims.width,\n   *   height: jpgDims.height,\n   *   rotate: degrees(30),\n   *   opacity: 0.75,\n   * })\n   * ```\n   * @param image The image to be drawn.\n   * @param options The options to be used when drawing the image.\n   */\n  PDFPage.prototype.drawImage = function (image, options) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    if (options === void 0) {\n      options = {};\n    }\n    // TODO: Reuse image XObject name if we've already added this image to Resources.XObjects\n    assertIs(image, 'image', [[PDFImage, 'PDFImage']]);\n    assertOrUndefined(options.x, 'options.x', ['number']);\n    assertOrUndefined(options.y, 'options.y', ['number']);\n    assertOrUndefined(options.width, 'options.width', ['number']);\n    assertOrUndefined(options.height, 'options.height', ['number']);\n    assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n    assertOrUndefined(options.xSkew, 'options.xSkew', [[Object, 'Rotation']]);\n    assertOrUndefined(options.ySkew, 'options.ySkew', [[Object, 'Rotation']]);\n    assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n    assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\n    var xObjectKey = this.node.newXObject('Image', image.ref);\n    var graphicsStateKey = this.maybeEmbedGraphicsState({\n      opacity: options.opacity,\n      blendMode: options.blendMode\n    });\n    var contentStream = this.getContentStream();\n    contentStream.push.apply(contentStream, drawImage(xObjectKey, {\n      x: (_a = options.x) !== null && _a !== void 0 ? _a : this.x,\n      y: (_b = options.y) !== null && _b !== void 0 ? _b : this.y,\n      width: (_c = options.width) !== null && _c !== void 0 ? _c : image.size().width,\n      height: (_d = options.height) !== null && _d !== void 0 ? _d : image.size().height,\n      rotate: (_e = options.rotate) !== null && _e !== void 0 ? _e : degrees(0),\n      xSkew: (_f = options.xSkew) !== null && _f !== void 0 ? _f : degrees(0),\n      ySkew: (_g = options.ySkew) !== null && _g !== void 0 ? _g : degrees(0),\n      graphicsState: graphicsStateKey\n    }));\n  };\n  /**\n   * Draw an embedded PDF page on this page. For example:\n   * ```js\n   * import { degrees } from 'pdf-lib'\n   *\n   * const pdfDoc = await PDFDocument.create()\n   * const page = pdfDoc.addPage()\n   *\n   * const sourcePdfUrl = 'https://pdf-lib.js.org/assets/with_large_page_count.pdf'\n   * const sourcePdf = await fetch(sourcePdfUrl).then((res) => res.arrayBuffer())\n   *\n   * // Embed page 74 from the PDF\n   * const [embeddedPage] = await pdfDoc.embedPdf(sourcePdf, 73)\n   *\n   * page.drawPage(embeddedPage, {\n   *   x: 250,\n   *   y: 200,\n   *   xScale: 0.5,\n   *   yScale: 0.5,\n   *   rotate: degrees(30),\n   *   opacity: 0.75,\n   * })\n   * ```\n   *\n   * The `options` argument accepts both `width`/`height` and `xScale`/`yScale`\n   * as options. Since each of these options defines the size of the drawn page,\n   * if both options are given, `width` and `height` take precedence and the\n   * corresponding scale variants are ignored.\n   *\n   * @param embeddedPage The embedded page to be drawn.\n   * @param options The options to be used when drawing the embedded page.\n   */\n  PDFPage.prototype.drawPage = function (embeddedPage, options) {\n    var _a, _b, _c, _d, _e;\n    if (options === void 0) {\n      options = {};\n    }\n    // TODO: Reuse embeddedPage XObject name if we've already added this embeddedPage to Resources.XObjects\n    assertIs(embeddedPage, 'embeddedPage', [[PDFEmbeddedPage, 'PDFEmbeddedPage']]);\n    assertOrUndefined(options.x, 'options.x', ['number']);\n    assertOrUndefined(options.y, 'options.y', ['number']);\n    assertOrUndefined(options.xScale, 'options.xScale', ['number']);\n    assertOrUndefined(options.yScale, 'options.yScale', ['number']);\n    assertOrUndefined(options.width, 'options.width', ['number']);\n    assertOrUndefined(options.height, 'options.height', ['number']);\n    assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n    assertOrUndefined(options.xSkew, 'options.xSkew', [[Object, 'Rotation']]);\n    assertOrUndefined(options.ySkew, 'options.ySkew', [[Object, 'Rotation']]);\n    assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n    assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\n    var xObjectKey = this.node.newXObject('EmbeddedPdfPage', embeddedPage.ref);\n    var graphicsStateKey = this.maybeEmbedGraphicsState({\n      opacity: options.opacity,\n      blendMode: options.blendMode\n    });\n    // prettier-ignore\n    var xScale = options.width !== undefined ? options.width / embeddedPage.width : options.xScale !== undefined ? options.xScale : 1;\n    // prettier-ignore\n    var yScale = options.height !== undefined ? options.height / embeddedPage.height : options.yScale !== undefined ? options.yScale : 1;\n    var contentStream = this.getContentStream();\n    contentStream.push.apply(contentStream, drawPage(xObjectKey, {\n      x: (_a = options.x) !== null && _a !== void 0 ? _a : this.x,\n      y: (_b = options.y) !== null && _b !== void 0 ? _b : this.y,\n      xScale: xScale,\n      yScale: yScale,\n      rotate: (_c = options.rotate) !== null && _c !== void 0 ? _c : degrees(0),\n      xSkew: (_d = options.xSkew) !== null && _d !== void 0 ? _d : degrees(0),\n      ySkew: (_e = options.ySkew) !== null && _e !== void 0 ? _e : degrees(0),\n      graphicsState: graphicsStateKey\n    }));\n  };\n  /**\n   * Draw an SVG path on this page. For example:\n   * ```js\n   * import { rgb } from 'pdf-lib'\n   *\n   * const svgPath = 'M 0,20 L 100,160 Q 130,200 150,120 C 190,-40 200,200 300,150 L 400,90'\n   *\n   * // Draw path as black line\n   * page.drawSvgPath(svgPath, { x: 25, y: 75 })\n   *\n   * // Change border style and opacity\n   * page.drawSvgPath(svgPath, {\n   *   x: 25,\n   *   y: 275,\n   *   borderColor: rgb(0.5, 0.5, 0.5),\n   *   borderWidth: 2,\n   *   borderOpacity: 0.75,\n   * })\n   *\n   * // Set fill color and opacity\n   * page.drawSvgPath(svgPath, {\n   *   x: 25,\n   *   y: 475,\n   *   color: rgb(1.0, 0, 0),\n   *   opacity: 0.75,\n   * })\n   *\n   * // Draw 50% of original size\n   * page.drawSvgPath(svgPath, {\n   *   x: 25,\n   *   y: 675,\n   *   scale: 0.5,\n   * })\n   * ```\n   * @param path The SVG path to be drawn.\n   * @param options The options to be used when drawing the SVG path.\n   */\n  PDFPage.prototype.drawSvgPath = function (path, options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n    if (options === void 0) {\n      options = {};\n    }\n    assertIs(path, 'path', ['string']);\n    assertOrUndefined(options.x, 'options.x', ['number']);\n    assertOrUndefined(options.y, 'options.y', ['number']);\n    assertOrUndefined(options.scale, 'options.scale', ['number']);\n    assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n    assertOrUndefined(options.borderWidth, 'options.borderWidth', ['number']);\n    assertOrUndefined(options.color, 'options.color', [[Object, 'Color']]);\n    assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n    assertOrUndefined(options.borderColor, 'options.borderColor', [[Object, 'Color']]);\n    assertOrUndefined(options.borderDashArray, 'options.borderDashArray', [Array]);\n    assertOrUndefined(options.borderDashPhase, 'options.borderDashPhase', ['number']);\n    assertIsOneOfOrUndefined(options.borderLineCap, 'options.borderLineCap', LineCapStyle);\n    assertRangeOrUndefined(options.borderOpacity, 'options.borderOpacity', 0, 1);\n    assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\n    var graphicsStateKey = this.maybeEmbedGraphicsState({\n      opacity: options.opacity,\n      borderOpacity: options.borderOpacity,\n      blendMode: options.blendMode\n    });\n    if (!('color' in options) && !('borderColor' in options)) {\n      options.borderColor = rgb(0, 0, 0);\n    }\n    var contentStream = this.getContentStream();\n    contentStream.push.apply(contentStream, drawSvgPath(path, {\n      x: (_a = options.x) !== null && _a !== void 0 ? _a : this.x,\n      y: (_b = options.y) !== null && _b !== void 0 ? _b : this.y,\n      scale: options.scale,\n      rotate: (_c = options.rotate) !== null && _c !== void 0 ? _c : degrees(0),\n      color: (_d = options.color) !== null && _d !== void 0 ? _d : undefined,\n      borderColor: (_e = options.borderColor) !== null && _e !== void 0 ? _e : undefined,\n      borderWidth: (_f = options.borderWidth) !== null && _f !== void 0 ? _f : 0,\n      borderDashArray: (_g = options.borderDashArray) !== null && _g !== void 0 ? _g : undefined,\n      borderDashPhase: (_h = options.borderDashPhase) !== null && _h !== void 0 ? _h : undefined,\n      borderLineCap: (_j = options.borderLineCap) !== null && _j !== void 0 ? _j : undefined,\n      graphicsState: graphicsStateKey\n    }));\n  };\n  /**\n   * Draw a line on this page. For example:\n   * ```js\n   * import { rgb } from 'pdf-lib'\n   *\n   * page.drawLine({\n   *   start: { x: 25, y: 75 },\n   *   end: { x: 125, y: 175 },\n   *   thickness: 2,\n   *   color: rgb(0.75, 0.2, 0.2),\n   *   opacity: 0.75,\n   * })\n   * ```\n   * @param options The options to be used when drawing the line.\n   */\n  PDFPage.prototype.drawLine = function (options) {\n    var _a, _b, _c, _d, _e;\n    assertIs(options.start, 'options.start', [[Object, '{ x: number, y: number }']]);\n    assertIs(options.end, 'options.end', [[Object, '{ x: number, y: number }']]);\n    assertIs(options.start.x, 'options.start.x', ['number']);\n    assertIs(options.start.y, 'options.start.y', ['number']);\n    assertIs(options.end.x, 'options.end.x', ['number']);\n    assertIs(options.end.y, 'options.end.y', ['number']);\n    assertOrUndefined(options.thickness, 'options.thickness', ['number']);\n    assertOrUndefined(options.color, 'options.color', [[Object, 'Color']]);\n    assertOrUndefined(options.dashArray, 'options.dashArray', [Array]);\n    assertOrUndefined(options.dashPhase, 'options.dashPhase', ['number']);\n    assertIsOneOfOrUndefined(options.lineCap, 'options.lineCap', LineCapStyle);\n    assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n    assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\n    var graphicsStateKey = this.maybeEmbedGraphicsState({\n      borderOpacity: options.opacity,\n      blendMode: options.blendMode\n    });\n    if (!('color' in options)) {\n      options.color = rgb(0, 0, 0);\n    }\n    var contentStream = this.getContentStream();\n    contentStream.push.apply(contentStream, drawLine({\n      start: options.start,\n      end: options.end,\n      thickness: (_a = options.thickness) !== null && _a !== void 0 ? _a : 1,\n      color: (_b = options.color) !== null && _b !== void 0 ? _b : undefined,\n      dashArray: (_c = options.dashArray) !== null && _c !== void 0 ? _c : undefined,\n      dashPhase: (_d = options.dashPhase) !== null && _d !== void 0 ? _d : undefined,\n      lineCap: (_e = options.lineCap) !== null && _e !== void 0 ? _e : undefined,\n      graphicsState: graphicsStateKey\n    }));\n  };\n  /**\n   * Draw a rectangle on this page. For example:\n   * ```js\n   * import { degrees, grayscale, rgb } from 'pdf-lib'\n   *\n   * page.drawRectangle({\n   *   x: 25,\n   *   y: 75,\n   *   width: 250,\n   *   height: 75,\n   *   rotate: degrees(-15),\n   *   borderWidth: 5,\n   *   borderColor: grayscale(0.5),\n   *   color: rgb(0.75, 0.2, 0.2),\n   *   opacity: 0.5,\n   *   borderOpacity: 0.75,\n   * })\n   * ```\n   * @param options The options to be used when drawing the rectangle.\n   */\n  PDFPage.prototype.drawRectangle = function (options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;\n    if (options === void 0) {\n      options = {};\n    }\n    assertOrUndefined(options.x, 'options.x', ['number']);\n    assertOrUndefined(options.y, 'options.y', ['number']);\n    assertOrUndefined(options.width, 'options.width', ['number']);\n    assertOrUndefined(options.height, 'options.height', ['number']);\n    assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n    assertOrUndefined(options.xSkew, 'options.xSkew', [[Object, 'Rotation']]);\n    assertOrUndefined(options.ySkew, 'options.ySkew', [[Object, 'Rotation']]);\n    assertOrUndefined(options.borderWidth, 'options.borderWidth', ['number']);\n    assertOrUndefined(options.color, 'options.color', [[Object, 'Color']]);\n    assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n    assertOrUndefined(options.borderColor, 'options.borderColor', [[Object, 'Color']]);\n    assertOrUndefined(options.borderDashArray, 'options.borderDashArray', [Array]);\n    assertOrUndefined(options.borderDashPhase, 'options.borderDashPhase', ['number']);\n    assertIsOneOfOrUndefined(options.borderLineCap, 'options.borderLineCap', LineCapStyle);\n    assertRangeOrUndefined(options.borderOpacity, 'options.borderOpacity', 0, 1);\n    assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\n    var graphicsStateKey = this.maybeEmbedGraphicsState({\n      opacity: options.opacity,\n      borderOpacity: options.borderOpacity,\n      blendMode: options.blendMode\n    });\n    if (!('color' in options) && !('borderColor' in options)) {\n      options.color = rgb(0, 0, 0);\n    }\n    var contentStream = this.getContentStream();\n    contentStream.push.apply(contentStream, drawRectangle({\n      x: (_a = options.x) !== null && _a !== void 0 ? _a : this.x,\n      y: (_b = options.y) !== null && _b !== void 0 ? _b : this.y,\n      width: (_c = options.width) !== null && _c !== void 0 ? _c : 150,\n      height: (_d = options.height) !== null && _d !== void 0 ? _d : 100,\n      rotate: (_e = options.rotate) !== null && _e !== void 0 ? _e : degrees(0),\n      xSkew: (_f = options.xSkew) !== null && _f !== void 0 ? _f : degrees(0),\n      ySkew: (_g = options.ySkew) !== null && _g !== void 0 ? _g : degrees(0),\n      borderWidth: (_h = options.borderWidth) !== null && _h !== void 0 ? _h : 0,\n      color: (_j = options.color) !== null && _j !== void 0 ? _j : undefined,\n      borderColor: (_k = options.borderColor) !== null && _k !== void 0 ? _k : undefined,\n      borderDashArray: (_l = options.borderDashArray) !== null && _l !== void 0 ? _l : undefined,\n      borderDashPhase: (_m = options.borderDashPhase) !== null && _m !== void 0 ? _m : undefined,\n      graphicsState: graphicsStateKey,\n      borderLineCap: (_o = options.borderLineCap) !== null && _o !== void 0 ? _o : undefined\n    }));\n  };\n  /**\n   * Draw a square on this page. For example:\n   * ```js\n   * import { degrees, grayscale, rgb } from 'pdf-lib'\n   *\n   * page.drawSquare({\n   *   x: 25,\n   *   y: 75,\n   *   size: 100,\n   *   rotate: degrees(-15),\n   *   borderWidth: 5,\n   *   borderColor: grayscale(0.5),\n   *   color: rgb(0.75, 0.2, 0.2),\n   *   opacity: 0.5,\n   *   borderOpacity: 0.75,\n   * })\n   * ```\n   * @param options The options to be used when drawing the square.\n   */\n  PDFPage.prototype.drawSquare = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var size = options.size;\n    assertOrUndefined(size, 'size', ['number']);\n    this.drawRectangle(__assign(__assign({}, options), {\n      width: size,\n      height: size\n    }));\n  };\n  /**\n   * Draw an ellipse on this page. For example:\n   * ```js\n   * import { grayscale, rgb } from 'pdf-lib'\n   *\n   * page.drawEllipse({\n   *   x: 200,\n   *   y: 75,\n   *   xScale: 100,\n   *   yScale: 50,\n   *   borderWidth: 5,\n   *   borderColor: grayscale(0.5),\n   *   color: rgb(0.75, 0.2, 0.2),\n   *   opacity: 0.5,\n   *   borderOpacity: 0.75,\n   * })\n   * ```\n   * @param options The options to be used when drawing the ellipse.\n   */\n  PDFPage.prototype.drawEllipse = function (options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n    if (options === void 0) {\n      options = {};\n    }\n    assertOrUndefined(options.x, 'options.x', ['number']);\n    assertOrUndefined(options.y, 'options.y', ['number']);\n    assertOrUndefined(options.xScale, 'options.xScale', ['number']);\n    assertOrUndefined(options.yScale, 'options.yScale', ['number']);\n    assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n    assertOrUndefined(options.color, 'options.color', [[Object, 'Color']]);\n    assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n    assertOrUndefined(options.borderColor, 'options.borderColor', [[Object, 'Color']]);\n    assertRangeOrUndefined(options.borderOpacity, 'options.borderOpacity', 0, 1);\n    assertOrUndefined(options.borderWidth, 'options.borderWidth', ['number']);\n    assertOrUndefined(options.borderDashArray, 'options.borderDashArray', [Array]);\n    assertOrUndefined(options.borderDashPhase, 'options.borderDashPhase', ['number']);\n    assertIsOneOfOrUndefined(options.borderLineCap, 'options.borderLineCap', LineCapStyle);\n    assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\n    var graphicsStateKey = this.maybeEmbedGraphicsState({\n      opacity: options.opacity,\n      borderOpacity: options.borderOpacity,\n      blendMode: options.blendMode\n    });\n    if (!('color' in options) && !('borderColor' in options)) {\n      options.color = rgb(0, 0, 0);\n    }\n    var contentStream = this.getContentStream();\n    contentStream.push.apply(contentStream, drawEllipse({\n      x: (_a = options.x) !== null && _a !== void 0 ? _a : this.x,\n      y: (_b = options.y) !== null && _b !== void 0 ? _b : this.y,\n      xScale: (_c = options.xScale) !== null && _c !== void 0 ? _c : 100,\n      yScale: (_d = options.yScale) !== null && _d !== void 0 ? _d : 100,\n      rotate: (_e = options.rotate) !== null && _e !== void 0 ? _e : undefined,\n      color: (_f = options.color) !== null && _f !== void 0 ? _f : undefined,\n      borderColor: (_g = options.borderColor) !== null && _g !== void 0 ? _g : undefined,\n      borderWidth: (_h = options.borderWidth) !== null && _h !== void 0 ? _h : 0,\n      borderDashArray: (_j = options.borderDashArray) !== null && _j !== void 0 ? _j : undefined,\n      borderDashPhase: (_k = options.borderDashPhase) !== null && _k !== void 0 ? _k : undefined,\n      borderLineCap: (_l = options.borderLineCap) !== null && _l !== void 0 ? _l : undefined,\n      graphicsState: graphicsStateKey\n    }));\n  };\n  /**\n   * Draw a circle on this page. For example:\n   * ```js\n   * import { grayscale, rgb } from 'pdf-lib'\n   *\n   * page.drawCircle({\n   *   x: 200,\n   *   y: 150,\n   *   size: 100,\n   *   borderWidth: 5,\n   *   borderColor: grayscale(0.5),\n   *   color: rgb(0.75, 0.2, 0.2),\n   *   opacity: 0.5,\n   *   borderOpacity: 0.75,\n   * })\n   * ```\n   * @param options The options to be used when drawing the ellipse.\n   */\n  PDFPage.prototype.drawCircle = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _a = options.size,\n      size = _a === void 0 ? 100 : _a;\n    assertOrUndefined(size, 'size', ['number']);\n    this.drawEllipse(__assign(__assign({}, options), {\n      xScale: size,\n      yScale: size\n    }));\n  };\n  PDFPage.prototype.setOrEmbedFont = function (font) {\n    var oldFont = this.font;\n    var oldFontKey = this.fontKey;\n    if (font) this.setFont(font);else this.getFont();\n    var newFont = this.font;\n    var newFontKey = this.fontKey;\n    return {\n      oldFont: oldFont,\n      oldFontKey: oldFontKey,\n      newFont: newFont,\n      newFontKey: newFontKey\n    };\n  };\n  PDFPage.prototype.getFont = function () {\n    if (!this.font || !this.fontKey) {\n      var font = this.doc.embedStandardFont(StandardFonts.Helvetica);\n      this.setFont(font);\n    }\n    return [this.font, this.fontKey];\n  };\n  PDFPage.prototype.resetFont = function () {\n    this.font = undefined;\n    this.fontKey = undefined;\n  };\n  PDFPage.prototype.getContentStream = function (useExisting) {\n    if (useExisting === void 0) {\n      useExisting = true;\n    }\n    if (useExisting && this.contentStream) return this.contentStream;\n    this.contentStream = this.createContentStream();\n    this.contentStreamRef = this.doc.context.register(this.contentStream);\n    this.node.addContentStream(this.contentStreamRef);\n    return this.contentStream;\n  };\n  PDFPage.prototype.createContentStream = function () {\n    var operators = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      operators[_i] = arguments[_i];\n    }\n    var dict = this.doc.context.obj({});\n    var contentStream = PDFContentStream.of(dict, operators);\n    return contentStream;\n  };\n  PDFPage.prototype.maybeEmbedGraphicsState = function (options) {\n    var opacity = options.opacity,\n      borderOpacity = options.borderOpacity,\n      blendMode = options.blendMode;\n    if (opacity === undefined && borderOpacity === undefined && blendMode === undefined) {\n      return undefined;\n    }\n    var graphicsState = this.doc.context.obj({\n      Type: 'ExtGState',\n      ca: opacity,\n      CA: borderOpacity,\n      BM: blendMode\n    });\n    var key = this.node.newExtGState('GS', graphicsState);\n    return key;\n  };\n  PDFPage.prototype.scaleAnnot = function (annot, x, y) {\n    var selectors = ['RD', 'CL', 'Vertices', 'QuadPoints', 'L', 'Rect'];\n    for (var idx = 0, len = selectors.length; idx < len; idx++) {\n      var list = annot.lookup(PDFName.of(selectors[idx]));\n      if (list instanceof PDFArray) list.scalePDFNumbers(x, y);\n    }\n    var inkLists = annot.lookup(PDFName.of('InkList'));\n    if (inkLists instanceof PDFArray) {\n      for (var idx = 0, len = inkLists.size(); idx < len; idx++) {\n        var arr = inkLists.lookup(idx);\n        if (arr instanceof PDFArray) arr.scalePDFNumbers(x, y);\n      }\n    }\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFDocument.addPage]] and [[PDFDocument.insertPage]]\n   * > methods, which can create instances of [[PDFPage]] for you.\n   *\n   * Create an instance of [[PDFPage]] from an existing leaf node.\n   *\n   * @param leafNode The leaf node to be wrapped.\n   * @param ref The unique reference for the page.\n   * @param doc The document to which the page will belong.\n   */\n  PDFPage.of = function (leafNode, ref, doc) {\n    return new PDFPage(leafNode, ref, doc);\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFDocument.addPage]] and [[PDFDocument.insertPage]]\n   * > methods, which can create instances of [[PDFPage]] for you.\n   *\n   * Create an instance of [[PDFPage]].\n   *\n   * @param doc The document to which the page will belong.\n   */\n  PDFPage.create = function (doc) {\n    assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n    var dummyRef = PDFRef.of(-1);\n    var pageLeaf = PDFPageLeaf.withContextAndParent(doc.context, dummyRef);\n    var pageRef = doc.context.register(pageLeaf);\n    return new PDFPage(pageLeaf, pageRef, doc);\n  };\n  return PDFPage;\n}();\nexport default PDFPage;","map":{"version":3,"names":["__assign","rgb","drawImage","drawLine","drawLinesOfText","drawPage","drawRectangle","drawSvgPath","drawEllipse","popGraphicsState","pushGraphicsState","translate","LineCapStyle","scale","PDFDocument","PDFEmbeddedPage","PDFFont","PDFImage","BlendMode","degrees","toDegrees","StandardFonts","PDFContentStream","PDFName","PDFOperator","PDFPageLeaf","PDFRef","PDFDict","PDFArray","assertEachIs","assertIs","assertMultiple","assertOrUndefined","breakTextIntoLines","cleanText","rectanglesAreEqual","lineSplit","assertRangeOrUndefined","assertIsOneOfOrUndefined","PDFPage","leafNode","ref","doc","fontSize","fontColor","lineHeight","x","y","node","prototype","setRotation","angle","degreesAngle","set","of","context","obj","getRotation","Rotate","asNumber","setSize","width","height","mediaBox","getMediaBox","setMediaBox","cropBox","getCropBox","bleedBox","getBleedBox","trimBox","getTrimBox","artBox","getArtBox","hasCropBox","CropBox","hasBleedBox","BleedBox","hasTrimBox","TrimBox","hasArtBox","ArtBox","setCropBox","setBleedBox","setTrimBox","setArtBox","setWidth","getSize","setHeight","MediaBox","_a","getWidth","getHeight","asRectangle","translateContent","normalize","getContentStream","start","createContentStream","startRef","register","end","endRef","wrapContentStreams","scaleContent","scaleAnnotations","annots","Annots","idx","size","annot","lookup","scaleAnnot","resetPosition","setFont","font","fontKey","newFontDictionary","name","setFontSize","setFontColor","Object","setLineHeight","getPosition","getX","getY","moveTo","moveDown","yDecrease","moveUp","yIncrease","moveLeft","xDecrease","moveRight","xIncrease","pushOperators","operator","_i","arguments","length","contentStream","push","apply","drawText","text","options","_b","_c","_d","_e","_f","_g","color","opacity","rotate","xSkew","ySkew","maxWidth","wordBreaks","Array","blendMode","_h","setOrEmbedFont","oldFont","newFont","newFontKey","defaultWordBreaks","textWidth","t","widthOfTextAtSize","lines","undefined","encodedLines","len","encodeText","graphicsStateKey","maybeEmbedGraphicsState","graphicsState","resetFont","image","xObjectKey","newXObject","embeddedPage","xScale","yScale","path","_j","borderWidth","borderColor","borderDashArray","borderDashPhase","borderLineCap","borderOpacity","thickness","dashArray","dashPhase","lineCap","_k","_l","_m","_o","drawSquare","drawCircle","oldFontKey","getFont","embedStandardFont","Helvetica","useExisting","contentStreamRef","addContentStream","operators","dict","Type","ca","CA","BM","key","newExtGState","selectors","list","scalePDFNumbers","inkLists","arr","create","dummyRef","pageLeaf","withContextAndParent","pageRef"],"sources":["E:/PROA/frontPROA/node_modules/pdf-lib/es/api/PDFPage.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport { rgb } from \"./colors\";\nimport { drawImage, drawLine, drawLinesOfText, drawPage, drawRectangle, drawSvgPath, drawEllipse, } from \"./operations\";\nimport { popGraphicsState, pushGraphicsState, translate, LineCapStyle, scale, } from \"./operators\";\nimport PDFDocument from \"./PDFDocument\";\nimport PDFEmbeddedPage from \"./PDFEmbeddedPage\";\nimport PDFFont from \"./PDFFont\";\nimport PDFImage from \"./PDFImage\";\nimport { BlendMode, } from \"./PDFPageOptions\";\nimport { degrees, toDegrees } from \"./rotations\";\nimport { StandardFonts } from \"./StandardFonts\";\nimport { PDFContentStream, PDFName, PDFOperator, PDFPageLeaf, PDFRef, PDFDict, PDFArray, } from \"../core\";\nimport { assertEachIs, assertIs, assertMultiple, assertOrUndefined, breakTextIntoLines, cleanText, rectanglesAreEqual, lineSplit, assertRangeOrUndefined, assertIsOneOfOrUndefined, } from \"../utils\";\n/**\n * Represents a single page of a [[PDFDocument]].\n */\nvar PDFPage = /** @class */ (function () {\n    function PDFPage(leafNode, ref, doc) {\n        this.fontSize = 24;\n        this.fontColor = rgb(0, 0, 0);\n        this.lineHeight = 24;\n        this.x = 0;\n        this.y = 0;\n        assertIs(leafNode, 'leafNode', [[PDFPageLeaf, 'PDFPageLeaf']]);\n        assertIs(ref, 'ref', [[PDFRef, 'PDFRef']]);\n        assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n        this.node = leafNode;\n        this.ref = ref;\n        this.doc = doc;\n    }\n    /**\n     * Rotate this page by a multiple of 90 degrees. For example:\n     * ```js\n     * import { degrees } from 'pdf-lib'\n     *\n     * page.setRotation(degrees(-90))\n     * page.setRotation(degrees(0))\n     * page.setRotation(degrees(90))\n     * page.setRotation(degrees(180))\n     * page.setRotation(degrees(270))\n     * ```\n     * @param angle The angle to rotate this page.\n     */\n    PDFPage.prototype.setRotation = function (angle) {\n        var degreesAngle = toDegrees(angle);\n        assertMultiple(degreesAngle, 'degreesAngle', 90);\n        this.node.set(PDFName.of('Rotate'), this.doc.context.obj(degreesAngle));\n    };\n    /**\n     * Get this page's rotation angle in degrees. For example:\n     * ```js\n     * const rotationAngle = page.getRotation().angle;\n     * ```\n     * @returns The rotation angle of the page in degrees (always a multiple of\n     *          90 degrees).\n     */\n    PDFPage.prototype.getRotation = function () {\n        var Rotate = this.node.Rotate();\n        return degrees(Rotate ? Rotate.asNumber() : 0);\n    };\n    /**\n     * Resize this page by increasing or decreasing its width and height. For\n     * example:\n     * ```js\n     * page.setSize(250, 500)\n     * page.setSize(page.getWidth() + 50, page.getHeight() + 100)\n     * page.setSize(page.getWidth() - 50, page.getHeight() - 100)\n     * ```\n     *\n     * Note that the PDF specification does not allow for pages to have explicit\n     * widths and heights. Instead it defines the \"size\" of a page in terms of\n     * five rectangles: the MediaBox, CropBox, BleedBox, TrimBox, and ArtBox. As a\n     * result, this method cannot directly change the width and height of a page.\n     * Instead, it works by adjusting these five boxes.\n     *\n     * This method performs the following steps:\n     *   1. Set width & height of MediaBox.\n     *   2. Set width & height of CropBox, if it has same dimensions as MediaBox.\n     *   3. Set width & height of BleedBox, if it has same dimensions as MediaBox.\n     *   4. Set width & height of TrimBox, if it has same dimensions as MediaBox.\n     *   5. Set width & height of ArtBox, if it has same dimensions as MediaBox.\n     *\n     * This approach works well for most PDF documents as all PDF pages must\n     * have a MediaBox, but relatively few have a CropBox, BleedBox, TrimBox, or\n     * ArtBox. And when they do have these additional boxes, they often have the\n     * same dimensions as the MediaBox. However, if you find this method does not\n     * work for your document, consider setting the boxes directly:\n     *   * [[PDFPage.setMediaBox]]\n     *   * [[PDFPage.setCropBox]]\n     *   * [[PDFPage.setBleedBox]]\n     *   * [[PDFPage.setTrimBox]]\n     *   * [[PDFPage.setArtBox]]\n     *\n     * @param width The new width of the page.\n     * @param height The new height of the page.\n     */\n    PDFPage.prototype.setSize = function (width, height) {\n        assertIs(width, 'width', ['number']);\n        assertIs(height, 'height', ['number']);\n        var mediaBox = this.getMediaBox();\n        this.setMediaBox(mediaBox.x, mediaBox.y, width, height);\n        var cropBox = this.getCropBox();\n        var bleedBox = this.getBleedBox();\n        var trimBox = this.getTrimBox();\n        var artBox = this.getArtBox();\n        var hasCropBox = this.node.CropBox();\n        var hasBleedBox = this.node.BleedBox();\n        var hasTrimBox = this.node.TrimBox();\n        var hasArtBox = this.node.ArtBox();\n        if (hasCropBox && rectanglesAreEqual(cropBox, mediaBox)) {\n            this.setCropBox(mediaBox.x, mediaBox.y, width, height);\n        }\n        if (hasBleedBox && rectanglesAreEqual(bleedBox, mediaBox)) {\n            this.setBleedBox(mediaBox.x, mediaBox.y, width, height);\n        }\n        if (hasTrimBox && rectanglesAreEqual(trimBox, mediaBox)) {\n            this.setTrimBox(mediaBox.x, mediaBox.y, width, height);\n        }\n        if (hasArtBox && rectanglesAreEqual(artBox, mediaBox)) {\n            this.setArtBox(mediaBox.x, mediaBox.y, width, height);\n        }\n    };\n    /**\n     * Resize this page by increasing or decreasing its width. For example:\n     * ```js\n     * page.setWidth(250)\n     * page.setWidth(page.getWidth() + 50)\n     * page.setWidth(page.getWidth() - 50)\n     * ```\n     *\n     * This method uses [[PDFPage.setSize]] to set the page's width.\n     *\n     * @param width The new width of the page.\n     */\n    PDFPage.prototype.setWidth = function (width) {\n        assertIs(width, 'width', ['number']);\n        this.setSize(width, this.getSize().height);\n    };\n    /**\n     * Resize this page by increasing or decreasing its height. For example:\n     * ```js\n     * page.setHeight(500)\n     * page.setHeight(page.getWidth() + 100)\n     * page.setHeight(page.getWidth() - 100)\n     * ```\n     *\n     * This method uses [[PDFPage.setSize]] to set the page's height.\n     *\n     * @param height The new height of the page.\n     */\n    PDFPage.prototype.setHeight = function (height) {\n        assertIs(height, 'height', ['number']);\n        this.setSize(this.getSize().width, height);\n    };\n    /**\n     * Set the MediaBox of this page. For example:\n     * ```js\n     * const mediaBox = page.getMediaBox()\n     *\n     * page.setMediaBox(0, 0, 250, 500)\n     * page.setMediaBox(mediaBox.x, mediaBox.y, 50, 100)\n     * page.setMediaBox(15, 5, mediaBox.width - 50, mediaBox.height - 100)\n     * ```\n     *\n     * See [[PDFPage.getMediaBox]] for details about what the MediaBox represents.\n     *\n     * @param x The x coordinate of the lower left corner of the new MediaBox.\n     * @param y The y coordinate of the lower left corner of the new MediaBox.\n     * @param width The width of the new MediaBox.\n     * @param height The height of the new MediaBox.\n     */\n    PDFPage.prototype.setMediaBox = function (x, y, width, height) {\n        assertIs(x, 'x', ['number']);\n        assertIs(y, 'y', ['number']);\n        assertIs(width, 'width', ['number']);\n        assertIs(height, 'height', ['number']);\n        var mediaBox = this.doc.context.obj([x, y, x + width, y + height]);\n        this.node.set(PDFName.MediaBox, mediaBox);\n    };\n    /**\n     * Set the CropBox of this page. For example:\n     * ```js\n     * const cropBox = page.getCropBox()\n     *\n     * page.setCropBox(0, 0, 250, 500)\n     * page.setCropBox(cropBox.x, cropBox.y, 50, 100)\n     * page.setCropBox(15, 5, cropBox.width - 50, cropBox.height - 100)\n     * ```\n     *\n     * See [[PDFPage.getCropBox]] for details about what the CropBox represents.\n     *\n     * @param x The x coordinate of the lower left corner of the new CropBox.\n     * @param y The y coordinate of the lower left corner of the new CropBox.\n     * @param width The width of the new CropBox.\n     * @param height The height of the new CropBox.\n     */\n    PDFPage.prototype.setCropBox = function (x, y, width, height) {\n        assertIs(x, 'x', ['number']);\n        assertIs(y, 'y', ['number']);\n        assertIs(width, 'width', ['number']);\n        assertIs(height, 'height', ['number']);\n        var cropBox = this.doc.context.obj([x, y, x + width, y + height]);\n        this.node.set(PDFName.CropBox, cropBox);\n    };\n    /**\n     * Set the BleedBox of this page. For example:\n     * ```js\n     * const bleedBox = page.getBleedBox()\n     *\n     * page.setBleedBox(0, 0, 250, 500)\n     * page.setBleedBox(bleedBox.x, bleedBox.y, 50, 100)\n     * page.setBleedBox(15, 5, bleedBox.width - 50, bleedBox.height - 100)\n     * ```\n     *\n     * See [[PDFPage.getBleedBox]] for details about what the BleedBox represents.\n     *\n     * @param x The x coordinate of the lower left corner of the new BleedBox.\n     * @param y The y coordinate of the lower left corner of the new BleedBox.\n     * @param width The width of the new BleedBox.\n     * @param height The height of the new BleedBox.\n     */\n    PDFPage.prototype.setBleedBox = function (x, y, width, height) {\n        assertIs(x, 'x', ['number']);\n        assertIs(y, 'y', ['number']);\n        assertIs(width, 'width', ['number']);\n        assertIs(height, 'height', ['number']);\n        var bleedBox = this.doc.context.obj([x, y, x + width, y + height]);\n        this.node.set(PDFName.BleedBox, bleedBox);\n    };\n    /**\n     * Set the TrimBox of this page. For example:\n     * ```js\n     * const trimBox = page.getTrimBox()\n     *\n     * page.setTrimBox(0, 0, 250, 500)\n     * page.setTrimBox(trimBox.x, trimBox.y, 50, 100)\n     * page.setTrimBox(15, 5, trimBox.width - 50, trimBox.height - 100)\n     * ```\n     *\n     * See [[PDFPage.getTrimBox]] for details about what the TrimBox represents.\n     *\n     * @param x The x coordinate of the lower left corner of the new TrimBox.\n     * @param y The y coordinate of the lower left corner of the new TrimBox.\n     * @param width The width of the new TrimBox.\n     * @param height The height of the new TrimBox.\n     */\n    PDFPage.prototype.setTrimBox = function (x, y, width, height) {\n        assertIs(x, 'x', ['number']);\n        assertIs(y, 'y', ['number']);\n        assertIs(width, 'width', ['number']);\n        assertIs(height, 'height', ['number']);\n        var trimBox = this.doc.context.obj([x, y, x + width, y + height]);\n        this.node.set(PDFName.TrimBox, trimBox);\n    };\n    /**\n     * Set the ArtBox of this page. For example:\n     * ```js\n     * const artBox = page.getArtBox()\n     *\n     * page.setArtBox(0, 0, 250, 500)\n     * page.setArtBox(artBox.x, artBox.y, 50, 100)\n     * page.setArtBox(15, 5, artBox.width - 50, artBox.height - 100)\n     * ```\n     *\n     * See [[PDFPage.getArtBox]] for details about what the ArtBox represents.\n     *\n     * @param x The x coordinate of the lower left corner of the new ArtBox.\n     * @param y The y coordinate of the lower left corner of the new ArtBox.\n     * @param width The width of the new ArtBox.\n     * @param height The height of the new ArtBox.\n     */\n    PDFPage.prototype.setArtBox = function (x, y, width, height) {\n        assertIs(x, 'x', ['number']);\n        assertIs(y, 'y', ['number']);\n        assertIs(width, 'width', ['number']);\n        assertIs(height, 'height', ['number']);\n        var artBox = this.doc.context.obj([x, y, x + width, y + height]);\n        this.node.set(PDFName.ArtBox, artBox);\n    };\n    /**\n     * Get this page's width and height. For example:\n     * ```js\n     * const { width, height } = page.getSize()\n     * ```\n     *\n     * This method uses [[PDFPage.getMediaBox]] to obtain the page's\n     * width and height.\n     *\n     * @returns The width and height of the page.\n     */\n    PDFPage.prototype.getSize = function () {\n        var _a = this.getMediaBox(), width = _a.width, height = _a.height;\n        return { width: width, height: height };\n    };\n    /**\n     * Get this page's width. For example:\n     * ```js\n     * const width = page.getWidth()\n     * ```\n     *\n     * This method uses [[PDFPage.getSize]] to obtain the page's size.\n     *\n     * @returns The width of the page.\n     */\n    PDFPage.prototype.getWidth = function () {\n        return this.getSize().width;\n    };\n    /**\n     * Get this page's height. For example:\n     * ```js\n     * const height = page.getHeight()\n     * ```\n     *\n     * This method uses [[PDFPage.getSize]] to obtain the page's size.\n     *\n     * @returns The height of the page.\n     */\n    PDFPage.prototype.getHeight = function () {\n        return this.getSize().height;\n    };\n    /**\n     * Get the rectangle defining this page's MediaBox. For example:\n     * ```js\n     * const { x, y, width, height } = page.getMediaBox()\n     * ```\n     *\n     * The MediaBox of a page defines the boundaries of the physical medium on\n     * which the page is to be displayed/printed. It may include extended area\n     * surrounding the page content for bleed marks, printing marks, etc...\n     * It may also include areas close to the edges of the medium that cannot be\n     * marked because of physical limitations of the output device. Content\n     * falling outside this boundary may safely be discarded without affecting\n     * the meaning of the PDF file.\n     *\n     * @returns An object defining the lower left corner of the MediaBox and its\n     *          width & height.\n     */\n    PDFPage.prototype.getMediaBox = function () {\n        var mediaBox = this.node.MediaBox();\n        return mediaBox.asRectangle();\n    };\n    /**\n     * Get the rectangle defining this page's CropBox. For example:\n     * ```js\n     * const { x, y, width, height } = page.getCropBox()\n     * ```\n     *\n     * The CropBox of a page defines the region to which the contents of the page\n     * shall be clipped when displayed or printed. Unlike the other boxes, the\n     * CropBox does not necessarily represent the physical page geometry. It\n     * merely imposes clipping on the page contents.\n     *\n     * The CropBox's default value is the page's MediaBox.\n     *\n     * @returns An object defining the lower left corner of the CropBox and its\n     *          width & height.\n     */\n    PDFPage.prototype.getCropBox = function () {\n        var _a;\n        var cropBox = this.node.CropBox();\n        return (_a = cropBox === null || cropBox === void 0 ? void 0 : cropBox.asRectangle()) !== null && _a !== void 0 ? _a : this.getMediaBox();\n    };\n    /**\n     * Get the rectangle defining this page's BleedBox. For example:\n     * ```js\n     * const { x, y, width, height } = page.getBleedBox()\n     * ```\n     *\n     * The BleedBox of a page defines the region to which the contents of the\n     * page shall be clipped when output in a production environment. This may\n     * include any extra bleed area needed to accommodate the physical\n     * limitations of cutting, folding, and trimming equipment. The actual\n     * printed page may include printing marks that fall outside the BleedBox.\n     *\n     * The BleedBox's default value is the page's CropBox.\n     *\n     * @returns An object defining the lower left corner of the BleedBox and its\n     *          width & height.\n     */\n    PDFPage.prototype.getBleedBox = function () {\n        var _a;\n        var bleedBox = this.node.BleedBox();\n        return (_a = bleedBox === null || bleedBox === void 0 ? void 0 : bleedBox.asRectangle()) !== null && _a !== void 0 ? _a : this.getCropBox();\n    };\n    /**\n     * Get the rectangle defining this page's TrimBox. For example:\n     * ```js\n     * const { x, y, width, height } = page.getTrimBox()\n     * ```\n     *\n     * The TrimBox of a page defines the intended dimensions of the finished\n     * page after trimming. It may be smaller than the MediaBox to allow for\n     * production-related content, such as printing instructions, cut marks, or\n     * color bars.\n     *\n     * The TrimBox's default value is the page's CropBox.\n     *\n     * @returns An object defining the lower left corner of the TrimBox and its\n     *          width & height.\n     */\n    PDFPage.prototype.getTrimBox = function () {\n        var _a;\n        var trimBox = this.node.TrimBox();\n        return (_a = trimBox === null || trimBox === void 0 ? void 0 : trimBox.asRectangle()) !== null && _a !== void 0 ? _a : this.getCropBox();\n    };\n    /**\n     * Get the rectangle defining this page's ArtBox. For example:\n     * ```js\n     * const { x, y, width, height } = page.getArtBox()\n     * ```\n     *\n     * The ArtBox of a page defines the extent of the page's meaningful content\n     * (including potential white space).\n     *\n     * The ArtBox's default value is the page's CropBox.\n     *\n     * @returns An object defining the lower left corner of the ArtBox and its\n     *          width & height.\n     */\n    PDFPage.prototype.getArtBox = function () {\n        var _a;\n        var artBox = this.node.ArtBox();\n        return (_a = artBox === null || artBox === void 0 ? void 0 : artBox.asRectangle()) !== null && _a !== void 0 ? _a : this.getCropBox();\n    };\n    /**\n     * Translate this page's content to a new location on the page. This operation\n     * is often useful after resizing the page with [[setSize]]. For example:\n     * ```js\n     * // Add 50 units of whitespace to the top and right of the page\n     * page.setSize(page.getWidth() + 50, page.getHeight() + 50)\n     *\n     * // Move the page's content from the lower-left corner of the page\n     * // to the top-right corner.\n     * page.translateContent(50, 50)\n     *\n     * // Now there are 50 units of whitespace to the left and bottom of the page\n     * ```\n     * See also: [[resetPosition]]\n     * @param x The new position on the x-axis for this page's content.\n     * @param y The new position on the y-axis for this page's content.\n     */\n    PDFPage.prototype.translateContent = function (x, y) {\n        assertIs(x, 'x', ['number']);\n        assertIs(y, 'y', ['number']);\n        this.node.normalize();\n        this.getContentStream();\n        var start = this.createContentStream(pushGraphicsState(), translate(x, y));\n        var startRef = this.doc.context.register(start);\n        var end = this.createContentStream(popGraphicsState());\n        var endRef = this.doc.context.register(end);\n        this.node.wrapContentStreams(startRef, endRef);\n    };\n    /**\n     * Scale the size, content, and annotations of a page.\n     *\n     * For example:\n     * ```js\n     * page.scale(0.5, 0.5);\n     * ```\n     *\n     * @param x The factor by which the width for the page should be scaled\n     *          (e.g. `0.5` is 50%).\n     * @param y The factor by which the height for the page should be scaled\n     *          (e.g. `2.0` is 200%).\n     */\n    PDFPage.prototype.scale = function (x, y) {\n        assertIs(x, 'x', ['number']);\n        assertIs(y, 'y', ['number']);\n        this.setSize(this.getWidth() * x, this.getHeight() * y);\n        this.scaleContent(x, y);\n        this.scaleAnnotations(x, y);\n    };\n    /**\n     * Scale the content of a page. This is useful after resizing an existing\n     * page. This scales only the content, not the annotations.\n     *\n     * For example:\n     * ```js\n     * // Bisect the size of the page\n     * page.setSize(page.getWidth() / 2, page.getHeight() / 2);\n     *\n     * // Scale the content of the page down by 50% in x and y\n     * page.scaleContent(0.5, 0.5);\n     * ```\n     * See also: [[scaleAnnotations]]\n     * @param x The factor by which the x-axis for the content should be scaled\n     *          (e.g. `0.5` is 50%).\n     * @param y The factor by which the y-axis for the content should be scaled\n     *          (e.g. `2.0` is 200%).\n     */\n    PDFPage.prototype.scaleContent = function (x, y) {\n        assertIs(x, 'x', ['number']);\n        assertIs(y, 'y', ['number']);\n        this.node.normalize();\n        this.getContentStream();\n        var start = this.createContentStream(pushGraphicsState(), scale(x, y));\n        var startRef = this.doc.context.register(start);\n        var end = this.createContentStream(popGraphicsState());\n        var endRef = this.doc.context.register(end);\n        this.node.wrapContentStreams(startRef, endRef);\n    };\n    /**\n     * Scale the annotations of a page. This is useful if you want to scale a\n     * page with comments or other annotations.\n     * ```js\n     * // Scale the content of the page down by 50% in x and y\n     * page.scaleContent(0.5, 0.5);\n     *\n     * // Scale the content of the page down by 50% in x and y\n     * page.scaleAnnotations(0.5, 0.5);\n     * ```\n     * See also: [[scaleContent]]\n     * @param x The factor by which the x-axis for the annotations should be\n     *          scaled (e.g. `0.5` is 50%).\n     * @param y The factor by which the y-axis for the annotations should be\n     *          scaled (e.g. `2.0` is 200%).\n     */\n    PDFPage.prototype.scaleAnnotations = function (x, y) {\n        assertIs(x, 'x', ['number']);\n        assertIs(y, 'y', ['number']);\n        var annots = this.node.Annots();\n        if (!annots)\n            return;\n        for (var idx = 0; idx < annots.size(); idx++) {\n            var annot = annots.lookup(idx);\n            if (annot instanceof PDFDict)\n                this.scaleAnnot(annot, x, y);\n        }\n    };\n    /**\n     * Reset the x and y coordinates of this page to `(0, 0)`. This operation is\n     * often useful after calling [[translateContent]]. For example:\n     * ```js\n     * // Shift the page's contents up and to the right by 50 units\n     * page.translateContent(50, 50)\n     *\n     * // This text will shifted - it will be drawn at (50, 50)\n     * page.drawText('I am shifted')\n     *\n     * // Move back to (0, 0)\n     * page.resetPosition()\n     *\n     * // This text will not be shifted - it will be drawn at (0, 0)\n     * page.drawText('I am not shifted')\n     * ```\n     */\n    PDFPage.prototype.resetPosition = function () {\n        this.getContentStream(false);\n        this.x = 0;\n        this.y = 0;\n    };\n    /**\n     * Choose a default font for this page. The default font will be used whenever\n     * text is drawn on this page and no font is specified. For example:\n     * ```js\n     * import { StandardFonts } from 'pdf-lib'\n     *\n     * const timesRomanFont = await pdfDoc.embedFont(StandardFonts.TimesRoman)\n     * const helveticaFont = await pdfDoc.embedFont(StandardFonts.Helvetica)\n     * const courierFont = await pdfDoc.embedFont(StandardFonts.Courier)\n     *\n     * const page = pdfDoc.addPage()\n     *\n     * page.setFont(helveticaFont)\n     * page.drawText('I will be drawn in Helvetica')\n     *\n     * page.setFont(timesRomanFont)\n     * page.drawText('I will be drawn in Courier', { font: courierFont })\n     * ```\n     * @param font The default font to be used when drawing text on this page.\n     */\n    PDFPage.prototype.setFont = function (font) {\n        // TODO: Reuse image Font name if we've already added this image to Resources.Fonts\n        assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n        this.font = font;\n        this.fontKey = this.node.newFontDictionary(this.font.name, this.font.ref);\n    };\n    /**\n     * Choose a default font size for this page. The default font size will be\n     * used whenever text is drawn on this page and no font size is specified.\n     * For example:\n     * ```js\n     * page.setFontSize(12)\n     * page.drawText('I will be drawn in size 12')\n     *\n     * page.setFontSize(36)\n     * page.drawText('I will be drawn in size 24', { fontSize: 24 })\n     * ```\n     * @param fontSize The default font size to be used when drawing text on this\n     *                 page.\n     */\n    PDFPage.prototype.setFontSize = function (fontSize) {\n        assertIs(fontSize, 'fontSize', ['number']);\n        this.fontSize = fontSize;\n    };\n    /**\n     * Choose a default font color for this page. The default font color will be\n     * used whenever text is drawn on this page and no font color is specified.\n     * For example:\n     * ```js\n     * import { rgb, cmyk, grayscale } from 'pdf-lib'\n     *\n     * page.setFontColor(rgb(0.97, 0.02, 0.97))\n     * page.drawText('I will be drawn in pink')\n     *\n     * page.setFontColor(cmyk(0.4, 0.7, 0.39, 0.15))\n     * page.drawText('I will be drawn in gray', { color: grayscale(0.5) })\n     * ```\n     * @param fontColor The default font color to be used when drawing text on\n     *                  this page.\n     */\n    PDFPage.prototype.setFontColor = function (fontColor) {\n        assertIs(fontColor, 'fontColor', [[Object, 'Color']]);\n        this.fontColor = fontColor;\n    };\n    /**\n     * Choose a default line height for this page. The default line height will be\n     * used whenever text is drawn on this page and no line height is specified.\n     * For example:\n     * ```js\n     * page.setLineHeight(12);\n     * page.drawText('These lines will be vertically \\n separated by 12 units')\n     *\n     * page.setLineHeight(36);\n     * page.drawText('These lines will be vertically \\n separated by 24 units', {\n     *   lineHeight: 24\n     * })\n     * ```\n     * @param lineHeight The default line height to be used when drawing text on\n     *                   this page.\n     */\n    PDFPage.prototype.setLineHeight = function (lineHeight) {\n        assertIs(lineHeight, 'lineHeight', ['number']);\n        this.lineHeight = lineHeight;\n    };\n    /**\n     * Get the default position of this page. For example:\n     * ```js\n     * const { x, y } = page.getPosition()\n     * ```\n     * @returns The default position of the page.\n     */\n    PDFPage.prototype.getPosition = function () {\n        return { x: this.x, y: this.y };\n    };\n    /**\n     * Get the default x coordinate of this page. For example:\n     * ```js\n     * const x = page.getX()\n     * ```\n     * @returns The default x coordinate of the page.\n     */\n    PDFPage.prototype.getX = function () {\n        return this.x;\n    };\n    /**\n     * Get the default y coordinate of this page. For example:\n     * ```js\n     * const y = page.getY()\n     * ```\n     * @returns The default y coordinate of the page.\n     */\n    PDFPage.prototype.getY = function () {\n        return this.y;\n    };\n    /**\n     * Change the default position of this page. For example:\n     * ```js\n     * page.moveTo(0, 0)\n     * page.drawText('I will be drawn at the origin')\n     *\n     * page.moveTo(0, 25)\n     * page.drawText('I will be drawn 25 units up')\n     *\n     * page.moveTo(25, 25)\n     * page.drawText('I will be drawn 25 units up and 25 units to the right')\n     * ```\n     * @param x The new default position on the x-axis for this page.\n     * @param y The new default position on the y-axis for this page.\n     */\n    PDFPage.prototype.moveTo = function (x, y) {\n        assertIs(x, 'x', ['number']);\n        assertIs(y, 'y', ['number']);\n        this.x = x;\n        this.y = y;\n    };\n    /**\n     * Change the default position of this page to be further down the y-axis.\n     * For example:\n     * ```js\n     * page.moveTo(50, 50)\n     * page.drawText('I will be drawn at (50, 50)')\n     *\n     * page.moveDown(10)\n     * page.drawText('I will be drawn at (50, 40)')\n     * ```\n     * @param yDecrease The amount by which the page's default position along the\n     *                  y-axis should be decreased.\n     */\n    PDFPage.prototype.moveDown = function (yDecrease) {\n        assertIs(yDecrease, 'yDecrease', ['number']);\n        this.y -= yDecrease;\n    };\n    /**\n     * Change the default position of this page to be further up the y-axis.\n     * For example:\n     * ```js\n     * page.moveTo(50, 50)\n     * page.drawText('I will be drawn at (50, 50)')\n     *\n     * page.moveUp(10)\n     * page.drawText('I will be drawn at (50, 60)')\n     * ```\n     * @param yIncrease The amount by which the page's default position along the\n     *                  y-axis should be increased.\n     */\n    PDFPage.prototype.moveUp = function (yIncrease) {\n        assertIs(yIncrease, 'yIncrease', ['number']);\n        this.y += yIncrease;\n    };\n    /**\n     * Change the default position of this page to be further left on the x-axis.\n     * For example:\n     * ```js\n     * page.moveTo(50, 50)\n     * page.drawText('I will be drawn at (50, 50)')\n     *\n     * page.moveLeft(10)\n     * page.drawText('I will be drawn at (40, 50)')\n     * ```\n     * @param xDecrease The amount by which the page's default position along the\n     *                  x-axis should be decreased.\n     */\n    PDFPage.prototype.moveLeft = function (xDecrease) {\n        assertIs(xDecrease, 'xDecrease', ['number']);\n        this.x -= xDecrease;\n    };\n    /**\n     * Change the default position of this page to be further right on the y-axis.\n     * For example:\n     * ```js\n     * page.moveTo(50, 50)\n     * page.drawText('I will be drawn at (50, 50)')\n     *\n     * page.moveRight(10)\n     * page.drawText('I will be drawn at (60, 50)')\n     * ```\n     * @param xIncrease The amount by which the page's default position along the\n     *                  x-axis should be increased.\n     */\n    PDFPage.prototype.moveRight = function (xIncrease) {\n        assertIs(xIncrease, 'xIncrease', ['number']);\n        this.x += xIncrease;\n    };\n    /**\n     * Push one or more operators to the end of this page's current content\n     * stream. For example:\n     * ```js\n     * import {\n     *   pushGraphicsState,\n     *   moveTo,\n     *   lineTo,\n     *   closePath,\n     *   setFillingColor,\n     *   rgb,\n     *   fill,\n     *   popGraphicsState,\n     * } from 'pdf-lib'\n     *\n     * // Draw a green triangle in the lower-left corner of the page\n     * page.pushOperators(\n     *   pushGraphicsState(),\n     *   moveTo(0, 0),\n     *   lineTo(100, 0),\n     *   lineTo(50, 100),\n     *   closePath(),\n     *   setFillingColor(rgb(0.0, 1.0, 0.0)),\n     *   fill(),\n     *   popGraphicsState(),\n     * )\n     * ```\n     * @param operator The operators to be pushed.\n     */\n    PDFPage.prototype.pushOperators = function () {\n        var operator = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operator[_i] = arguments[_i];\n        }\n        assertEachIs(operator, 'operator', [[PDFOperator, 'PDFOperator']]);\n        var contentStream = this.getContentStream();\n        contentStream.push.apply(contentStream, operator);\n    };\n    /**\n     * Draw one or more lines of text on this page. For example:\n     * ```js\n     * import { StandardFonts, rgb } from 'pdf-lib'\n     *\n     * const helveticaFont = await pdfDoc.embedFont(StandardFonts.Helvetica)\n     * const timesRomanFont = await pdfDoc.embedFont(StandardFonts.TimesRoman)\n     *\n     * const page = pdfDoc.addPage()\n     *\n     * page.setFont(helveticaFont)\n     *\n     * page.moveTo(5, 200)\n     * page.drawText('The Life of an Egg', { size: 36 })\n     *\n     * page.moveDown(36)\n     * page.drawText('An Epic Tale of Woe', { size: 30 })\n     *\n     * page.drawText(\n     *   `Humpty Dumpty sat on a wall \\n` +\n     *   `Humpty Dumpty had a great fall; \\n` +\n     *   `All the king's horses and all the king's men \\n` +\n     *   `Couldn't put Humpty together again. \\n`,\n     *   {\n     *     x: 25,\n     *     y: 100,\n     *     font: timesRomanFont,\n     *     size: 24,\n     *     color: rgb(1, 0, 0),\n     *     lineHeight: 24,\n     *     opacity: 0.75,\n     *   },\n     * )\n     * ```\n     * @param text The text to be drawn.\n     * @param options The options to be used when drawing the text.\n     */\n    PDFPage.prototype.drawText = function (text, options) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        if (options === void 0) { options = {}; }\n        assertIs(text, 'text', ['string']);\n        assertOrUndefined(options.color, 'options.color', [[Object, 'Color']]);\n        assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n        assertOrUndefined(options.font, 'options.font', [[PDFFont, 'PDFFont']]);\n        assertOrUndefined(options.size, 'options.size', ['number']);\n        assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n        assertOrUndefined(options.xSkew, 'options.xSkew', [[Object, 'Rotation']]);\n        assertOrUndefined(options.ySkew, 'options.ySkew', [[Object, 'Rotation']]);\n        assertOrUndefined(options.x, 'options.x', ['number']);\n        assertOrUndefined(options.y, 'options.y', ['number']);\n        assertOrUndefined(options.lineHeight, 'options.lineHeight', ['number']);\n        assertOrUndefined(options.maxWidth, 'options.maxWidth', ['number']);\n        assertOrUndefined(options.wordBreaks, 'options.wordBreaks', [Array]);\n        assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\n        var _h = this.setOrEmbedFont(options.font), oldFont = _h.oldFont, newFont = _h.newFont, newFontKey = _h.newFontKey;\n        var fontSize = options.size || this.fontSize;\n        var wordBreaks = options.wordBreaks || this.doc.defaultWordBreaks;\n        var textWidth = function (t) { return newFont.widthOfTextAtSize(t, fontSize); };\n        var lines = options.maxWidth === undefined\n            ? lineSplit(cleanText(text))\n            : breakTextIntoLines(text, wordBreaks, options.maxWidth, textWidth);\n        var encodedLines = new Array(lines.length);\n        for (var idx = 0, len = lines.length; idx < len; idx++) {\n            encodedLines[idx] = newFont.encodeText(lines[idx]);\n        }\n        var graphicsStateKey = this.maybeEmbedGraphicsState({\n            opacity: options.opacity,\n            blendMode: options.blendMode,\n        });\n        var contentStream = this.getContentStream();\n        contentStream.push.apply(contentStream, drawLinesOfText(encodedLines, {\n            color: (_a = options.color) !== null && _a !== void 0 ? _a : this.fontColor,\n            font: newFontKey,\n            size: fontSize,\n            rotate: (_b = options.rotate) !== null && _b !== void 0 ? _b : degrees(0),\n            xSkew: (_c = options.xSkew) !== null && _c !== void 0 ? _c : degrees(0),\n            ySkew: (_d = options.ySkew) !== null && _d !== void 0 ? _d : degrees(0),\n            x: (_e = options.x) !== null && _e !== void 0 ? _e : this.x,\n            y: (_f = options.y) !== null && _f !== void 0 ? _f : this.y,\n            lineHeight: (_g = options.lineHeight) !== null && _g !== void 0 ? _g : this.lineHeight,\n            graphicsState: graphicsStateKey,\n        }));\n        if (options.font) {\n            if (oldFont)\n                this.setFont(oldFont);\n            else\n                this.resetFont();\n        }\n    };\n    /**\n     * Draw an image on this page. For example:\n     * ```js\n     * import { degrees } from 'pdf-lib'\n     *\n     * const jpgUrl = 'https://pdf-lib.js.org/assets/cat_riding_unicorn.jpg'\n     * const jpgImageBytes = await fetch(jpgUrl).then((res) => res.arrayBuffer())\n     *\n     * const jpgImage = await pdfDoc.embedJpg(jpgImageBytes)\n     * const jpgDims = jpgImage.scale(0.5)\n     *\n     * const page = pdfDoc.addPage()\n     *\n     * page.drawImage(jpgImage, {\n     *   x: 25,\n     *   y: 25,\n     *   width: jpgDims.width,\n     *   height: jpgDims.height,\n     *   rotate: degrees(30),\n     *   opacity: 0.75,\n     * })\n     * ```\n     * @param image The image to be drawn.\n     * @param options The options to be used when drawing the image.\n     */\n    PDFPage.prototype.drawImage = function (image, options) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        if (options === void 0) { options = {}; }\n        // TODO: Reuse image XObject name if we've already added this image to Resources.XObjects\n        assertIs(image, 'image', [[PDFImage, 'PDFImage']]);\n        assertOrUndefined(options.x, 'options.x', ['number']);\n        assertOrUndefined(options.y, 'options.y', ['number']);\n        assertOrUndefined(options.width, 'options.width', ['number']);\n        assertOrUndefined(options.height, 'options.height', ['number']);\n        assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n        assertOrUndefined(options.xSkew, 'options.xSkew', [[Object, 'Rotation']]);\n        assertOrUndefined(options.ySkew, 'options.ySkew', [[Object, 'Rotation']]);\n        assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n        assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\n        var xObjectKey = this.node.newXObject('Image', image.ref);\n        var graphicsStateKey = this.maybeEmbedGraphicsState({\n            opacity: options.opacity,\n            blendMode: options.blendMode,\n        });\n        var contentStream = this.getContentStream();\n        contentStream.push.apply(contentStream, drawImage(xObjectKey, {\n            x: (_a = options.x) !== null && _a !== void 0 ? _a : this.x,\n            y: (_b = options.y) !== null && _b !== void 0 ? _b : this.y,\n            width: (_c = options.width) !== null && _c !== void 0 ? _c : image.size().width,\n            height: (_d = options.height) !== null && _d !== void 0 ? _d : image.size().height,\n            rotate: (_e = options.rotate) !== null && _e !== void 0 ? _e : degrees(0),\n            xSkew: (_f = options.xSkew) !== null && _f !== void 0 ? _f : degrees(0),\n            ySkew: (_g = options.ySkew) !== null && _g !== void 0 ? _g : degrees(0),\n            graphicsState: graphicsStateKey,\n        }));\n    };\n    /**\n     * Draw an embedded PDF page on this page. For example:\n     * ```js\n     * import { degrees } from 'pdf-lib'\n     *\n     * const pdfDoc = await PDFDocument.create()\n     * const page = pdfDoc.addPage()\n     *\n     * const sourcePdfUrl = 'https://pdf-lib.js.org/assets/with_large_page_count.pdf'\n     * const sourcePdf = await fetch(sourcePdfUrl).then((res) => res.arrayBuffer())\n     *\n     * // Embed page 74 from the PDF\n     * const [embeddedPage] = await pdfDoc.embedPdf(sourcePdf, 73)\n     *\n     * page.drawPage(embeddedPage, {\n     *   x: 250,\n     *   y: 200,\n     *   xScale: 0.5,\n     *   yScale: 0.5,\n     *   rotate: degrees(30),\n     *   opacity: 0.75,\n     * })\n     * ```\n     *\n     * The `options` argument accepts both `width`/`height` and `xScale`/`yScale`\n     * as options. Since each of these options defines the size of the drawn page,\n     * if both options are given, `width` and `height` take precedence and the\n     * corresponding scale variants are ignored.\n     *\n     * @param embeddedPage The embedded page to be drawn.\n     * @param options The options to be used when drawing the embedded page.\n     */\n    PDFPage.prototype.drawPage = function (embeddedPage, options) {\n        var _a, _b, _c, _d, _e;\n        if (options === void 0) { options = {}; }\n        // TODO: Reuse embeddedPage XObject name if we've already added this embeddedPage to Resources.XObjects\n        assertIs(embeddedPage, 'embeddedPage', [\n            [PDFEmbeddedPage, 'PDFEmbeddedPage'],\n        ]);\n        assertOrUndefined(options.x, 'options.x', ['number']);\n        assertOrUndefined(options.y, 'options.y', ['number']);\n        assertOrUndefined(options.xScale, 'options.xScale', ['number']);\n        assertOrUndefined(options.yScale, 'options.yScale', ['number']);\n        assertOrUndefined(options.width, 'options.width', ['number']);\n        assertOrUndefined(options.height, 'options.height', ['number']);\n        assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n        assertOrUndefined(options.xSkew, 'options.xSkew', [[Object, 'Rotation']]);\n        assertOrUndefined(options.ySkew, 'options.ySkew', [[Object, 'Rotation']]);\n        assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n        assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\n        var xObjectKey = this.node.newXObject('EmbeddedPdfPage', embeddedPage.ref);\n        var graphicsStateKey = this.maybeEmbedGraphicsState({\n            opacity: options.opacity,\n            blendMode: options.blendMode,\n        });\n        // prettier-ignore\n        var xScale = (options.width !== undefined ? options.width / embeddedPage.width\n            : options.xScale !== undefined ? options.xScale\n                : 1);\n        // prettier-ignore\n        var yScale = (options.height !== undefined ? options.height / embeddedPage.height\n            : options.yScale !== undefined ? options.yScale\n                : 1);\n        var contentStream = this.getContentStream();\n        contentStream.push.apply(contentStream, drawPage(xObjectKey, {\n            x: (_a = options.x) !== null && _a !== void 0 ? _a : this.x,\n            y: (_b = options.y) !== null && _b !== void 0 ? _b : this.y,\n            xScale: xScale,\n            yScale: yScale,\n            rotate: (_c = options.rotate) !== null && _c !== void 0 ? _c : degrees(0),\n            xSkew: (_d = options.xSkew) !== null && _d !== void 0 ? _d : degrees(0),\n            ySkew: (_e = options.ySkew) !== null && _e !== void 0 ? _e : degrees(0),\n            graphicsState: graphicsStateKey,\n        }));\n    };\n    /**\n     * Draw an SVG path on this page. For example:\n     * ```js\n     * import { rgb } from 'pdf-lib'\n     *\n     * const svgPath = 'M 0,20 L 100,160 Q 130,200 150,120 C 190,-40 200,200 300,150 L 400,90'\n     *\n     * // Draw path as black line\n     * page.drawSvgPath(svgPath, { x: 25, y: 75 })\n     *\n     * // Change border style and opacity\n     * page.drawSvgPath(svgPath, {\n     *   x: 25,\n     *   y: 275,\n     *   borderColor: rgb(0.5, 0.5, 0.5),\n     *   borderWidth: 2,\n     *   borderOpacity: 0.75,\n     * })\n     *\n     * // Set fill color and opacity\n     * page.drawSvgPath(svgPath, {\n     *   x: 25,\n     *   y: 475,\n     *   color: rgb(1.0, 0, 0),\n     *   opacity: 0.75,\n     * })\n     *\n     * // Draw 50% of original size\n     * page.drawSvgPath(svgPath, {\n     *   x: 25,\n     *   y: 675,\n     *   scale: 0.5,\n     * })\n     * ```\n     * @param path The SVG path to be drawn.\n     * @param options The options to be used when drawing the SVG path.\n     */\n    PDFPage.prototype.drawSvgPath = function (path, options) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        if (options === void 0) { options = {}; }\n        assertIs(path, 'path', ['string']);\n        assertOrUndefined(options.x, 'options.x', ['number']);\n        assertOrUndefined(options.y, 'options.y', ['number']);\n        assertOrUndefined(options.scale, 'options.scale', ['number']);\n        assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n        assertOrUndefined(options.borderWidth, 'options.borderWidth', ['number']);\n        assertOrUndefined(options.color, 'options.color', [[Object, 'Color']]);\n        assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n        assertOrUndefined(options.borderColor, 'options.borderColor', [\n            [Object, 'Color'],\n        ]);\n        assertOrUndefined(options.borderDashArray, 'options.borderDashArray', [\n            Array,\n        ]);\n        assertOrUndefined(options.borderDashPhase, 'options.borderDashPhase', [\n            'number',\n        ]);\n        assertIsOneOfOrUndefined(options.borderLineCap, 'options.borderLineCap', LineCapStyle);\n        assertRangeOrUndefined(options.borderOpacity, 'options.borderOpacity', 0, 1);\n        assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\n        var graphicsStateKey = this.maybeEmbedGraphicsState({\n            opacity: options.opacity,\n            borderOpacity: options.borderOpacity,\n            blendMode: options.blendMode,\n        });\n        if (!('color' in options) && !('borderColor' in options)) {\n            options.borderColor = rgb(0, 0, 0);\n        }\n        var contentStream = this.getContentStream();\n        contentStream.push.apply(contentStream, drawSvgPath(path, {\n            x: (_a = options.x) !== null && _a !== void 0 ? _a : this.x,\n            y: (_b = options.y) !== null && _b !== void 0 ? _b : this.y,\n            scale: options.scale,\n            rotate: (_c = options.rotate) !== null && _c !== void 0 ? _c : degrees(0),\n            color: (_d = options.color) !== null && _d !== void 0 ? _d : undefined,\n            borderColor: (_e = options.borderColor) !== null && _e !== void 0 ? _e : undefined,\n            borderWidth: (_f = options.borderWidth) !== null && _f !== void 0 ? _f : 0,\n            borderDashArray: (_g = options.borderDashArray) !== null && _g !== void 0 ? _g : undefined,\n            borderDashPhase: (_h = options.borderDashPhase) !== null && _h !== void 0 ? _h : undefined,\n            borderLineCap: (_j = options.borderLineCap) !== null && _j !== void 0 ? _j : undefined,\n            graphicsState: graphicsStateKey,\n        }));\n    };\n    /**\n     * Draw a line on this page. For example:\n     * ```js\n     * import { rgb } from 'pdf-lib'\n     *\n     * page.drawLine({\n     *   start: { x: 25, y: 75 },\n     *   end: { x: 125, y: 175 },\n     *   thickness: 2,\n     *   color: rgb(0.75, 0.2, 0.2),\n     *   opacity: 0.75,\n     * })\n     * ```\n     * @param options The options to be used when drawing the line.\n     */\n    PDFPage.prototype.drawLine = function (options) {\n        var _a, _b, _c, _d, _e;\n        assertIs(options.start, 'options.start', [\n            [Object, '{ x: number, y: number }'],\n        ]);\n        assertIs(options.end, 'options.end', [\n            [Object, '{ x: number, y: number }'],\n        ]);\n        assertIs(options.start.x, 'options.start.x', ['number']);\n        assertIs(options.start.y, 'options.start.y', ['number']);\n        assertIs(options.end.x, 'options.end.x', ['number']);\n        assertIs(options.end.y, 'options.end.y', ['number']);\n        assertOrUndefined(options.thickness, 'options.thickness', ['number']);\n        assertOrUndefined(options.color, 'options.color', [[Object, 'Color']]);\n        assertOrUndefined(options.dashArray, 'options.dashArray', [Array]);\n        assertOrUndefined(options.dashPhase, 'options.dashPhase', ['number']);\n        assertIsOneOfOrUndefined(options.lineCap, 'options.lineCap', LineCapStyle);\n        assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n        assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\n        var graphicsStateKey = this.maybeEmbedGraphicsState({\n            borderOpacity: options.opacity,\n            blendMode: options.blendMode,\n        });\n        if (!('color' in options)) {\n            options.color = rgb(0, 0, 0);\n        }\n        var contentStream = this.getContentStream();\n        contentStream.push.apply(contentStream, drawLine({\n            start: options.start,\n            end: options.end,\n            thickness: (_a = options.thickness) !== null && _a !== void 0 ? _a : 1,\n            color: (_b = options.color) !== null && _b !== void 0 ? _b : undefined,\n            dashArray: (_c = options.dashArray) !== null && _c !== void 0 ? _c : undefined,\n            dashPhase: (_d = options.dashPhase) !== null && _d !== void 0 ? _d : undefined,\n            lineCap: (_e = options.lineCap) !== null && _e !== void 0 ? _e : undefined,\n            graphicsState: graphicsStateKey,\n        }));\n    };\n    /**\n     * Draw a rectangle on this page. For example:\n     * ```js\n     * import { degrees, grayscale, rgb } from 'pdf-lib'\n     *\n     * page.drawRectangle({\n     *   x: 25,\n     *   y: 75,\n     *   width: 250,\n     *   height: 75,\n     *   rotate: degrees(-15),\n     *   borderWidth: 5,\n     *   borderColor: grayscale(0.5),\n     *   color: rgb(0.75, 0.2, 0.2),\n     *   opacity: 0.5,\n     *   borderOpacity: 0.75,\n     * })\n     * ```\n     * @param options The options to be used when drawing the rectangle.\n     */\n    PDFPage.prototype.drawRectangle = function (options) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;\n        if (options === void 0) { options = {}; }\n        assertOrUndefined(options.x, 'options.x', ['number']);\n        assertOrUndefined(options.y, 'options.y', ['number']);\n        assertOrUndefined(options.width, 'options.width', ['number']);\n        assertOrUndefined(options.height, 'options.height', ['number']);\n        assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n        assertOrUndefined(options.xSkew, 'options.xSkew', [[Object, 'Rotation']]);\n        assertOrUndefined(options.ySkew, 'options.ySkew', [[Object, 'Rotation']]);\n        assertOrUndefined(options.borderWidth, 'options.borderWidth', ['number']);\n        assertOrUndefined(options.color, 'options.color', [[Object, 'Color']]);\n        assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n        assertOrUndefined(options.borderColor, 'options.borderColor', [\n            [Object, 'Color'],\n        ]);\n        assertOrUndefined(options.borderDashArray, 'options.borderDashArray', [\n            Array,\n        ]);\n        assertOrUndefined(options.borderDashPhase, 'options.borderDashPhase', [\n            'number',\n        ]);\n        assertIsOneOfOrUndefined(options.borderLineCap, 'options.borderLineCap', LineCapStyle);\n        assertRangeOrUndefined(options.borderOpacity, 'options.borderOpacity', 0, 1);\n        assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\n        var graphicsStateKey = this.maybeEmbedGraphicsState({\n            opacity: options.opacity,\n            borderOpacity: options.borderOpacity,\n            blendMode: options.blendMode,\n        });\n        if (!('color' in options) && !('borderColor' in options)) {\n            options.color = rgb(0, 0, 0);\n        }\n        var contentStream = this.getContentStream();\n        contentStream.push.apply(contentStream, drawRectangle({\n            x: (_a = options.x) !== null && _a !== void 0 ? _a : this.x,\n            y: (_b = options.y) !== null && _b !== void 0 ? _b : this.y,\n            width: (_c = options.width) !== null && _c !== void 0 ? _c : 150,\n            height: (_d = options.height) !== null && _d !== void 0 ? _d : 100,\n            rotate: (_e = options.rotate) !== null && _e !== void 0 ? _e : degrees(0),\n            xSkew: (_f = options.xSkew) !== null && _f !== void 0 ? _f : degrees(0),\n            ySkew: (_g = options.ySkew) !== null && _g !== void 0 ? _g : degrees(0),\n            borderWidth: (_h = options.borderWidth) !== null && _h !== void 0 ? _h : 0,\n            color: (_j = options.color) !== null && _j !== void 0 ? _j : undefined,\n            borderColor: (_k = options.borderColor) !== null && _k !== void 0 ? _k : undefined,\n            borderDashArray: (_l = options.borderDashArray) !== null && _l !== void 0 ? _l : undefined,\n            borderDashPhase: (_m = options.borderDashPhase) !== null && _m !== void 0 ? _m : undefined,\n            graphicsState: graphicsStateKey,\n            borderLineCap: (_o = options.borderLineCap) !== null && _o !== void 0 ? _o : undefined,\n        }));\n    };\n    /**\n     * Draw a square on this page. For example:\n     * ```js\n     * import { degrees, grayscale, rgb } from 'pdf-lib'\n     *\n     * page.drawSquare({\n     *   x: 25,\n     *   y: 75,\n     *   size: 100,\n     *   rotate: degrees(-15),\n     *   borderWidth: 5,\n     *   borderColor: grayscale(0.5),\n     *   color: rgb(0.75, 0.2, 0.2),\n     *   opacity: 0.5,\n     *   borderOpacity: 0.75,\n     * })\n     * ```\n     * @param options The options to be used when drawing the square.\n     */\n    PDFPage.prototype.drawSquare = function (options) {\n        if (options === void 0) { options = {}; }\n        var size = options.size;\n        assertOrUndefined(size, 'size', ['number']);\n        this.drawRectangle(__assign(__assign({}, options), { width: size, height: size }));\n    };\n    /**\n     * Draw an ellipse on this page. For example:\n     * ```js\n     * import { grayscale, rgb } from 'pdf-lib'\n     *\n     * page.drawEllipse({\n     *   x: 200,\n     *   y: 75,\n     *   xScale: 100,\n     *   yScale: 50,\n     *   borderWidth: 5,\n     *   borderColor: grayscale(0.5),\n     *   color: rgb(0.75, 0.2, 0.2),\n     *   opacity: 0.5,\n     *   borderOpacity: 0.75,\n     * })\n     * ```\n     * @param options The options to be used when drawing the ellipse.\n     */\n    PDFPage.prototype.drawEllipse = function (options) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n        if (options === void 0) { options = {}; }\n        assertOrUndefined(options.x, 'options.x', ['number']);\n        assertOrUndefined(options.y, 'options.y', ['number']);\n        assertOrUndefined(options.xScale, 'options.xScale', ['number']);\n        assertOrUndefined(options.yScale, 'options.yScale', ['number']);\n        assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n        assertOrUndefined(options.color, 'options.color', [[Object, 'Color']]);\n        assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n        assertOrUndefined(options.borderColor, 'options.borderColor', [\n            [Object, 'Color'],\n        ]);\n        assertRangeOrUndefined(options.borderOpacity, 'options.borderOpacity', 0, 1);\n        assertOrUndefined(options.borderWidth, 'options.borderWidth', ['number']);\n        assertOrUndefined(options.borderDashArray, 'options.borderDashArray', [\n            Array,\n        ]);\n        assertOrUndefined(options.borderDashPhase, 'options.borderDashPhase', [\n            'number',\n        ]);\n        assertIsOneOfOrUndefined(options.borderLineCap, 'options.borderLineCap', LineCapStyle);\n        assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\n        var graphicsStateKey = this.maybeEmbedGraphicsState({\n            opacity: options.opacity,\n            borderOpacity: options.borderOpacity,\n            blendMode: options.blendMode,\n        });\n        if (!('color' in options) && !('borderColor' in options)) {\n            options.color = rgb(0, 0, 0);\n        }\n        var contentStream = this.getContentStream();\n        contentStream.push.apply(contentStream, drawEllipse({\n            x: (_a = options.x) !== null && _a !== void 0 ? _a : this.x,\n            y: (_b = options.y) !== null && _b !== void 0 ? _b : this.y,\n            xScale: (_c = options.xScale) !== null && _c !== void 0 ? _c : 100,\n            yScale: (_d = options.yScale) !== null && _d !== void 0 ? _d : 100,\n            rotate: (_e = options.rotate) !== null && _e !== void 0 ? _e : undefined,\n            color: (_f = options.color) !== null && _f !== void 0 ? _f : undefined,\n            borderColor: (_g = options.borderColor) !== null && _g !== void 0 ? _g : undefined,\n            borderWidth: (_h = options.borderWidth) !== null && _h !== void 0 ? _h : 0,\n            borderDashArray: (_j = options.borderDashArray) !== null && _j !== void 0 ? _j : undefined,\n            borderDashPhase: (_k = options.borderDashPhase) !== null && _k !== void 0 ? _k : undefined,\n            borderLineCap: (_l = options.borderLineCap) !== null && _l !== void 0 ? _l : undefined,\n            graphicsState: graphicsStateKey,\n        }));\n    };\n    /**\n     * Draw a circle on this page. For example:\n     * ```js\n     * import { grayscale, rgb } from 'pdf-lib'\n     *\n     * page.drawCircle({\n     *   x: 200,\n     *   y: 150,\n     *   size: 100,\n     *   borderWidth: 5,\n     *   borderColor: grayscale(0.5),\n     *   color: rgb(0.75, 0.2, 0.2),\n     *   opacity: 0.5,\n     *   borderOpacity: 0.75,\n     * })\n     * ```\n     * @param options The options to be used when drawing the ellipse.\n     */\n    PDFPage.prototype.drawCircle = function (options) {\n        if (options === void 0) { options = {}; }\n        var _a = options.size, size = _a === void 0 ? 100 : _a;\n        assertOrUndefined(size, 'size', ['number']);\n        this.drawEllipse(__assign(__assign({}, options), { xScale: size, yScale: size }));\n    };\n    PDFPage.prototype.setOrEmbedFont = function (font) {\n        var oldFont = this.font;\n        var oldFontKey = this.fontKey;\n        if (font)\n            this.setFont(font);\n        else\n            this.getFont();\n        var newFont = this.font;\n        var newFontKey = this.fontKey;\n        return { oldFont: oldFont, oldFontKey: oldFontKey, newFont: newFont, newFontKey: newFontKey };\n    };\n    PDFPage.prototype.getFont = function () {\n        if (!this.font || !this.fontKey) {\n            var font = this.doc.embedStandardFont(StandardFonts.Helvetica);\n            this.setFont(font);\n        }\n        return [this.font, this.fontKey];\n    };\n    PDFPage.prototype.resetFont = function () {\n        this.font = undefined;\n        this.fontKey = undefined;\n    };\n    PDFPage.prototype.getContentStream = function (useExisting) {\n        if (useExisting === void 0) { useExisting = true; }\n        if (useExisting && this.contentStream)\n            return this.contentStream;\n        this.contentStream = this.createContentStream();\n        this.contentStreamRef = this.doc.context.register(this.contentStream);\n        this.node.addContentStream(this.contentStreamRef);\n        return this.contentStream;\n    };\n    PDFPage.prototype.createContentStream = function () {\n        var operators = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operators[_i] = arguments[_i];\n        }\n        var dict = this.doc.context.obj({});\n        var contentStream = PDFContentStream.of(dict, operators);\n        return contentStream;\n    };\n    PDFPage.prototype.maybeEmbedGraphicsState = function (options) {\n        var opacity = options.opacity, borderOpacity = options.borderOpacity, blendMode = options.blendMode;\n        if (opacity === undefined &&\n            borderOpacity === undefined &&\n            blendMode === undefined) {\n            return undefined;\n        }\n        var graphicsState = this.doc.context.obj({\n            Type: 'ExtGState',\n            ca: opacity,\n            CA: borderOpacity,\n            BM: blendMode,\n        });\n        var key = this.node.newExtGState('GS', graphicsState);\n        return key;\n    };\n    PDFPage.prototype.scaleAnnot = function (annot, x, y) {\n        var selectors = ['RD', 'CL', 'Vertices', 'QuadPoints', 'L', 'Rect'];\n        for (var idx = 0, len = selectors.length; idx < len; idx++) {\n            var list = annot.lookup(PDFName.of(selectors[idx]));\n            if (list instanceof PDFArray)\n                list.scalePDFNumbers(x, y);\n        }\n        var inkLists = annot.lookup(PDFName.of('InkList'));\n        if (inkLists instanceof PDFArray) {\n            for (var idx = 0, len = inkLists.size(); idx < len; idx++) {\n                var arr = inkLists.lookup(idx);\n                if (arr instanceof PDFArray)\n                    arr.scalePDFNumbers(x, y);\n            }\n        }\n    };\n    /**\n     * > **NOTE:** You probably don't want to call this method directly. Instead,\n     * > consider using the [[PDFDocument.addPage]] and [[PDFDocument.insertPage]]\n     * > methods, which can create instances of [[PDFPage]] for you.\n     *\n     * Create an instance of [[PDFPage]] from an existing leaf node.\n     *\n     * @param leafNode The leaf node to be wrapped.\n     * @param ref The unique reference for the page.\n     * @param doc The document to which the page will belong.\n     */\n    PDFPage.of = function (leafNode, ref, doc) {\n        return new PDFPage(leafNode, ref, doc);\n    };\n    /**\n     * > **NOTE:** You probably don't want to call this method directly. Instead,\n     * > consider using the [[PDFDocument.addPage]] and [[PDFDocument.insertPage]]\n     * > methods, which can create instances of [[PDFPage]] for you.\n     *\n     * Create an instance of [[PDFPage]].\n     *\n     * @param doc The document to which the page will belong.\n     */\n    PDFPage.create = function (doc) {\n        assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n        var dummyRef = PDFRef.of(-1);\n        var pageLeaf = PDFPageLeaf.withContextAndParent(doc.context, dummyRef);\n        var pageRef = doc.context.register(pageLeaf);\n        return new PDFPage(pageLeaf, pageRef, doc);\n    };\n    return PDFPage;\n}());\nexport default PDFPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}