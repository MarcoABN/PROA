{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFRef from \"../objects/PDFRef\";\nimport PDFFlateStream from \"./PDFFlateStream\";\nimport { bytesFor, Cache, reverseArray, sizeInBytes, sum } from \"../../utils\";\nexport var EntryType;\n(function (EntryType) {\n  EntryType[EntryType[\"Deleted\"] = 0] = \"Deleted\";\n  EntryType[EntryType[\"Uncompressed\"] = 1] = \"Uncompressed\";\n  EntryType[EntryType[\"Compressed\"] = 2] = \"Compressed\";\n})(EntryType || (EntryType = {}));\n/**\n * Entries should be added using the [[addDeletedEntry]],\n * [[addUncompressedEntry]], and [[addCompressedEntry]] methods\n * **in order of ascending object number**.\n */\nvar PDFCrossRefStream = /** @class */function (_super) {\n  __extends(PDFCrossRefStream, _super);\n  function PDFCrossRefStream(dict, entries, encode) {\n    if (encode === void 0) {\n      encode = true;\n    }\n    var _this = _super.call(this, dict, encode) || this;\n    // Returns an array of integer pairs for each subsection of the cross ref\n    // section, where each integer pair represents:\n    //   firstObjectNumber(OfSection), length(OfSection)\n    _this.computeIndex = function () {\n      var subsections = [];\n      var subsectionLength = 0;\n      for (var idx = 0, len = _this.entries.length; idx < len; idx++) {\n        var currEntry = _this.entries[idx];\n        var prevEntry = _this.entries[idx - 1];\n        if (idx === 0) {\n          subsections.push(currEntry.ref.objectNumber);\n        } else if (currEntry.ref.objectNumber - prevEntry.ref.objectNumber > 1) {\n          subsections.push(subsectionLength);\n          subsections.push(currEntry.ref.objectNumber);\n          subsectionLength = 0;\n        }\n        subsectionLength += 1;\n      }\n      subsections.push(subsectionLength);\n      return subsections;\n    };\n    _this.computeEntryTuples = function () {\n      var entryTuples = new Array(_this.entries.length);\n      for (var idx = 0, len = _this.entries.length; idx < len; idx++) {\n        var entry = _this.entries[idx];\n        if (entry.type === EntryType.Deleted) {\n          var type = entry.type,\n            nextFreeObjectNumber = entry.nextFreeObjectNumber,\n            ref = entry.ref;\n          entryTuples[idx] = [type, nextFreeObjectNumber, ref.generationNumber];\n        }\n        if (entry.type === EntryType.Uncompressed) {\n          var type = entry.type,\n            offset = entry.offset,\n            ref = entry.ref;\n          entryTuples[idx] = [type, offset, ref.generationNumber];\n        }\n        if (entry.type === EntryType.Compressed) {\n          var type = entry.type,\n            objectStreamRef = entry.objectStreamRef,\n            index = entry.index;\n          entryTuples[idx] = [type, objectStreamRef.objectNumber, index];\n        }\n      }\n      return entryTuples;\n    };\n    _this.computeMaxEntryByteWidths = function () {\n      var entryTuples = _this.entryTuplesCache.access();\n      var widths = [0, 0, 0];\n      for (var idx = 0, len = entryTuples.length; idx < len; idx++) {\n        var _a = entryTuples[idx],\n          first = _a[0],\n          second = _a[1],\n          third = _a[2];\n        var firstSize = sizeInBytes(first);\n        var secondSize = sizeInBytes(second);\n        var thirdSize = sizeInBytes(third);\n        if (firstSize > widths[0]) widths[0] = firstSize;\n        if (secondSize > widths[1]) widths[1] = secondSize;\n        if (thirdSize > widths[2]) widths[2] = thirdSize;\n      }\n      return widths;\n    };\n    _this.entries = entries || [];\n    _this.entryTuplesCache = Cache.populatedBy(_this.computeEntryTuples);\n    _this.maxByteWidthsCache = Cache.populatedBy(_this.computeMaxEntryByteWidths);\n    _this.indexCache = Cache.populatedBy(_this.computeIndex);\n    dict.set(PDFName.of('Type'), PDFName.of('XRef'));\n    return _this;\n  }\n  PDFCrossRefStream.prototype.addDeletedEntry = function (ref, nextFreeObjectNumber) {\n    var type = EntryType.Deleted;\n    this.entries.push({\n      type: type,\n      ref: ref,\n      nextFreeObjectNumber: nextFreeObjectNumber\n    });\n    this.entryTuplesCache.invalidate();\n    this.maxByteWidthsCache.invalidate();\n    this.indexCache.invalidate();\n    this.contentsCache.invalidate();\n  };\n  PDFCrossRefStream.prototype.addUncompressedEntry = function (ref, offset) {\n    var type = EntryType.Uncompressed;\n    this.entries.push({\n      type: type,\n      ref: ref,\n      offset: offset\n    });\n    this.entryTuplesCache.invalidate();\n    this.maxByteWidthsCache.invalidate();\n    this.indexCache.invalidate();\n    this.contentsCache.invalidate();\n  };\n  PDFCrossRefStream.prototype.addCompressedEntry = function (ref, objectStreamRef, index) {\n    var type = EntryType.Compressed;\n    this.entries.push({\n      type: type,\n      ref: ref,\n      objectStreamRef: objectStreamRef,\n      index: index\n    });\n    this.entryTuplesCache.invalidate();\n    this.maxByteWidthsCache.invalidate();\n    this.indexCache.invalidate();\n    this.contentsCache.invalidate();\n  };\n  PDFCrossRefStream.prototype.clone = function (context) {\n    var _a = this,\n      dict = _a.dict,\n      entries = _a.entries,\n      encode = _a.encode;\n    return PDFCrossRefStream.of(dict.clone(context), entries.slice(), encode);\n  };\n  PDFCrossRefStream.prototype.getContentsString = function () {\n    var entryTuples = this.entryTuplesCache.access();\n    var byteWidths = this.maxByteWidthsCache.access();\n    var value = '';\n    for (var entryIdx = 0, entriesLen = entryTuples.length; entryIdx < entriesLen; entryIdx++) {\n      var _a = entryTuples[entryIdx],\n        first = _a[0],\n        second = _a[1],\n        third = _a[2];\n      var firstBytes = reverseArray(bytesFor(first));\n      var secondBytes = reverseArray(bytesFor(second));\n      var thirdBytes = reverseArray(bytesFor(third));\n      for (var idx = byteWidths[0] - 1; idx >= 0; idx--) {\n        value += (firstBytes[idx] || 0).toString(2);\n      }\n      for (var idx = byteWidths[1] - 1; idx >= 0; idx--) {\n        value += (secondBytes[idx] || 0).toString(2);\n      }\n      for (var idx = byteWidths[2] - 1; idx >= 0; idx--) {\n        value += (thirdBytes[idx] || 0).toString(2);\n      }\n    }\n    return value;\n  };\n  PDFCrossRefStream.prototype.getUnencodedContents = function () {\n    var entryTuples = this.entryTuplesCache.access();\n    var byteWidths = this.maxByteWidthsCache.access();\n    var buffer = new Uint8Array(this.getUnencodedContentsSize());\n    var offset = 0;\n    for (var entryIdx = 0, entriesLen = entryTuples.length; entryIdx < entriesLen; entryIdx++) {\n      var _a = entryTuples[entryIdx],\n        first = _a[0],\n        second = _a[1],\n        third = _a[2];\n      var firstBytes = reverseArray(bytesFor(first));\n      var secondBytes = reverseArray(bytesFor(second));\n      var thirdBytes = reverseArray(bytesFor(third));\n      for (var idx = byteWidths[0] - 1; idx >= 0; idx--) {\n        buffer[offset++] = firstBytes[idx] || 0;\n      }\n      for (var idx = byteWidths[1] - 1; idx >= 0; idx--) {\n        buffer[offset++] = secondBytes[idx] || 0;\n      }\n      for (var idx = byteWidths[2] - 1; idx >= 0; idx--) {\n        buffer[offset++] = thirdBytes[idx] || 0;\n      }\n    }\n    return buffer;\n  };\n  PDFCrossRefStream.prototype.getUnencodedContentsSize = function () {\n    var byteWidths = this.maxByteWidthsCache.access();\n    var entryWidth = sum(byteWidths);\n    return entryWidth * this.entries.length;\n  };\n  PDFCrossRefStream.prototype.updateDict = function () {\n    _super.prototype.updateDict.call(this);\n    var byteWidths = this.maxByteWidthsCache.access();\n    var index = this.indexCache.access();\n    var context = this.dict.context;\n    this.dict.set(PDFName.of('W'), context.obj(byteWidths));\n    this.dict.set(PDFName.of('Index'), context.obj(index));\n  };\n  PDFCrossRefStream.create = function (dict, encode) {\n    if (encode === void 0) {\n      encode = true;\n    }\n    var stream = new PDFCrossRefStream(dict, [], encode);\n    stream.addDeletedEntry(PDFRef.of(0, 65535), 0);\n    return stream;\n  };\n  PDFCrossRefStream.of = function (dict, entries, encode) {\n    if (encode === void 0) {\n      encode = true;\n    }\n    return new PDFCrossRefStream(dict, entries, encode);\n  };\n  return PDFCrossRefStream;\n}(PDFFlateStream);\nexport default PDFCrossRefStream;","map":{"version":3,"names":["__extends","PDFName","PDFRef","PDFFlateStream","bytesFor","Cache","reverseArray","sizeInBytes","sum","EntryType","PDFCrossRefStream","_super","dict","entries","encode","_this","call","computeIndex","subsections","subsectionLength","idx","len","length","currEntry","prevEntry","push","ref","objectNumber","computeEntryTuples","entryTuples","Array","entry","type","Deleted","nextFreeObjectNumber","generationNumber","Uncompressed","offset","Compressed","objectStreamRef","index","computeMaxEntryByteWidths","entryTuplesCache","access","widths","_a","first","second","third","firstSize","secondSize","thirdSize","populatedBy","maxByteWidthsCache","indexCache","set","of","prototype","addDeletedEntry","invalidate","contentsCache","addUncompressedEntry","addCompressedEntry","clone","context","slice","getContentsString","byteWidths","value","entryIdx","entriesLen","firstBytes","secondBytes","thirdBytes","toString","getUnencodedContents","buffer","Uint8Array","getUnencodedContentsSize","entryWidth","updateDict","obj","create","stream"],"sources":["E:/PROA/frontPROA/node_modules/pdf-lib/es/core/structures/PDFCrossRefStream.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFRef from \"../objects/PDFRef\";\nimport PDFFlateStream from \"./PDFFlateStream\";\nimport { bytesFor, Cache, reverseArray, sizeInBytes, sum } from \"../../utils\";\nexport var EntryType;\n(function (EntryType) {\n    EntryType[EntryType[\"Deleted\"] = 0] = \"Deleted\";\n    EntryType[EntryType[\"Uncompressed\"] = 1] = \"Uncompressed\";\n    EntryType[EntryType[\"Compressed\"] = 2] = \"Compressed\";\n})(EntryType || (EntryType = {}));\n/**\n * Entries should be added using the [[addDeletedEntry]],\n * [[addUncompressedEntry]], and [[addCompressedEntry]] methods\n * **in order of ascending object number**.\n */\nvar PDFCrossRefStream = /** @class */ (function (_super) {\n    __extends(PDFCrossRefStream, _super);\n    function PDFCrossRefStream(dict, entries, encode) {\n        if (encode === void 0) { encode = true; }\n        var _this = _super.call(this, dict, encode) || this;\n        // Returns an array of integer pairs for each subsection of the cross ref\n        // section, where each integer pair represents:\n        //   firstObjectNumber(OfSection), length(OfSection)\n        _this.computeIndex = function () {\n            var subsections = [];\n            var subsectionLength = 0;\n            for (var idx = 0, len = _this.entries.length; idx < len; idx++) {\n                var currEntry = _this.entries[idx];\n                var prevEntry = _this.entries[idx - 1];\n                if (idx === 0) {\n                    subsections.push(currEntry.ref.objectNumber);\n                }\n                else if (currEntry.ref.objectNumber - prevEntry.ref.objectNumber > 1) {\n                    subsections.push(subsectionLength);\n                    subsections.push(currEntry.ref.objectNumber);\n                    subsectionLength = 0;\n                }\n                subsectionLength += 1;\n            }\n            subsections.push(subsectionLength);\n            return subsections;\n        };\n        _this.computeEntryTuples = function () {\n            var entryTuples = new Array(_this.entries.length);\n            for (var idx = 0, len = _this.entries.length; idx < len; idx++) {\n                var entry = _this.entries[idx];\n                if (entry.type === EntryType.Deleted) {\n                    var type = entry.type, nextFreeObjectNumber = entry.nextFreeObjectNumber, ref = entry.ref;\n                    entryTuples[idx] = [type, nextFreeObjectNumber, ref.generationNumber];\n                }\n                if (entry.type === EntryType.Uncompressed) {\n                    var type = entry.type, offset = entry.offset, ref = entry.ref;\n                    entryTuples[idx] = [type, offset, ref.generationNumber];\n                }\n                if (entry.type === EntryType.Compressed) {\n                    var type = entry.type, objectStreamRef = entry.objectStreamRef, index = entry.index;\n                    entryTuples[idx] = [type, objectStreamRef.objectNumber, index];\n                }\n            }\n            return entryTuples;\n        };\n        _this.computeMaxEntryByteWidths = function () {\n            var entryTuples = _this.entryTuplesCache.access();\n            var widths = [0, 0, 0];\n            for (var idx = 0, len = entryTuples.length; idx < len; idx++) {\n                var _a = entryTuples[idx], first = _a[0], second = _a[1], third = _a[2];\n                var firstSize = sizeInBytes(first);\n                var secondSize = sizeInBytes(second);\n                var thirdSize = sizeInBytes(third);\n                if (firstSize > widths[0])\n                    widths[0] = firstSize;\n                if (secondSize > widths[1])\n                    widths[1] = secondSize;\n                if (thirdSize > widths[2])\n                    widths[2] = thirdSize;\n            }\n            return widths;\n        };\n        _this.entries = entries || [];\n        _this.entryTuplesCache = Cache.populatedBy(_this.computeEntryTuples);\n        _this.maxByteWidthsCache = Cache.populatedBy(_this.computeMaxEntryByteWidths);\n        _this.indexCache = Cache.populatedBy(_this.computeIndex);\n        dict.set(PDFName.of('Type'), PDFName.of('XRef'));\n        return _this;\n    }\n    PDFCrossRefStream.prototype.addDeletedEntry = function (ref, nextFreeObjectNumber) {\n        var type = EntryType.Deleted;\n        this.entries.push({ type: type, ref: ref, nextFreeObjectNumber: nextFreeObjectNumber });\n        this.entryTuplesCache.invalidate();\n        this.maxByteWidthsCache.invalidate();\n        this.indexCache.invalidate();\n        this.contentsCache.invalidate();\n    };\n    PDFCrossRefStream.prototype.addUncompressedEntry = function (ref, offset) {\n        var type = EntryType.Uncompressed;\n        this.entries.push({ type: type, ref: ref, offset: offset });\n        this.entryTuplesCache.invalidate();\n        this.maxByteWidthsCache.invalidate();\n        this.indexCache.invalidate();\n        this.contentsCache.invalidate();\n    };\n    PDFCrossRefStream.prototype.addCompressedEntry = function (ref, objectStreamRef, index) {\n        var type = EntryType.Compressed;\n        this.entries.push({ type: type, ref: ref, objectStreamRef: objectStreamRef, index: index });\n        this.entryTuplesCache.invalidate();\n        this.maxByteWidthsCache.invalidate();\n        this.indexCache.invalidate();\n        this.contentsCache.invalidate();\n    };\n    PDFCrossRefStream.prototype.clone = function (context) {\n        var _a = this, dict = _a.dict, entries = _a.entries, encode = _a.encode;\n        return PDFCrossRefStream.of(dict.clone(context), entries.slice(), encode);\n    };\n    PDFCrossRefStream.prototype.getContentsString = function () {\n        var entryTuples = this.entryTuplesCache.access();\n        var byteWidths = this.maxByteWidthsCache.access();\n        var value = '';\n        for (var entryIdx = 0, entriesLen = entryTuples.length; entryIdx < entriesLen; entryIdx++) {\n            var _a = entryTuples[entryIdx], first = _a[0], second = _a[1], third = _a[2];\n            var firstBytes = reverseArray(bytesFor(first));\n            var secondBytes = reverseArray(bytesFor(second));\n            var thirdBytes = reverseArray(bytesFor(third));\n            for (var idx = byteWidths[0] - 1; idx >= 0; idx--) {\n                value += (firstBytes[idx] || 0).toString(2);\n            }\n            for (var idx = byteWidths[1] - 1; idx >= 0; idx--) {\n                value += (secondBytes[idx] || 0).toString(2);\n            }\n            for (var idx = byteWidths[2] - 1; idx >= 0; idx--) {\n                value += (thirdBytes[idx] || 0).toString(2);\n            }\n        }\n        return value;\n    };\n    PDFCrossRefStream.prototype.getUnencodedContents = function () {\n        var entryTuples = this.entryTuplesCache.access();\n        var byteWidths = this.maxByteWidthsCache.access();\n        var buffer = new Uint8Array(this.getUnencodedContentsSize());\n        var offset = 0;\n        for (var entryIdx = 0, entriesLen = entryTuples.length; entryIdx < entriesLen; entryIdx++) {\n            var _a = entryTuples[entryIdx], first = _a[0], second = _a[1], third = _a[2];\n            var firstBytes = reverseArray(bytesFor(first));\n            var secondBytes = reverseArray(bytesFor(second));\n            var thirdBytes = reverseArray(bytesFor(third));\n            for (var idx = byteWidths[0] - 1; idx >= 0; idx--) {\n                buffer[offset++] = firstBytes[idx] || 0;\n            }\n            for (var idx = byteWidths[1] - 1; idx >= 0; idx--) {\n                buffer[offset++] = secondBytes[idx] || 0;\n            }\n            for (var idx = byteWidths[2] - 1; idx >= 0; idx--) {\n                buffer[offset++] = thirdBytes[idx] || 0;\n            }\n        }\n        return buffer;\n    };\n    PDFCrossRefStream.prototype.getUnencodedContentsSize = function () {\n        var byteWidths = this.maxByteWidthsCache.access();\n        var entryWidth = sum(byteWidths);\n        return entryWidth * this.entries.length;\n    };\n    PDFCrossRefStream.prototype.updateDict = function () {\n        _super.prototype.updateDict.call(this);\n        var byteWidths = this.maxByteWidthsCache.access();\n        var index = this.indexCache.access();\n        var context = this.dict.context;\n        this.dict.set(PDFName.of('W'), context.obj(byteWidths));\n        this.dict.set(PDFName.of('Index'), context.obj(index));\n    };\n    PDFCrossRefStream.create = function (dict, encode) {\n        if (encode === void 0) { encode = true; }\n        var stream = new PDFCrossRefStream(dict, [], encode);\n        stream.addDeletedEntry(PDFRef.of(0, 65535), 0);\n        return stream;\n    };\n    PDFCrossRefStream.of = function (dict, entries, encode) {\n        if (encode === void 0) { encode = true; }\n        return new PDFCrossRefStream(dict, entries, encode);\n    };\n    return PDFCrossRefStream;\n}(PDFFlateStream));\nexport default PDFCrossRefStream;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}