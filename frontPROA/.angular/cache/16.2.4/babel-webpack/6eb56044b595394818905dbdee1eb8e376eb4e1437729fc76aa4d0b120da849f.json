{"ast":null,"code":"/*\n * Copyright 2012 Mozilla Foundation\n *\n * The LZWStream class contained in this file is a TypeScript port of the\n * JavaScript LZWStream class in Mozilla's pdf.js project, made available\n * under the Apache 2.0 open source license.\n */\nimport { __extends } from \"tslib\";\nimport DecodeStream from \"./DecodeStream\";\nvar LZWStream = /** @class */function (_super) {\n  __extends(LZWStream, _super);\n  function LZWStream(stream, maybeLength, earlyChange) {\n    var _this = _super.call(this, maybeLength) || this;\n    _this.stream = stream;\n    _this.cachedData = 0;\n    _this.bitsCached = 0;\n    var maxLzwDictionarySize = 4096;\n    var lzwState = {\n      earlyChange: earlyChange,\n      codeLength: 9,\n      nextCode: 258,\n      dictionaryValues: new Uint8Array(maxLzwDictionarySize),\n      dictionaryLengths: new Uint16Array(maxLzwDictionarySize),\n      dictionaryPrevCodes: new Uint16Array(maxLzwDictionarySize),\n      currentSequence: new Uint8Array(maxLzwDictionarySize),\n      currentSequenceLength: 0\n    };\n    for (var i = 0; i < 256; ++i) {\n      lzwState.dictionaryValues[i] = i;\n      lzwState.dictionaryLengths[i] = 1;\n    }\n    _this.lzwState = lzwState;\n    return _this;\n  }\n  LZWStream.prototype.readBlock = function () {\n    var blockSize = 512;\n    var estimatedDecodedSize = blockSize * 2;\n    var decodedSizeDelta = blockSize;\n    var i;\n    var j;\n    var q;\n    var lzwState = this.lzwState;\n    if (!lzwState) {\n      return; // eof was found\n    }\n\n    var earlyChange = lzwState.earlyChange;\n    var nextCode = lzwState.nextCode;\n    var dictionaryValues = lzwState.dictionaryValues;\n    var dictionaryLengths = lzwState.dictionaryLengths;\n    var dictionaryPrevCodes = lzwState.dictionaryPrevCodes;\n    var codeLength = lzwState.codeLength;\n    var prevCode = lzwState.prevCode;\n    var currentSequence = lzwState.currentSequence;\n    var currentSequenceLength = lzwState.currentSequenceLength;\n    var decodedLength = 0;\n    var currentBufferLength = this.bufferLength;\n    var buffer = this.ensureBuffer(this.bufferLength + estimatedDecodedSize);\n    for (i = 0; i < blockSize; i++) {\n      var code = this.readBits(codeLength);\n      var hasPrev = currentSequenceLength > 0;\n      if (!code || code < 256) {\n        currentSequence[0] = code;\n        currentSequenceLength = 1;\n      } else if (code >= 258) {\n        if (code < nextCode) {\n          currentSequenceLength = dictionaryLengths[code];\n          for (j = currentSequenceLength - 1, q = code; j >= 0; j--) {\n            currentSequence[j] = dictionaryValues[q];\n            q = dictionaryPrevCodes[q];\n          }\n        } else {\n          currentSequence[currentSequenceLength++] = currentSequence[0];\n        }\n      } else if (code === 256) {\n        codeLength = 9;\n        nextCode = 258;\n        currentSequenceLength = 0;\n        continue;\n      } else {\n        this.eof = true;\n        delete this.lzwState;\n        break;\n      }\n      if (hasPrev) {\n        dictionaryPrevCodes[nextCode] = prevCode;\n        dictionaryLengths[nextCode] = dictionaryLengths[prevCode] + 1;\n        dictionaryValues[nextCode] = currentSequence[0];\n        nextCode++;\n        codeLength = nextCode + earlyChange & nextCode + earlyChange - 1 ? codeLength : Math.min(Math.log(nextCode + earlyChange) / 0.6931471805599453 + 1, 12) | 0;\n      }\n      prevCode = code;\n      decodedLength += currentSequenceLength;\n      if (estimatedDecodedSize < decodedLength) {\n        do {\n          estimatedDecodedSize += decodedSizeDelta;\n        } while (estimatedDecodedSize < decodedLength);\n        buffer = this.ensureBuffer(this.bufferLength + estimatedDecodedSize);\n      }\n      for (j = 0; j < currentSequenceLength; j++) {\n        buffer[currentBufferLength++] = currentSequence[j];\n      }\n    }\n    lzwState.nextCode = nextCode;\n    lzwState.codeLength = codeLength;\n    lzwState.prevCode = prevCode;\n    lzwState.currentSequenceLength = currentSequenceLength;\n    this.bufferLength = currentBufferLength;\n  };\n  LZWStream.prototype.readBits = function (n) {\n    var bitsCached = this.bitsCached;\n    var cachedData = this.cachedData;\n    while (bitsCached < n) {\n      var c = this.stream.getByte();\n      if (c === -1) {\n        this.eof = true;\n        return null;\n      }\n      cachedData = cachedData << 8 | c;\n      bitsCached += 8;\n    }\n    this.bitsCached = bitsCached -= n;\n    this.cachedData = cachedData;\n    return cachedData >>> bitsCached & (1 << n) - 1;\n  };\n  return LZWStream;\n}(DecodeStream);\nexport default LZWStream;","map":{"version":3,"names":["__extends","DecodeStream","LZWStream","_super","stream","maybeLength","earlyChange","_this","call","cachedData","bitsCached","maxLzwDictionarySize","lzwState","codeLength","nextCode","dictionaryValues","Uint8Array","dictionaryLengths","Uint16Array","dictionaryPrevCodes","currentSequence","currentSequenceLength","i","prototype","readBlock","blockSize","estimatedDecodedSize","decodedSizeDelta","j","q","prevCode","decodedLength","currentBufferLength","bufferLength","buffer","ensureBuffer","code","readBits","hasPrev","eof","Math","min","log","n","c","getByte"],"sources":["E:/PROA/frontPROA/node_modules/pdf-lib/es/core/streams/LZWStream.js"],"sourcesContent":["/*\n * Copyright 2012 Mozilla Foundation\n *\n * The LZWStream class contained in this file is a TypeScript port of the\n * JavaScript LZWStream class in Mozilla's pdf.js project, made available\n * under the Apache 2.0 open source license.\n */\nimport { __extends } from \"tslib\";\nimport DecodeStream from \"./DecodeStream\";\nvar LZWStream = /** @class */ (function (_super) {\n    __extends(LZWStream, _super);\n    function LZWStream(stream, maybeLength, earlyChange) {\n        var _this = _super.call(this, maybeLength) || this;\n        _this.stream = stream;\n        _this.cachedData = 0;\n        _this.bitsCached = 0;\n        var maxLzwDictionarySize = 4096;\n        var lzwState = {\n            earlyChange: earlyChange,\n            codeLength: 9,\n            nextCode: 258,\n            dictionaryValues: new Uint8Array(maxLzwDictionarySize),\n            dictionaryLengths: new Uint16Array(maxLzwDictionarySize),\n            dictionaryPrevCodes: new Uint16Array(maxLzwDictionarySize),\n            currentSequence: new Uint8Array(maxLzwDictionarySize),\n            currentSequenceLength: 0,\n        };\n        for (var i = 0; i < 256; ++i) {\n            lzwState.dictionaryValues[i] = i;\n            lzwState.dictionaryLengths[i] = 1;\n        }\n        _this.lzwState = lzwState;\n        return _this;\n    }\n    LZWStream.prototype.readBlock = function () {\n        var blockSize = 512;\n        var estimatedDecodedSize = blockSize * 2;\n        var decodedSizeDelta = blockSize;\n        var i;\n        var j;\n        var q;\n        var lzwState = this.lzwState;\n        if (!lzwState) {\n            return; // eof was found\n        }\n        var earlyChange = lzwState.earlyChange;\n        var nextCode = lzwState.nextCode;\n        var dictionaryValues = lzwState.dictionaryValues;\n        var dictionaryLengths = lzwState.dictionaryLengths;\n        var dictionaryPrevCodes = lzwState.dictionaryPrevCodes;\n        var codeLength = lzwState.codeLength;\n        var prevCode = lzwState.prevCode;\n        var currentSequence = lzwState.currentSequence;\n        var currentSequenceLength = lzwState.currentSequenceLength;\n        var decodedLength = 0;\n        var currentBufferLength = this.bufferLength;\n        var buffer = this.ensureBuffer(this.bufferLength + estimatedDecodedSize);\n        for (i = 0; i < blockSize; i++) {\n            var code = this.readBits(codeLength);\n            var hasPrev = currentSequenceLength > 0;\n            if (!code || code < 256) {\n                currentSequence[0] = code;\n                currentSequenceLength = 1;\n            }\n            else if (code >= 258) {\n                if (code < nextCode) {\n                    currentSequenceLength = dictionaryLengths[code];\n                    for (j = currentSequenceLength - 1, q = code; j >= 0; j--) {\n                        currentSequence[j] = dictionaryValues[q];\n                        q = dictionaryPrevCodes[q];\n                    }\n                }\n                else {\n                    currentSequence[currentSequenceLength++] = currentSequence[0];\n                }\n            }\n            else if (code === 256) {\n                codeLength = 9;\n                nextCode = 258;\n                currentSequenceLength = 0;\n                continue;\n            }\n            else {\n                this.eof = true;\n                delete this.lzwState;\n                break;\n            }\n            if (hasPrev) {\n                dictionaryPrevCodes[nextCode] = prevCode;\n                dictionaryLengths[nextCode] = dictionaryLengths[prevCode] + 1;\n                dictionaryValues[nextCode] = currentSequence[0];\n                nextCode++;\n                codeLength =\n                    (nextCode + earlyChange) & (nextCode + earlyChange - 1)\n                        ? codeLength\n                        : Math.min(Math.log(nextCode + earlyChange) / 0.6931471805599453 + 1, 12) | 0;\n            }\n            prevCode = code;\n            decodedLength += currentSequenceLength;\n            if (estimatedDecodedSize < decodedLength) {\n                do {\n                    estimatedDecodedSize += decodedSizeDelta;\n                } while (estimatedDecodedSize < decodedLength);\n                buffer = this.ensureBuffer(this.bufferLength + estimatedDecodedSize);\n            }\n            for (j = 0; j < currentSequenceLength; j++) {\n                buffer[currentBufferLength++] = currentSequence[j];\n            }\n        }\n        lzwState.nextCode = nextCode;\n        lzwState.codeLength = codeLength;\n        lzwState.prevCode = prevCode;\n        lzwState.currentSequenceLength = currentSequenceLength;\n        this.bufferLength = currentBufferLength;\n    };\n    LZWStream.prototype.readBits = function (n) {\n        var bitsCached = this.bitsCached;\n        var cachedData = this.cachedData;\n        while (bitsCached < n) {\n            var c = this.stream.getByte();\n            if (c === -1) {\n                this.eof = true;\n                return null;\n            }\n            cachedData = (cachedData << 8) | c;\n            bitsCached += 8;\n        }\n        this.bitsCached = bitsCached -= n;\n        this.cachedData = cachedData;\n        return (cachedData >>> bitsCached) & ((1 << n) - 1);\n    };\n    return LZWStream;\n}(DecodeStream));\nexport default LZWStream;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}