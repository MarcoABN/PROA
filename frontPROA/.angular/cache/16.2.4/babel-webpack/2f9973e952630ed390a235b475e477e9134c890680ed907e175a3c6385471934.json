{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFPage from \"../PDFPage\";\nimport { normalizeAppearance, defaultCheckBoxAppearanceProvider } from \"./appearances\";\nimport { rgb } from \"../colors\";\nimport { degrees } from \"../rotations\";\nimport PDFField, { assertFieldAppearanceOptions } from \"./PDFField\";\nimport { PDFName, PDFDict, PDFAcroCheckBox } from \"../../core\";\nimport { assertIs, assertOrUndefined } from \"../../utils\";\n/**\r\n * Represents a check box field of a [[PDFForm]].\r\n *\r\n * [[PDFCheckBox]] fields are interactive boxes that users can click with their\r\n * mouse. This type of [[PDFField]] has two states: `on` and `off`. The purpose\r\n * of a check box is to enable users to select from one or more options, where\r\n * each option is represented by a single check box. Check boxes are typically\r\n * square in shape and display a check mark when they are in the `on` state.\r\n */\nvar PDFCheckBox = /** @class */function (_super) {\n  __extends(PDFCheckBox, _super);\n  function PDFCheckBox(acroCheckBox, ref, doc) {\n    var _this = _super.call(this, acroCheckBox, ref, doc) || this;\n    assertIs(acroCheckBox, 'acroCheckBox', [[PDFAcroCheckBox, 'PDFAcroCheckBox']]);\n    _this.acroField = acroCheckBox;\n    return _this;\n  }\n  /**\r\n   * Mark this check box. This operation is analogous to a human user clicking\r\n   * a check box to fill it in a PDF reader. This method will update the\r\n   * underlying state of the check box field to indicate it has been selected.\r\n   * PDF libraries and readers will be able to extract this value from the\r\n   * saved document and determine that it was selected.\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * const checkBox = form.getCheckBox('some.checkBox.field')\r\n   * checkBox.check()\r\n   * ```\r\n   *\r\n   * This method will mark this check box as dirty, causing its appearance\r\n   * streams to be updated when either [[PDFDocument.save]] or\r\n   * [[PDFForm.updateFieldAppearances]] is called. The updated appearance\r\n   * streams will display a check mark inside the widgets of this check box\r\n   * field.\r\n   */\n  PDFCheckBox.prototype.check = function () {\n    var _a;\n    var onValue = (_a = this.acroField.getOnValue()) !== null && _a !== void 0 ? _a : PDFName.of('Yes');\n    this.markAsDirty();\n    this.acroField.setValue(onValue);\n  };\n  /**\r\n   * Clears this check box. This operation is analogous to a human user clicking\r\n   * a check box to unmark it in a PDF reader. This method will update the\r\n   * underlying state of the check box field to indicate it has been deselected.\r\n   * PDF libraries and readers will be able to extract this value from the\r\n   * saved document and determine that it was not selected.\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * const checkBox = form.getCheckBox('some.checkBox.field')\r\n   * checkBox.uncheck()\r\n   * ```\r\n   *\r\n   * This method will mark this check box as dirty. See [[PDFCheckBox.check]]\r\n   * for more details about what this means.\r\n   */\n  PDFCheckBox.prototype.uncheck = function () {\n    this.markAsDirty();\n    this.acroField.setValue(PDFName.of('Off'));\n  };\n  /**\r\n   * Returns `true` if this check box is selected (either by a human user via\r\n   * a PDF reader, or else programmatically via software). For example:\r\n   * ```js\r\n   * const checkBox = form.getCheckBox('some.checkBox.field')\r\n   * if (checkBox.isChecked()) console.log('check box is selected')\r\n   * ```\r\n   * @returns Whether or not this check box is selected.\r\n   */\n  PDFCheckBox.prototype.isChecked = function () {\n    var onValue = this.acroField.getOnValue();\n    return !!onValue && onValue === this.acroField.getValue();\n  };\n  /**\r\n   * Show this check box on the specified page. For example:\r\n   * ```js\r\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n   * const page = pdfDoc.addPage()\r\n   *\r\n   * const form = pdfDoc.getForm()\r\n   * const checkBox = form.createCheckBox('some.checkBox.field')\r\n   *\r\n   * checkBox.addToPage(page, {\r\n   *   x: 50,\r\n   *   y: 75,\r\n   *   width: 25,\r\n   *   height: 25,\r\n   *   textColor: rgb(1, 0, 0),\r\n   *   backgroundColor: rgb(0, 1, 0),\r\n   *   borderColor: rgb(0, 0, 1),\r\n   *   borderWidth: 2,\r\n   *   rotate: degrees(90),\r\n   * })\r\n   * ```\r\n   * This will create a new widget for this check box field.\r\n   * @param page The page to which this check box widget should be added.\r\n   * @param options The options to be used when adding this check box widget.\r\n   */\n  PDFCheckBox.prototype.addToPage = function (page, options) {\n    var _a, _b, _c, _d, _e, _f;\n    assertIs(page, 'page', [[PDFPage, 'PDFPage']]);\n    assertFieldAppearanceOptions(options);\n    if (!options) options = {};\n    if (!('textColor' in options)) options.textColor = rgb(0, 0, 0);\n    if (!('backgroundColor' in options)) options.backgroundColor = rgb(1, 1, 1);\n    if (!('borderColor' in options)) options.borderColor = rgb(0, 0, 0);\n    if (!('borderWidth' in options)) options.borderWidth = 1;\n    // Create a widget for this check box\n    var widget = this.createWidget({\n      x: (_a = options.x) !== null && _a !== void 0 ? _a : 0,\n      y: (_b = options.y) !== null && _b !== void 0 ? _b : 0,\n      width: (_c = options.width) !== null && _c !== void 0 ? _c : 50,\n      height: (_d = options.height) !== null && _d !== void 0 ? _d : 50,\n      textColor: options.textColor,\n      backgroundColor: options.backgroundColor,\n      borderColor: options.borderColor,\n      borderWidth: (_e = options.borderWidth) !== null && _e !== void 0 ? _e : 0,\n      rotate: (_f = options.rotate) !== null && _f !== void 0 ? _f : degrees(0),\n      hidden: options.hidden,\n      page: page.ref\n    });\n    var widgetRef = this.doc.context.register(widget.dict);\n    // Add widget to this field\n    this.acroField.addWidget(widgetRef);\n    // Set appearance streams for widget\n    widget.setAppearanceState(PDFName.of('Off'));\n    this.updateWidgetAppearance(widget, PDFName.of('Yes'));\n    // Add widget to the given page\n    page.node.addAnnot(widgetRef);\n  };\n  /**\r\n   * Returns `true` if any of this check box's widgets do not have an\r\n   * appearance stream for its current state. For example:\r\n   * ```js\r\n   * const checkBox = form.getCheckBox('some.checkBox.field')\r\n   * if (checkBox.needsAppearancesUpdate()) console.log('Needs update')\r\n   * ```\r\n   * @returns Whether or not this check box needs an appearance update.\r\n   */\n  PDFCheckBox.prototype.needsAppearancesUpdate = function () {\n    var _a;\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var state = widget.getAppearanceState();\n      var normal = (_a = widget.getAppearances()) === null || _a === void 0 ? void 0 : _a.normal;\n      if (!(normal instanceof PDFDict)) return true;\n      if (state && !normal.has(state)) return true;\n    }\n    return false;\n  };\n  /**\r\n   * Update the appearance streams for each of this check box's widgets using\r\n   * the default appearance provider for check boxes. For example:\r\n   * ```js\r\n   * const checkBox = form.getCheckBox('some.checkBox.field')\r\n   * checkBox.defaultUpdateAppearances()\r\n   * ```\r\n   */\n  PDFCheckBox.prototype.defaultUpdateAppearances = function () {\n    this.updateAppearances();\n  };\n  /**\r\n   * Update the appearance streams for each of this check box's widgets using\r\n   * the given appearance provider. If no `provider` is passed, the default\r\n   * appearance provider for check boxs will be used. For example:\r\n   * ```js\r\n   * const checkBox = form.getCheckBox('some.checkBox.field')\r\n   * checkBox.updateAppearances((field, widget) => {\r\n   *   ...\r\n   *   return {\r\n   *     normal: { on: drawCheckBox(...), off: drawCheckBox(...) },\r\n   *     down: { on: drawCheckBox(...), off: drawCheckBox(...) },\r\n   *   }\r\n   * })\r\n   * ```\r\n   * @param provider Optionally, the appearance provider to be used for\r\n   *                 generating the contents of the appearance streams.\r\n   */\n  PDFCheckBox.prototype.updateAppearances = function (provider) {\n    var _a;\n    assertOrUndefined(provider, 'provider', [Function]);\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var onValue = (_a = widget.getOnValue()) !== null && _a !== void 0 ? _a : PDFName.of('Yes');\n      if (!onValue) continue;\n      this.updateWidgetAppearance(widget, onValue, provider);\n    }\n    this.markAsClean();\n  };\n  PDFCheckBox.prototype.updateWidgetAppearance = function (widget, onValue, provider) {\n    var apProvider = provider !== null && provider !== void 0 ? provider : defaultCheckBoxAppearanceProvider;\n    var appearances = normalizeAppearance(apProvider(this, widget));\n    this.updateOnOffWidgetAppearance(widget, onValue, appearances);\n  };\n  /**\r\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\r\n   * > consider using the [[PDFForm.getCheckBox]] method, which will create an\r\n   * > instance of [[PDFCheckBox]] for you.\r\n   *\r\n   * Create an instance of [[PDFCheckBox]] from an existing acroCheckBox and ref\r\n   *\r\n   * @param acroCheckBox The underlying `PDFAcroCheckBox` for this check box.\r\n   * @param ref The unique reference for this check box.\r\n   * @param doc The document to which this check box will belong.\r\n   */\n  PDFCheckBox.of = function (acroCheckBox, ref, doc) {\n    return new PDFCheckBox(acroCheckBox, ref, doc);\n  };\n  return PDFCheckBox;\n}(PDFField);\nexport default PDFCheckBox;\n//# sourceMappingURL=PDFCheckBox.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}