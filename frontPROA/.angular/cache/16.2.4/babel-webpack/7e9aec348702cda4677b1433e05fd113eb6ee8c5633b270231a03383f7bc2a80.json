{"ast":null,"code":"import _asyncToGenerator from \"E:/PROA/frontPROA/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { PDFDocument } from 'pdf-lib';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"../front-prestador.service\";\nimport * as i3 from \"../front-procuracao.service\";\nexport let Procuracao01Service = /*#__PURE__*/(() => {\n  class Procuracao01Service {\n    constructor(datePipe, prestadorService, procuracaoService) {\n      this.datePipe = datePipe;\n      this.prestadorService = prestadorService;\n      this.procuracaoService = procuracaoService;\n      this.prestadores = [];\n    }\n    procuracao01(embarcacao, cliente, servico) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        _this.prestadorService.listarPrestador().subscribe(prestadores => {\n          _this.prestadores = prestadores;\n        });\n        _this.procuracaoService.consultarProcuracao(\"procuracao01\").subscribe(procuracao => {\n          _this.stringProcuracao = procuracao.textoProcuracao;\n        });\n        try {\n          const pdfBytes = yield fetch('assets/pdfanexos/Procuracao_modelo01.pdf').then(res => res.arrayBuffer());\n          const pdfDoc = yield PDFDocument.load(pdfBytes);\n          const form = pdfDoc.getForm();\n          _this.substituirCampos({\n            nome_cliente: embarcacao.cliente.nome,\n            nacionalidade_cliente: embarcacao.cliente.nacionalidade,\n            endereco_cliente: embarcacao.cliente.logradouro + \", \" + embarcacao.cliente.numero + \", \" + embarcacao.cliente.complemento,\n            cidade_cliente: embarcacao.cliente.cidade,\n            estado_cliente: embarcacao.cliente.uf,\n            identidade_cliente: embarcacao.cliente.rg,\n            orgao_exp: embarcacao.cliente.orgEmissor,\n            cpf_cliente: embarcacao.cliente.cpfcnpj\n          });\n          form.getTextField('corpocompleto').setText(_this.stringProcuracao);\n          form.getTextField('nomeembarcacao').setText(embarcacao.nomeEmbarcacao);\n          form.getTextField('tipo').setText(embarcacao.tipoEmbarcacao);\n          form.getTextField('comprimento').setText(embarcacao.compTotal.toString());\n          form.getTextField('boca').setText(embarcacao.bocaMoldada.toString());\n          form.getTextField('numcasco').setText(embarcacao.numCasco);\n          form.getTextField('potencia').setText(embarcacao.potenciaMotor.toString());\n          form.getTextField('inscricao').setText(embarcacao.numInscricao);\n          form.getTextField('atividade').setText(embarcacao.tipoAtividade);\n          form.getTextField('tripulantes').setText(embarcacao.qtdTripulantes.toString());\n          form.getTextField('passageiros').setText(embarcacao.lotacao.toString());\n          form.getTextField('materialcasco').setText(embarcacao.matCasco);\n          form.getTextField('numserie').setText(embarcacao.numCasco);\n          form.getTextField('nomecliente').setText(embarcacao.cliente.nome);\n          form.getTextField('cpf').setText(_this.formatarCPFouCNPJ(embarcacao.cliente.cpfcnpj));\n          const dataAtual = new Date();\n          const dia = dataAtual.getDate().toString().padStart(2, '0');\n          const mes = (dataAtual.getMonth() + 1).toString().padStart(2, '0'); // Janeiro é 0\n          const ano = dataAtual.getFullYear();\n          form.getTextField('localdata').setText(`${embarcacao.cliente.cidade} ${dia}/${mes}/${ano}`);\n          //form.flatten();\n          const modifiedPdfBytes = yield pdfDoc.save();\n          if (!servico) {\n            _this.abrirPDFemJanela(modifiedPdfBytes);\n            console.log('PDF Criado!');\n          } else {\n            return modifiedPdfBytes;\n          }\n        } catch (err) {\n          console.error(err);\n        }\n      })();\n    }\n    downloadPdf(data, filename) {\n      const blob = new Blob([data], {\n        type: 'application/pdf'\n      });\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      document.body.appendChild(a);\n      a.style.display = 'none';\n      a.href = url;\n      a.download = filename;\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    }\n    abrirPDFemJanela(data) {\n      const blob = new Blob([data], {\n        type: 'application/pdf'\n      });\n      const url = window.URL.createObjectURL(blob);\n      window.open(url, '_blank');\n    }\n    formatarCPFouCNPJ(valor) {\n      // Remove todos os caracteres não numéricos\n      const valorLimpo = valor.replace(/\\D/g, '');\n      if (valorLimpo.length === 11) {\n        // Formata como CPF\n        return valorLimpo.replace(/(\\d{3})(\\d{3})(\\d{3})(\\d{2})/, 'CPF: $1.$2.$3-$4');\n      } else if (valorLimpo.length === 14) {\n        // Formata como CNPJ\n        return valorLimpo.replace(/(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})/, 'CNPJ: $1.$2.$3/$4-$5');\n      } else {\n        // Retorna o valor original se não for CPF nem CNPJ válido\n        return valor;\n      }\n    }\n    substituirCampos(campoValores) {\n      // Percorrer o mapa de campos e valores para substituir todos os placeholders\n      for (const [campo, valor] of Object.entries(campoValores)) {\n        const regex = new RegExp(`{{${campo}}}`, 'g');\n        this.stringProcuracao = this.stringProcuracao.replace(regex, valor);\n      }\n    }\n    gerarPdf() {\n      this.procuracaoService.alterarTextoEConverterParaPdf(this.stringProcuracao).subscribe(response => {\n        const blob = new Blob([response], {\n          type: 'application/pdf'\n        });\n        const url = window.URL.createObjectURL(blob);\n        window.open(url);\n      }, error => {\n        console.error('Erro ao gerar o PDF', error);\n      });\n    }\n    static #_ = this.ɵfac = function Procuracao01Service_Factory(t) {\n      return new (t || Procuracao01Service)(i0.ɵɵinject(i1.DatePipe), i0.ɵɵinject(i2.FrontPrestadorService), i0.ɵɵinject(i3.FrontProcuracaoService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: Procuracao01Service,\n      factory: Procuracao01Service.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return Procuracao01Service;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}