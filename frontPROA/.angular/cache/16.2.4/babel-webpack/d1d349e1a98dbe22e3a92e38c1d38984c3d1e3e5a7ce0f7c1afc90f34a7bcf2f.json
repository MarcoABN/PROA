{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { PDFName, PDFArray, PDFDict, PDFHexString } from \"../core\";\n/**\n * Represents JavaScript that has been embedded in a [[PDFDocument]].\n */\nvar PDFJavaScript = /** @class */function () {\n  function PDFJavaScript(ref, doc, embedder) {\n    this.alreadyEmbedded = false;\n    this.ref = ref;\n    this.doc = doc;\n    this.embedder = embedder;\n  }\n  /**\n   * > **NOTE:** You probably don't need to call this method directly. The\n   * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\n   * > automatically ensure all JavaScripts get embedded.\n   *\n   * Embed this JavaScript in its document.\n   *\n   * @returns Resolves when the embedding is complete.\n   */\n  PDFJavaScript.prototype.embed = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, catalog, context, ref, Names, Javascript, JSNames;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!!this.alreadyEmbedded) return [3 /*break*/, 2];\n            _a = this.doc, catalog = _a.catalog, context = _a.context;\n            return [4 /*yield*/, this.embedder.embedIntoContext(this.doc.context, this.ref)];\n          case 1:\n            ref = _b.sent();\n            if (!catalog.has(PDFName.of('Names'))) {\n              catalog.set(PDFName.of('Names'), context.obj({}));\n            }\n            Names = catalog.lookup(PDFName.of('Names'), PDFDict);\n            if (!Names.has(PDFName.of('JavaScript'))) {\n              Names.set(PDFName.of('JavaScript'), context.obj({}));\n            }\n            Javascript = Names.lookup(PDFName.of('JavaScript'), PDFDict);\n            if (!Javascript.has(PDFName.of('Names'))) {\n              Javascript.set(PDFName.of('Names'), context.obj([]));\n            }\n            JSNames = Javascript.lookup(PDFName.of('Names'), PDFArray);\n            JSNames.push(PDFHexString.fromText(this.embedder.scriptName));\n            JSNames.push(ref);\n            this.alreadyEmbedded = true;\n            _b.label = 2;\n          case 2:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFDocument.addJavaScript]] method, which will\n   * create instances of [[PDFJavaScript]] for you.\n   *\n   * Create an instance of [[PDFJavaScript]] from an existing ref and script\n   *\n   * @param ref The unique reference for this script.\n   * @param doc The document to which the script will belong.\n   * @param embedder The embedder that will be used to embed the script.\n   */\n  PDFJavaScript.of = function (ref, doc, embedder) {\n    return new PDFJavaScript(ref, doc, embedder);\n  };\n  return PDFJavaScript;\n}();\nexport default PDFJavaScript;\n//# sourceMappingURL=PDFJavaScript.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}