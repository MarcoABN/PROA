{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFPage from \"../PDFPage\";\nimport PDFFont from \"../PDFFont\";\nimport { ImageAlignment } from \"../image/alignment\";\nimport { normalizeAppearance, defaultButtonAppearanceProvider } from \"./appearances\";\nimport PDFField, { assertFieldAppearanceOptions } from \"./PDFField\";\nimport { rgb } from \"../colors\";\nimport { degrees } from \"../rotations\";\nimport { PDFStream, PDFAcroPushButton } from \"../../core\";\nimport { assertIs, assertOrUndefined, assertPositive } from \"../../utils\";\n/**\n * Represents a button field of a [[PDFForm]].\n *\n * [[PDFButton]] fields are interactive controls that users can click with their\n * mouse. This type of [[PDFField]] is not stateful. The purpose of a button\n * is to perform an action when the user clicks on it, such as opening a print\n * modal or resetting the form. Buttons are typically rectangular in shape and\n * have a text label describing the action that they perform when clicked.\n */\nvar PDFButton = /** @class */function (_super) {\n  __extends(PDFButton, _super);\n  function PDFButton(acroPushButton, ref, doc) {\n    var _this = _super.call(this, acroPushButton, ref, doc) || this;\n    assertIs(acroPushButton, 'acroButton', [[PDFAcroPushButton, 'PDFAcroPushButton']]);\n    _this.acroField = acroPushButton;\n    return _this;\n  }\n  /**\n   * Display an image inside the bounds of this button's widgets. For example:\n   * ```js\n   * const pngImage = await pdfDoc.embedPng(...)\n   * const button = form.getButton('some.button.field')\n   * button.setImage(pngImage, ImageAlignment.Center)\n   * ```\n   * This will update the appearances streams for each of this button's widgets.\n   * @param image The image that should be displayed.\n   * @param alignment The alignment of the image.\n   */\n  PDFButton.prototype.setImage = function (image, alignment) {\n    if (alignment === void 0) {\n      alignment = ImageAlignment.Center;\n    }\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var streamRef = this.createImageAppearanceStream(widget, image, alignment);\n      this.updateWidgetAppearances(widget, {\n        normal: streamRef\n      });\n    }\n    this.markAsClean();\n  };\n  /**\n   * Set the font size for this field. Larger font sizes will result in larger\n   * text being displayed when PDF readers render this button. Font sizes may\n   * be integer or floating point numbers. Supplying a negative font size will\n   * cause this method to throw an error.\n   *\n   * For example:\n   * ```js\n   * const button = form.getButton('some.button.field')\n   * button.setFontSize(4)\n   * button.setFontSize(15.7)\n   * ```\n   *\n   * > This method depends upon the existence of a default appearance\n   * > (`/DA`) string. If this field does not have a default appearance string,\n   * > or that string does not contain a font size (via the `Tf` operator),\n   * > then this method will throw an error.\n   *\n   * @param fontSize The font size to be used when rendering text in this field.\n   */\n  PDFButton.prototype.setFontSize = function (fontSize) {\n    assertPositive(fontSize, 'fontSize');\n    this.acroField.setFontSize(fontSize);\n    this.markAsDirty();\n  };\n  /**\n   * Show this button on the specified page with the given text. For example:\n   * ```js\n   * const ubuntuFont = await pdfDoc.embedFont(ubuntuFontBytes)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const button = form.createButton('some.button.field')\n   *\n   * button.addToPage('Do Stuff', page, {\n   *   x: 50,\n   *   y: 75,\n   *   width: 200,\n   *   height: 100,\n   *   textColor: rgb(1, 0, 0),\n   *   backgroundColor: rgb(0, 1, 0),\n   *   borderColor: rgb(0, 0, 1),\n   *   borderWidth: 2,\n   *   rotate: degrees(90),\n   *   font: ubuntuFont,\n   * })\n   * ```\n   * This will create a new widget for this button field.\n   * @param text The text to be displayed for this button widget.\n   * @param page The page to which this button widget should be added.\n   * @param options The options to be used when adding this button widget.\n   */\n  PDFButton.prototype.addToPage = function (\n  // TODO: This needs to be optional, e.g. for image buttons\n  text, page, options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n    assertOrUndefined(text, 'text', ['string']);\n    assertOrUndefined(page, 'page', [[PDFPage, 'PDFPage']]);\n    assertFieldAppearanceOptions(options);\n    // Create a widget for this button\n    var widget = this.createWidget({\n      x: ((_a = options === null || options === void 0 ? void 0 : options.x) !== null && _a !== void 0 ? _a : 0) - ((_b = options === null || options === void 0 ? void 0 : options.borderWidth) !== null && _b !== void 0 ? _b : 0) / 2,\n      y: ((_c = options === null || options === void 0 ? void 0 : options.y) !== null && _c !== void 0 ? _c : 0) - ((_d = options === null || options === void 0 ? void 0 : options.borderWidth) !== null && _d !== void 0 ? _d : 0) / 2,\n      width: (_e = options === null || options === void 0 ? void 0 : options.width) !== null && _e !== void 0 ? _e : 100,\n      height: (_f = options === null || options === void 0 ? void 0 : options.height) !== null && _f !== void 0 ? _f : 50,\n      textColor: (_g = options === null || options === void 0 ? void 0 : options.textColor) !== null && _g !== void 0 ? _g : rgb(0, 0, 0),\n      backgroundColor: (_h = options === null || options === void 0 ? void 0 : options.backgroundColor) !== null && _h !== void 0 ? _h : rgb(0.75, 0.75, 0.75),\n      borderColor: options === null || options === void 0 ? void 0 : options.borderColor,\n      borderWidth: (_j = options === null || options === void 0 ? void 0 : options.borderWidth) !== null && _j !== void 0 ? _j : 0,\n      rotate: (_k = options === null || options === void 0 ? void 0 : options.rotate) !== null && _k !== void 0 ? _k : degrees(0),\n      caption: text,\n      hidden: options === null || options === void 0 ? void 0 : options.hidden,\n      page: page.ref\n    });\n    var widgetRef = this.doc.context.register(widget.dict);\n    // Add widget to this field\n    this.acroField.addWidget(widgetRef);\n    // Set appearance streams for widget\n    var font = (_l = options === null || options === void 0 ? void 0 : options.font) !== null && _l !== void 0 ? _l : this.doc.getForm().getDefaultFont();\n    this.updateWidgetAppearance(widget, font);\n    // Add widget to the given page\n    page.node.addAnnot(widgetRef);\n  };\n  /**\n   * Returns `true` if this button has been marked as dirty, or if any of this\n   * button's widgets do not have an appearance stream. For example:\n   * ```js\n   * const button = form.getButton('some.button.field')\n   * if (button.needsAppearancesUpdate()) console.log('Needs update')\n   * ```\n   * @returns Whether or not this button needs an appearance update.\n   */\n  PDFButton.prototype.needsAppearancesUpdate = function () {\n    var _a;\n    if (this.isDirty()) return true;\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var hasAppearances = ((_a = widget.getAppearances()) === null || _a === void 0 ? void 0 : _a.normal) instanceof PDFStream;\n      if (!hasAppearances) return true;\n    }\n    return false;\n  };\n  /**\n   * Update the appearance streams for each of this button's widgets using\n   * the default appearance provider for buttons. For example:\n   * ```js\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const button = form.getButton('some.button.field')\n   * button.defaultUpdateAppearances(helvetica)\n   * ```\n   * @param font The font to be used for creating the appearance streams.\n   */\n  PDFButton.prototype.defaultUpdateAppearances = function (font) {\n    assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n    this.updateAppearances(font);\n  };\n  /**\n   * Update the appearance streams for each of this button's widgets using\n   * the given appearance provider. If no `provider` is passed, the default\n   * appearance provider for buttons will be used. For example:\n   * ```js\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const button = form.getButton('some.button.field')\n   * button.updateAppearances(helvetica, (field, widget, font) => {\n   *   ...\n   *   return {\n   *     normal: drawButton(...),\n   *     down: drawButton(...),\n   *   }\n   * })\n   * ```\n   * @param font The font to be used for creating the appearance streams.\n   * @param provider Optionally, the appearance provider to be used for\n   *                 generating the contents of the appearance streams.\n   */\n  PDFButton.prototype.updateAppearances = function (font, provider) {\n    assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n    assertOrUndefined(provider, 'provider', [Function]);\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      this.updateWidgetAppearance(widget, font, provider);\n    }\n  };\n  PDFButton.prototype.updateWidgetAppearance = function (widget, font, provider) {\n    var apProvider = provider !== null && provider !== void 0 ? provider : defaultButtonAppearanceProvider;\n    var appearances = normalizeAppearance(apProvider(this, widget, font));\n    this.updateWidgetAppearanceWithFont(widget, font, appearances);\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFForm.getButton]] method, which will create an\n   * > instance of [[PDFButton]] for you.\n   *\n   * Create an instance of [[PDFButton]] from an existing acroPushButton and ref\n   *\n   * @param acroPushButton The underlying `PDFAcroPushButton` for this button.\n   * @param ref The unique reference for this button.\n   * @param doc The document to which this button will belong.\n   */\n  PDFButton.of = function (acroPushButton, ref, doc) {\n    return new PDFButton(acroPushButton, ref, doc);\n  };\n  return PDFButton;\n}(PDFField);\nexport default PDFButton;","map":{"version":3,"names":["__extends","PDFPage","PDFFont","ImageAlignment","normalizeAppearance","defaultButtonAppearanceProvider","PDFField","assertFieldAppearanceOptions","rgb","degrees","PDFStream","PDFAcroPushButton","assertIs","assertOrUndefined","assertPositive","PDFButton","_super","acroPushButton","ref","doc","_this","call","acroField","prototype","setImage","image","alignment","Center","widgets","getWidgets","idx","len","length","widget","streamRef","createImageAppearanceStream","updateWidgetAppearances","normal","markAsClean","setFontSize","fontSize","markAsDirty","addToPage","text","page","options","_a","_b","_c","_d","_e","_f","_g","_h","_j","_k","_l","createWidget","x","borderWidth","y","width","height","textColor","backgroundColor","borderColor","rotate","caption","hidden","widgetRef","context","register","dict","addWidget","font","getForm","getDefaultFont","updateWidgetAppearance","node","addAnnot","needsAppearancesUpdate","isDirty","hasAppearances","getAppearances","defaultUpdateAppearances","updateAppearances","provider","Function","apProvider","appearances","updateWidgetAppearanceWithFont","of"],"sources":["E:/PROA/frontPROA/node_modules/pdf-lib/es/api/form/PDFButton.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport PDFPage from \"../PDFPage\";\nimport PDFFont from \"../PDFFont\";\nimport { ImageAlignment } from \"../image/alignment\";\nimport { normalizeAppearance, defaultButtonAppearanceProvider, } from \"./appearances\";\nimport PDFField, { assertFieldAppearanceOptions, } from \"./PDFField\";\nimport { rgb } from \"../colors\";\nimport { degrees } from \"../rotations\";\nimport { PDFStream, PDFAcroPushButton, } from \"../../core\";\nimport { assertIs, assertOrUndefined, assertPositive } from \"../../utils\";\n/**\n * Represents a button field of a [[PDFForm]].\n *\n * [[PDFButton]] fields are interactive controls that users can click with their\n * mouse. This type of [[PDFField]] is not stateful. The purpose of a button\n * is to perform an action when the user clicks on it, such as opening a print\n * modal or resetting the form. Buttons are typically rectangular in shape and\n * have a text label describing the action that they perform when clicked.\n */\nvar PDFButton = /** @class */ (function (_super) {\n    __extends(PDFButton, _super);\n    function PDFButton(acroPushButton, ref, doc) {\n        var _this = _super.call(this, acroPushButton, ref, doc) || this;\n        assertIs(acroPushButton, 'acroButton', [\n            [PDFAcroPushButton, 'PDFAcroPushButton'],\n        ]);\n        _this.acroField = acroPushButton;\n        return _this;\n    }\n    /**\n     * Display an image inside the bounds of this button's widgets. For example:\n     * ```js\n     * const pngImage = await pdfDoc.embedPng(...)\n     * const button = form.getButton('some.button.field')\n     * button.setImage(pngImage, ImageAlignment.Center)\n     * ```\n     * This will update the appearances streams for each of this button's widgets.\n     * @param image The image that should be displayed.\n     * @param alignment The alignment of the image.\n     */\n    PDFButton.prototype.setImage = function (image, alignment) {\n        if (alignment === void 0) { alignment = ImageAlignment.Center; }\n        var widgets = this.acroField.getWidgets();\n        for (var idx = 0, len = widgets.length; idx < len; idx++) {\n            var widget = widgets[idx];\n            var streamRef = this.createImageAppearanceStream(widget, image, alignment);\n            this.updateWidgetAppearances(widget, { normal: streamRef });\n        }\n        this.markAsClean();\n    };\n    /**\n     * Set the font size for this field. Larger font sizes will result in larger\n     * text being displayed when PDF readers render this button. Font sizes may\n     * be integer or floating point numbers. Supplying a negative font size will\n     * cause this method to throw an error.\n     *\n     * For example:\n     * ```js\n     * const button = form.getButton('some.button.field')\n     * button.setFontSize(4)\n     * button.setFontSize(15.7)\n     * ```\n     *\n     * > This method depends upon the existence of a default appearance\n     * > (`/DA`) string. If this field does not have a default appearance string,\n     * > or that string does not contain a font size (via the `Tf` operator),\n     * > then this method will throw an error.\n     *\n     * @param fontSize The font size to be used when rendering text in this field.\n     */\n    PDFButton.prototype.setFontSize = function (fontSize) {\n        assertPositive(fontSize, 'fontSize');\n        this.acroField.setFontSize(fontSize);\n        this.markAsDirty();\n    };\n    /**\n     * Show this button on the specified page with the given text. For example:\n     * ```js\n     * const ubuntuFont = await pdfDoc.embedFont(ubuntuFontBytes)\n     * const page = pdfDoc.addPage()\n     *\n     * const form = pdfDoc.getForm()\n     * const button = form.createButton('some.button.field')\n     *\n     * button.addToPage('Do Stuff', page, {\n     *   x: 50,\n     *   y: 75,\n     *   width: 200,\n     *   height: 100,\n     *   textColor: rgb(1, 0, 0),\n     *   backgroundColor: rgb(0, 1, 0),\n     *   borderColor: rgb(0, 0, 1),\n     *   borderWidth: 2,\n     *   rotate: degrees(90),\n     *   font: ubuntuFont,\n     * })\n     * ```\n     * This will create a new widget for this button field.\n     * @param text The text to be displayed for this button widget.\n     * @param page The page to which this button widget should be added.\n     * @param options The options to be used when adding this button widget.\n     */\n    PDFButton.prototype.addToPage = function (\n    // TODO: This needs to be optional, e.g. for image buttons\n    text, page, options) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n        assertOrUndefined(text, 'text', ['string']);\n        assertOrUndefined(page, 'page', [[PDFPage, 'PDFPage']]);\n        assertFieldAppearanceOptions(options);\n        // Create a widget for this button\n        var widget = this.createWidget({\n            x: ((_a = options === null || options === void 0 ? void 0 : options.x) !== null && _a !== void 0 ? _a : 0) - ((_b = options === null || options === void 0 ? void 0 : options.borderWidth) !== null && _b !== void 0 ? _b : 0) / 2,\n            y: ((_c = options === null || options === void 0 ? void 0 : options.y) !== null && _c !== void 0 ? _c : 0) - ((_d = options === null || options === void 0 ? void 0 : options.borderWidth) !== null && _d !== void 0 ? _d : 0) / 2,\n            width: (_e = options === null || options === void 0 ? void 0 : options.width) !== null && _e !== void 0 ? _e : 100,\n            height: (_f = options === null || options === void 0 ? void 0 : options.height) !== null && _f !== void 0 ? _f : 50,\n            textColor: (_g = options === null || options === void 0 ? void 0 : options.textColor) !== null && _g !== void 0 ? _g : rgb(0, 0, 0),\n            backgroundColor: (_h = options === null || options === void 0 ? void 0 : options.backgroundColor) !== null && _h !== void 0 ? _h : rgb(0.75, 0.75, 0.75),\n            borderColor: options === null || options === void 0 ? void 0 : options.borderColor,\n            borderWidth: (_j = options === null || options === void 0 ? void 0 : options.borderWidth) !== null && _j !== void 0 ? _j : 0,\n            rotate: (_k = options === null || options === void 0 ? void 0 : options.rotate) !== null && _k !== void 0 ? _k : degrees(0),\n            caption: text,\n            hidden: options === null || options === void 0 ? void 0 : options.hidden,\n            page: page.ref,\n        });\n        var widgetRef = this.doc.context.register(widget.dict);\n        // Add widget to this field\n        this.acroField.addWidget(widgetRef);\n        // Set appearance streams for widget\n        var font = (_l = options === null || options === void 0 ? void 0 : options.font) !== null && _l !== void 0 ? _l : this.doc.getForm().getDefaultFont();\n        this.updateWidgetAppearance(widget, font);\n        // Add widget to the given page\n        page.node.addAnnot(widgetRef);\n    };\n    /**\n     * Returns `true` if this button has been marked as dirty, or if any of this\n     * button's widgets do not have an appearance stream. For example:\n     * ```js\n     * const button = form.getButton('some.button.field')\n     * if (button.needsAppearancesUpdate()) console.log('Needs update')\n     * ```\n     * @returns Whether or not this button needs an appearance update.\n     */\n    PDFButton.prototype.needsAppearancesUpdate = function () {\n        var _a;\n        if (this.isDirty())\n            return true;\n        var widgets = this.acroField.getWidgets();\n        for (var idx = 0, len = widgets.length; idx < len; idx++) {\n            var widget = widgets[idx];\n            var hasAppearances = ((_a = widget.getAppearances()) === null || _a === void 0 ? void 0 : _a.normal) instanceof PDFStream;\n            if (!hasAppearances)\n                return true;\n        }\n        return false;\n    };\n    /**\n     * Update the appearance streams for each of this button's widgets using\n     * the default appearance provider for buttons. For example:\n     * ```js\n     * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n     * const button = form.getButton('some.button.field')\n     * button.defaultUpdateAppearances(helvetica)\n     * ```\n     * @param font The font to be used for creating the appearance streams.\n     */\n    PDFButton.prototype.defaultUpdateAppearances = function (font) {\n        assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n        this.updateAppearances(font);\n    };\n    /**\n     * Update the appearance streams for each of this button's widgets using\n     * the given appearance provider. If no `provider` is passed, the default\n     * appearance provider for buttons will be used. For example:\n     * ```js\n     * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n     * const button = form.getButton('some.button.field')\n     * button.updateAppearances(helvetica, (field, widget, font) => {\n     *   ...\n     *   return {\n     *     normal: drawButton(...),\n     *     down: drawButton(...),\n     *   }\n     * })\n     * ```\n     * @param font The font to be used for creating the appearance streams.\n     * @param provider Optionally, the appearance provider to be used for\n     *                 generating the contents of the appearance streams.\n     */\n    PDFButton.prototype.updateAppearances = function (font, provider) {\n        assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n        assertOrUndefined(provider, 'provider', [Function]);\n        var widgets = this.acroField.getWidgets();\n        for (var idx = 0, len = widgets.length; idx < len; idx++) {\n            var widget = widgets[idx];\n            this.updateWidgetAppearance(widget, font, provider);\n        }\n    };\n    PDFButton.prototype.updateWidgetAppearance = function (widget, font, provider) {\n        var apProvider = provider !== null && provider !== void 0 ? provider : defaultButtonAppearanceProvider;\n        var appearances = normalizeAppearance(apProvider(this, widget, font));\n        this.updateWidgetAppearanceWithFont(widget, font, appearances);\n    };\n    /**\n     * > **NOTE:** You probably don't want to call this method directly. Instead,\n     * > consider using the [[PDFForm.getButton]] method, which will create an\n     * > instance of [[PDFButton]] for you.\n     *\n     * Create an instance of [[PDFButton]] from an existing acroPushButton and ref\n     *\n     * @param acroPushButton The underlying `PDFAcroPushButton` for this button.\n     * @param ref The unique reference for this button.\n     * @param doc The document to which this button will belong.\n     */\n    PDFButton.of = function (acroPushButton, ref, doc) { return new PDFButton(acroPushButton, ref, doc); };\n    return PDFButton;\n}(PDFField));\nexport default PDFButton;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}