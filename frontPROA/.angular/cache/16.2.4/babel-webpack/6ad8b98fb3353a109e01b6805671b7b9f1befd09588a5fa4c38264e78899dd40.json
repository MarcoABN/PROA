{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class FrontClienteService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    //private url = \"http://localhost:8080/ccliente/cliente\";\n    this.url = \"http://localhost:8080/ccliente/cliente\";\n    this.url2 = \"http://localhost:8080/ccliente/cpfcnpj\";\n    this.url3 = \"http://localhost:8080/ccliente/representantes\";\n  }\n  //Listar Clientes a partir do metodo API REST que tem na URL acima\n  listarClientes() {\n    return this.httpClient.get(`${this.url}`);\n  }\n  //Serviço para consulta do Cliente\n  consultarCliente(IDCliente) {\n    return this.httpClient.get(`${this.url}/${IDCliente}`);\n  }\n  //Consultar por CPFCNPJ\n  consultarClienteCPFCNPJ(CPFCNPJ) {\n    return this.httpClient.get(`${this.url2}/${CPFCNPJ}`);\n  }\n  //Servico para incluir uma Cliente\n  cadastrarCliente(cliente) {\n    return this.httpClient.post(`${this.url}`, cliente);\n  }\n  //Servico para Alterar uma Cliente\n  alterarCliente(IDCliente, cliente) {\n    console.log(\"Teste: \", cliente.dataNasc);\n    return this.httpClient.put(`${this.url}/${IDCliente}`, cliente);\n  }\n  //Servico para Excluir uma Cliente\n  excluirCliente(IDCliente) {\n    return this.httpClient.delete(`${this.url}/${IDCliente}`);\n  }\n  //Consultar por CPFCNPJ\n  consultarRepresentantes(idEmpresa) {\n    return this.httpClient.get(`${this.url3}/${idEmpresa}`);\n  }\n  static #_ = this.ɵfac = function FrontClienteService_Factory(t) {\n    return new (t || FrontClienteService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FrontClienteService,\n    factory: FrontClienteService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["FrontClienteService","constructor","httpClient","url","url2","url3","listarClientes","get","consultarCliente","IDCliente","consultarClienteCPFCNPJ","CPFCNPJ","cadastrarCliente","cliente","post","alterarCliente","console","log","dataNasc","put","excluirCliente","delete","consultarRepresentantes","idEmpresa","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["E:\\PROA\\frontPROA\\src\\app\\services\\front-cliente.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport { Cliente } from '../model/cliente';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FrontClienteService {\r\n\r\n  //private url = \"http://localhost:8080/ccliente/cliente\";\r\n\r\n  private url = \"http://localhost:8080/ccliente/cliente\";\r\n  private url2 = \"http://localhost:8080/ccliente/cpfcnpj\";\r\n  private url3 = \"http://localhost:8080/ccliente/representantes\";\r\n\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n   //Listar Clientes a partir do metodo API REST que tem na URL acima\r\n   listarClientes(): Observable<Cliente[]>{\r\n    return this.httpClient.get<Cliente[]>(`${this.url}`)\r\n  }\r\n\r\n  //Serviço para consulta do Cliente\r\n  consultarCliente(IDCliente: number): Observable<Cliente>{\r\n    return this.httpClient.get<Cliente>(`${this.url}/${IDCliente}`);\r\n  }\r\n\r\n  //Consultar por CPFCNPJ\r\n  consultarClienteCPFCNPJ(CPFCNPJ: string): Observable<Cliente>{\r\n    return this.httpClient.get<Cliente>(`${this.url2}/${CPFCNPJ}`);\r\n  }\r\n\r\n  //Servico para incluir uma Cliente\r\n  cadastrarCliente(cliente: Cliente): Observable<object>{\r\n    return this.httpClient.post(`${this.url}`, cliente);\r\n  }\r\n\r\n  //Servico para Alterar uma Cliente\r\n  alterarCliente(IDCliente: number, cliente: Cliente): Observable<Object>{\r\n    console.log(\"Teste: \", cliente.dataNasc);\r\n    return this.httpClient.put(`${this.url}/${IDCliente}`, cliente);\r\n  }\r\n\r\n  //Servico para Excluir uma Cliente\r\n  excluirCliente(IDCliente: number): Observable<Object>{\r\n    return this.httpClient.delete<Cliente>(`${this.url}/${IDCliente}`);\r\n\r\n  }\r\n\r\n  //Consultar por CPFCNPJ\r\n  consultarRepresentantes(idEmpresa: number): Observable<Cliente[]> {\r\n    return this.httpClient.get<Cliente[]>(`${this.url3}/${idEmpresa}`);\r\n  }\r\n  \r\n\r\n}"],"mappings":";;AASA,OAAM,MAAOA,mBAAmB;EAQ9BC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAN9B;IAEQ,KAAAC,GAAG,GAAG,wCAAwC;IAC9C,KAAAC,IAAI,GAAG,wCAAwC;IAC/C,KAAAC,IAAI,GAAG,+CAA+C;EAEhB;EAE7C;EACAC,cAAcA,CAAA;IACb,OAAO,IAAI,CAACJ,UAAU,CAACK,GAAG,CAAY,GAAG,IAAI,CAACJ,GAAG,EAAE,CAAC;EACtD;EAEA;EACAK,gBAAgBA,CAACC,SAAiB;IAChC,OAAO,IAAI,CAACP,UAAU,CAACK,GAAG,CAAU,GAAG,IAAI,CAACJ,GAAG,IAAIM,SAAS,EAAE,CAAC;EACjE;EAEA;EACAC,uBAAuBA,CAACC,OAAe;IACrC,OAAO,IAAI,CAACT,UAAU,CAACK,GAAG,CAAU,GAAG,IAAI,CAACH,IAAI,IAAIO,OAAO,EAAE,CAAC;EAChE;EAEA;EACAC,gBAAgBA,CAACC,OAAgB;IAC/B,OAAO,IAAI,CAACX,UAAU,CAACY,IAAI,CAAC,GAAG,IAAI,CAACX,GAAG,EAAE,EAAEU,OAAO,CAAC;EACrD;EAEA;EACAE,cAAcA,CAACN,SAAiB,EAAEI,OAAgB;IAChDG,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEJ,OAAO,CAACK,QAAQ,CAAC;IACxC,OAAO,IAAI,CAAChB,UAAU,CAACiB,GAAG,CAAC,GAAG,IAAI,CAAChB,GAAG,IAAIM,SAAS,EAAE,EAAEI,OAAO,CAAC;EACjE;EAEA;EACAO,cAAcA,CAACX,SAAiB;IAC9B,OAAO,IAAI,CAACP,UAAU,CAACmB,MAAM,CAAU,GAAG,IAAI,CAAClB,GAAG,IAAIM,SAAS,EAAE,CAAC;EAEpE;EAEA;EACAa,uBAAuBA,CAACC,SAAiB;IACvC,OAAO,IAAI,CAACrB,UAAU,CAACK,GAAG,CAAY,GAAG,IAAI,CAACF,IAAI,IAAIkB,SAAS,EAAE,CAAC;EACpE;EAAC,QAAAC,CAAA,G;qBA7CUxB,mBAAmB,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAnB7B,mBAAmB;IAAA8B,OAAA,EAAnB9B,mBAAmB,CAAA+B,IAAA;IAAAC,UAAA,EAFlB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}