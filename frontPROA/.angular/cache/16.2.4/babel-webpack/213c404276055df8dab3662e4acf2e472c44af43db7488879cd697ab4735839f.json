{"ast":null,"code":"import { toHexString } from \"./strings\";\n/**\r\n * Encodes a string to UTF-8.\r\n *\r\n * @param input The string to be encoded.\r\n * @param byteOrderMark Whether or not a byte order marker (BOM) should be added\r\n *                      to the start of the encoding. (default `true`)\r\n * @returns A Uint8Array containing the UTF-8 encoding of the input string.\r\n *\r\n * -----------------------------------------------------------------------------\r\n *\r\n * JavaScript strings are composed of Unicode code points. Code points are\r\n * integers in the range 0 to 1,114,111 (0x10FFFF). When serializing a string,\r\n * it must be encoded as a sequence of words. A word is typically 8, 16, or 32\r\n * bytes in size. As such, Unicode defines three encoding forms: UTF-8, UTF-16,\r\n * and UTF-32. These encoding forms are described in the Unicode standard [1].\r\n * This function implements the UTF-8 encoding form.\r\n *\r\n * -----------------------------------------------------------------------------\r\n *\r\n * In UTF-8, each code point is mapped to a sequence of 1, 2, 3, or 4 bytes.\r\n * Note that the logic which defines this mapping is slightly convoluted, and\r\n * not as straightforward as the mapping logic for UTF-16 or UTF-32. The UTF-8\r\n * mapping logic is as follows [2]:\r\n *\r\n * â€¢ If a code point is in the range U+0000..U+007F, then view it as a 7-bit\r\n *   integer: 0bxxxxxxx. Map the code point to 1 byte with the first high order\r\n *   bit set to 0:\r\n *\r\n *       b1=0b0xxxxxxx\r\n *\r\n * â€¢ If a code point is in the range U+0080..U+07FF, then view it as an 11-bit\r\n *   integer: 0byyyyyxxxxxx. Map the code point to 2 bytes with the first 5 bits\r\n *   of the code point stored in the first byte, and the last 6 bits stored in\r\n *   the second byte:\r\n *\r\n *       b1=0b110yyyyy    b2=0b10xxxxxx\r\n *\r\n * â€¢ If a code point is in the range U+0800..U+FFFF, then view it as a 16-bit\r\n *   integer, 0bzzzzyyyyyyxxxxxx. Map the code point to 3 bytes with the first\r\n *   4 bits stored in the first byte, the next 6 bits stored in the second byte,\r\n *   and the last 6 bits in the third byte:\r\n *\r\n *       b1=0b1110zzzz    b2=0b10yyyyyy    b3=0b10xxxxxx\r\n *\r\n * â€¢ If a code point is in the range U+10000...U+10FFFF, then view it as a\r\n *   21-bit integer, 0bvvvzzzzzzyyyyyyxxxxxx. Map the code point to 4 bytes with\r\n *   the first 3 bits stored in the first byte, the next 6 bits stored in the\r\n *   second byte, the next 6 bits stored in the third byte, and the last 6 bits\r\n *   stored in the fourth byte:\r\n *\r\n *       b1=0b11110xxx    b2=0b10zzzzzz    b3=0b10yyyyyy    b4=0b10xxxxxx\r\n *\r\n * -----------------------------------------------------------------------------\r\n *\r\n * It is important to note, when iterating through the code points of a string\r\n * in JavaScript, that if a character is encoded as a surrogate pair it will\r\n * increase the string's length by 2 instead of 1 [4]. For example:\r\n *\r\n * ```\r\n * > 'a'.length\r\n * 1\r\n * > 'ðŸ’©'.length\r\n * 2\r\n * > 'èªž'.length\r\n * 1\r\n * > 'aðŸ’©èªž'.length\r\n * 4\r\n * ```\r\n *\r\n * The results of the above example are explained by the fact that the\r\n * characters 'a' and 'èªž' are not represented by surrogate pairs, but 'ðŸ’©' is.\r\n *\r\n * Because of this idiosyncrasy in JavaScript's string implementation and APIs,\r\n * we must \"jump\" an extra index after encoding a character as a surrogate\r\n * pair. In practice, this means we must increment the index of our for loop by\r\n * 2 if we encode a surrogate pair, and 1 in all other cases.\r\n *\r\n * -----------------------------------------------------------------------------\r\n *\r\n * References:\r\n *   - [1] https://www.unicode.org/versions/Unicode12.0.0/UnicodeStandard-12.0.pdf\r\n *         3.9  Unicode Encoding Forms - UTF-8\r\n *   - [2] http://www.herongyang.com/Unicode/UTF-8-UTF-8-Encoding.html\r\n *   - [3] http://www.herongyang.com/Unicode/UTF-8-UTF-8-Encoding-Algorithm.html\r\n *   - [4] https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length#Description\r\n *\r\n */\nexport var utf8Encode = function (input, byteOrderMark) {\n  if (byteOrderMark === void 0) {\n    byteOrderMark = true;\n  }\n  var encoded = [];\n  if (byteOrderMark) encoded.push(0xef, 0xbb, 0xbf);\n  for (var idx = 0, len = input.length; idx < len;) {\n    var codePoint = input.codePointAt(idx);\n    // One byte encoding\n    if (codePoint < 0x80) {\n      var byte1 = codePoint & 0x7f;\n      encoded.push(byte1);\n      idx += 1;\n    }\n    // Two byte encoding\n    else if (codePoint < 0x0800) {\n      var byte1 = codePoint >> 6 & 0x1f | 0xc0;\n      var byte2 = codePoint & 0x3f | 0x80;\n      encoded.push(byte1, byte2);\n      idx += 1;\n    }\n    // Three byte encoding\n    else if (codePoint < 0x010000) {\n      var byte1 = codePoint >> 12 & 0x0f | 0xe0;\n      var byte2 = codePoint >> 6 & 0x3f | 0x80;\n      var byte3 = codePoint & 0x3f | 0x80;\n      encoded.push(byte1, byte2, byte3);\n      idx += 1;\n    }\n    // Four byte encoding (surrogate pair)\n    else if (codePoint < 0x110000) {\n      var byte1 = codePoint >> 18 & 0x07 | 0xf0;\n      var byte2 = codePoint >> 12 & 0x3f | 0x80;\n      var byte3 = codePoint >> 6 & 0x3f | 0x80;\n      var byte4 = codePoint >> 0 & 0x3f | 0x80;\n      encoded.push(byte1, byte2, byte3, byte4);\n      idx += 2;\n    }\n    // Should never reach this case\n    else throw new Error(\"Invalid code point: 0x\" + toHexString(codePoint));\n  }\n  return new Uint8Array(encoded);\n};\n/**\r\n * Encodes a string to UTF-16.\r\n *\r\n * @param input The string to be encoded.\r\n * @param byteOrderMark Whether or not a byte order marker (BOM) should be added\r\n *                      to the start of the encoding. (default `true`)\r\n * @returns A Uint16Array containing the UTF-16 encoding of the input string.\r\n *\r\n * -----------------------------------------------------------------------------\r\n *\r\n * JavaScript strings are composed of Unicode code points. Code points are\r\n * integers in the range 0 to 1,114,111 (0x10FFFF). When serializing a string,\r\n * it must be encoded as a sequence of words. A word is typically 8, 16, or 32\r\n * bytes in size. As such, Unicode defines three encoding forms: UTF-8, UTF-16,\r\n * and UTF-32. These encoding forms are described in the Unicode standard [1].\r\n * This function implements the UTF-16 encoding form.\r\n *\r\n * -----------------------------------------------------------------------------\r\n *\r\n * In UTF-16, each code point is mapped to one or two 16-bit integers. The\r\n * UTF-16 mapping logic is as follows [2]:\r\n *\r\n * â€¢ If a code point is in the range U+0000..U+FFFF, then map the code point to\r\n *   a 16-bit integer with the most significant byte first.\r\n *\r\n * â€¢ If a code point is in the range U+10000..U+10000, then map the code point\r\n *   to two 16-bit integers. The first integer should contain the high surrogate\r\n *   and the second integer should contain the low surrogate. Both surrogates\r\n *   should be written with the most significant byte first.\r\n *\r\n * -----------------------------------------------------------------------------\r\n *\r\n * It is important to note, when iterating through the code points of a string\r\n * in JavaScript, that if a character is encoded as a surrogate pair it will\r\n * increase the string's length by 2 instead of 1 [4]. For example:\r\n *\r\n * ```\r\n * > 'a'.length\r\n * 1\r\n * > 'ðŸ’©'.length\r\n * 2\r\n * > 'èªž'.length\r\n * 1\r\n * > 'aðŸ’©èªž'.length\r\n * 4\r\n * ```\r\n *\r\n * The results of the above example are explained by the fact that the\r\n * characters 'a' and 'èªž' are not represented by surrogate pairs, but 'ðŸ’©' is.\r\n *\r\n * Because of this idiosyncrasy in JavaScript's string implementation and APIs,\r\n * we must \"jump\" an extra index after encoding a character as a surrogate\r\n * pair. In practice, this means we must increment the index of our for loop by\r\n * 2 if we encode a surrogate pair, and 1 in all other cases.\r\n *\r\n * -----------------------------------------------------------------------------\r\n *\r\n * References:\r\n *   - [1] https://www.unicode.org/versions/Unicode12.0.0/UnicodeStandard-12.0.pdf\r\n *         3.9  Unicode Encoding Forms - UTF-8\r\n *   - [2] http://www.herongyang.com/Unicode/UTF-16-UTF-16-Encoding.html\r\n *   - [3] https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length#Description\r\n *\r\n */\nexport var utf16Encode = function (input, byteOrderMark) {\n  if (byteOrderMark === void 0) {\n    byteOrderMark = true;\n  }\n  var encoded = [];\n  if (byteOrderMark) encoded.push(0xfeff);\n  for (var idx = 0, len = input.length; idx < len;) {\n    var codePoint = input.codePointAt(idx);\n    // Two byte encoding\n    if (codePoint < 0x010000) {\n      encoded.push(codePoint);\n      idx += 1;\n    }\n    // Four byte encoding (surrogate pair)\n    else if (codePoint < 0x110000) {\n      encoded.push(highSurrogate(codePoint), lowSurrogate(codePoint));\n      idx += 2;\n    }\n    // Should never reach this case\n    else throw new Error(\"Invalid code point: 0x\" + toHexString(codePoint));\n  }\n  return new Uint16Array(encoded);\n};\n/**\r\n * Returns `true` if the `codePoint` is within the\r\n * Basic Multilingual Plane (BMP). Code points inside the BMP are not encoded\r\n * with surrogate pairs.\r\n * @param codePoint The code point to be evaluated.\r\n *\r\n * Reference: https://en.wikipedia.org/wiki/UTF-16#Description\r\n */\nexport var isWithinBMP = function (codePoint) {\n  return codePoint >= 0 && codePoint <= 0xffff;\n};\n/**\r\n * Returns `true` if the given `codePoint` is valid and must be represented\r\n * with a surrogate pair when encoded.\r\n * @param codePoint The code point to be evaluated.\r\n *\r\n * Reference: https://en.wikipedia.org/wiki/UTF-16#Description\r\n */\nexport var hasSurrogates = function (codePoint) {\n  return codePoint >= 0x010000 && codePoint <= 0x10ffff;\n};\n// From Unicode 3.0 spec, section 3.7:\n//   http://unicode.org/versions/Unicode3.0.0/ch03.pdf\nexport var highSurrogate = function (codePoint) {\n  return Math.floor((codePoint - 0x10000) / 0x400) + 0xd800;\n};\n// From Unicode 3.0 spec, section 3.7:\n//   http://unicode.org/versions/Unicode3.0.0/ch03.pdf\nexport var lowSurrogate = function (codePoint) {\n  return (codePoint - 0x10000) % 0x400 + 0xdc00;\n};\nvar ByteOrder = /*#__PURE__*/function (ByteOrder) {\n  ByteOrder[\"BigEndian\"] = \"BigEndian\";\n  ByteOrder[\"LittleEndian\"] = \"LittleEndian\";\n  return ByteOrder;\n}(ByteOrder || {});\nvar REPLACEMENT = 'ï¿½'.codePointAt(0);\n/**\r\n * Decodes a Uint8Array of data to a string using UTF-16.\r\n *\r\n * Note that this function attempts to recover from erronous input by\r\n * inserting the replacement character (ï¿½) to mark invalid code points\r\n * and surrogate pairs.\r\n *\r\n * @param input A Uint8Array containing UTF-16 encoded data\r\n * @param byteOrderMark Whether or not a byte order marker (BOM) should be read\r\n *                      at the start of the encoding. (default `true`)\r\n * @returns The decoded string.\r\n */\nexport var utf16Decode = function (input, byteOrderMark) {\n  if (byteOrderMark === void 0) {\n    byteOrderMark = true;\n  }\n  // Need at least 2 bytes of data in UTF-16 encodings\n  if (input.length <= 1) return String.fromCodePoint(REPLACEMENT);\n  var byteOrder = byteOrderMark ? readBOM(input) : ByteOrder.BigEndian;\n  // Skip byte order mark if needed\n  var idx = byteOrderMark ? 2 : 0;\n  var codePoints = [];\n  while (input.length - idx >= 2) {\n    var first = decodeValues(input[idx++], input[idx++], byteOrder);\n    if (isHighSurrogate(first)) {\n      if (input.length - idx < 2) {\n        // Need at least 2 bytes left for the low surrogate that is required\n        codePoints.push(REPLACEMENT);\n      } else {\n        var second = decodeValues(input[idx++], input[idx++], byteOrder);\n        if (isLowSurrogate(second)) {\n          codePoints.push(first, second);\n        } else {\n          // Low surrogates should always follow high surrogates\n          codePoints.push(REPLACEMENT);\n        }\n      }\n    } else if (isLowSurrogate(first)) {\n      // High surrogates should always come first since `decodeValues()`\n      // accounts for the byte ordering\n      idx += 2;\n      codePoints.push(REPLACEMENT);\n    } else {\n      codePoints.push(first);\n    }\n  }\n  // There shouldn't be extra byte(s) left over\n  if (idx < input.length) codePoints.push(REPLACEMENT);\n  return String.fromCodePoint.apply(String, codePoints);\n};\n/**\r\n * Returns `true` if the given `codePoint` is a high surrogate.\r\n * @param codePoint The code point to be evaluated.\r\n *\r\n * Reference: https://en.wikipedia.org/wiki/UTF-16#Description\r\n */\nvar isHighSurrogate = function (codePoint) {\n  return codePoint >= 0xd800 && codePoint <= 0xdbff;\n};\n/**\r\n * Returns `true` if the given `codePoint` is a low surrogate.\r\n * @param codePoint The code point to be evaluated.\r\n *\r\n * Reference: https://en.wikipedia.org/wiki/UTF-16#Description\r\n */\nvar isLowSurrogate = function (codePoint) {\n  return codePoint >= 0xdc00 && codePoint <= 0xdfff;\n};\n/**\r\n * Decodes the given utf-16 values first and second using the specified\r\n * byte order.\r\n * @param first The first byte of the encoding.\r\n * @param second The second byte of the encoding.\r\n * @param byteOrder The byte order of the encoding.\r\n * Reference: https://en.wikipedia.org/wiki/UTF-16#Examples\r\n */\nvar decodeValues = function (first, second, byteOrder) {\n  // Append the binary representation of the preceding byte by shifting the\n  // first one 8 to the left and than applying a bitwise or-operator to append\n  // the second one.\n  if (byteOrder === ByteOrder.LittleEndian) return second << 8 | first;\n  if (byteOrder === ByteOrder.BigEndian) return first << 8 | second;\n  throw new Error(\"Invalid byteOrder: \" + byteOrder);\n};\n/**\r\n * Returns whether the given array contains a byte order mark for the\r\n * UTF-16BE or UTF-16LE encoding. If it has neither, BigEndian is assumed.\r\n *\r\n * Reference: https://en.wikipedia.org/wiki/Byte_order_mark#UTF-16\r\n *\r\n * @param bytes The byte array to be evaluated.\r\n */\n// prettier-ignore\nvar readBOM = function (bytes) {\n  return hasUtf16BigEndianBOM(bytes) ? ByteOrder.BigEndian : hasUtf16LittleEndianBOM(bytes) ? ByteOrder.LittleEndian : ByteOrder.BigEndian;\n};\nvar hasUtf16BigEndianBOM = function (bytes) {\n  return bytes[0] === 0xfe && bytes[1] === 0xff;\n};\nvar hasUtf16LittleEndianBOM = function (bytes) {\n  return bytes[0] === 0xff && bytes[1] === 0xfe;\n};\nexport var hasUtf16BOM = function (bytes) {\n  return hasUtf16BigEndianBOM(bytes) || hasUtf16LittleEndianBOM(bytes);\n};\n//# sourceMappingURL=unicode.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}