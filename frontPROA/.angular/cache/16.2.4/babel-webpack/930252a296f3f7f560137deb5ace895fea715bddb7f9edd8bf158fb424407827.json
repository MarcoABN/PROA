{"ast":null,"code":"import { decodeFromBase64DataUri } from \"./base64\";\nimport { charFromCode } from \"./strings\";\nexport var last = function (array) {\n  return array[array.length - 1];\n};\n// export const dropLast = <T>(array: T[]): T[] =>\n// array.slice(0, array.length - 1);\nexport var typedArrayFor = function (value) {\n  if (value instanceof Uint8Array) return value;\n  var length = value.length;\n  var typedArray = new Uint8Array(length);\n  for (var idx = 0; idx < length; idx++) {\n    typedArray[idx] = value.charCodeAt(idx);\n  }\n  return typedArray;\n};\nexport var mergeIntoTypedArray = function () {\n  var arrays = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    arrays[_i] = arguments[_i];\n  }\n  var arrayCount = arrays.length;\n  var typedArrays = [];\n  for (var idx = 0; idx < arrayCount; idx++) {\n    var element = arrays[idx];\n    typedArrays[idx] = element instanceof Uint8Array ? element : typedArrayFor(element);\n  }\n  var totalSize = 0;\n  for (var idx = 0; idx < arrayCount; idx++) {\n    totalSize += arrays[idx].length;\n  }\n  var merged = new Uint8Array(totalSize);\n  var offset = 0;\n  for (var arrIdx = 0; arrIdx < arrayCount; arrIdx++) {\n    var arr = typedArrays[arrIdx];\n    for (var byteIdx = 0, arrLen = arr.length; byteIdx < arrLen; byteIdx++) {\n      merged[offset++] = arr[byteIdx];\n    }\n  }\n  return merged;\n};\nexport var mergeUint8Arrays = function (arrays) {\n  var totalSize = 0;\n  for (var idx = 0, len = arrays.length; idx < len; idx++) {\n    totalSize += arrays[idx].length;\n  }\n  var mergedBuffer = new Uint8Array(totalSize);\n  var offset = 0;\n  for (var idx = 0, len = arrays.length; idx < len; idx++) {\n    var array = arrays[idx];\n    mergedBuffer.set(array, offset);\n    offset += array.length;\n  }\n  return mergedBuffer;\n};\nexport var arrayAsString = function (array) {\n  var str = '';\n  for (var idx = 0, len = array.length; idx < len; idx++) {\n    str += charFromCode(array[idx]);\n  }\n  return str;\n};\nexport var byAscendingId = function (a, b) {\n  return a.id - b.id;\n};\nexport var sortedUniq = function (array, indexer) {\n  var uniq = [];\n  for (var idx = 0, len = array.length; idx < len; idx++) {\n    var curr = array[idx];\n    var prev = array[idx - 1];\n    if (idx === 0 || indexer(curr) !== indexer(prev)) {\n      uniq.push(curr);\n    }\n  }\n  return uniq;\n};\n// Arrays and TypedArrays in JS both have .reverse() methods, which would seem\n// to negate the need for this function. However, not all runtimes support this\n// method (e.g. React Native). This function compensates for that fact.\nexport var reverseArray = function (array) {\n  var arrayLen = array.length;\n  for (var idx = 0, len = Math.floor(arrayLen / 2); idx < len; idx++) {\n    var leftIdx = idx;\n    var rightIdx = arrayLen - idx - 1;\n    var temp = array[idx];\n    array[leftIdx] = array[rightIdx];\n    array[rightIdx] = temp;\n  }\n  return array;\n};\nexport var sum = function (array) {\n  var total = 0;\n  for (var idx = 0, len = array.length; idx < len; idx++) {\n    total += array[idx];\n  }\n  return total;\n};\nexport var range = function (start, end) {\n  var arr = new Array(end - start);\n  for (var idx = 0, len = arr.length; idx < len; idx++) {\n    arr[idx] = start + idx;\n  }\n  return arr;\n};\nexport var pluckIndices = function (arr, indices) {\n  var plucked = new Array(indices.length);\n  for (var idx = 0, len = indices.length; idx < len; idx++) {\n    plucked[idx] = arr[indices[idx]];\n  }\n  return plucked;\n};\nexport var canBeConvertedToUint8Array = function (input) {\n  return input instanceof Uint8Array || input instanceof ArrayBuffer || typeof input === 'string';\n};\nexport var toUint8Array = function (input) {\n  if (typeof input === 'string') {\n    return decodeFromBase64DataUri(input);\n  } else if (input instanceof ArrayBuffer) {\n    return new Uint8Array(input);\n  } else if (input instanceof Uint8Array) {\n    return input;\n  } else {\n    throw new TypeError('`input` must be one of `string | ArrayBuffer | Uint8Array`');\n  }\n};\n//# sourceMappingURL=arrays.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}