{"ast":null,"code":"import _asyncToGenerator from \"E:/PROA/frontPROA/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { PDFDocument } from 'pdf-lib';\nimport * as i0 from \"@angular/core\";\nexport let Anexo2LService = /*#__PURE__*/(() => {\n  class Anexo2LService {\n    constructor() {}\n    anexo2L(embarcacao, cliente, servico) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        try {\n          const pdfBytes = yield fetch('assets/pdfanexos/Anexo2L-N211.pdf').then(res => res.arrayBuffer());\n          const pdfDoc = yield PDFDocument.load(pdfBytes);\n          const form = pdfDoc.getForm();\n          if (cliente) {\n            form.getTextField('nome').setText(cliente.nome);\n            form.getTextField('nacionalidade').setText(cliente.nacionalidade.toUpperCase());\n            form.getTextField('naturalidade').setText(cliente.naturalidade.toUpperCase());\n            form.getTextField('cpf').setText(cliente.cpfcnpj);\n            form.getTextField('telefone').setText(cliente.telefone);\n            form.getTextField('celular').setText(cliente.celular);\n            form.getTextField('email').setText(cliente.email);\n            const endereco = cliente.logradouro + ', ' + cliente.complemento + ', ' + cliente.bairro + ', ' + cliente.cidade + ', CEP: ' + cliente.cep;\n            const [part1, part2] = _this.divideString(endereco, 35);\n            form.getTextField('endereco1').setText(part1.toUpperCase());\n            form.getTextField('endereco2').setText(part2.toUpperCase());\n          } else if (embarcacao) {\n            form.getTextField('nome').setText(embarcacao.cliente.nome);\n            form.getTextField('nacionalidade').setText(embarcacao.cliente.nacionalidade.toUpperCase());\n            form.getTextField('naturalidade').setText(embarcacao.cliente.naturalidade.toUpperCase());\n            form.getTextField('cpf').setText(embarcacao.cliente.cpfcnpj);\n            form.getTextField('telefone').setText(embarcacao.cliente.telefone);\n            form.getTextField('celular').setText(embarcacao.cliente.celular);\n            form.getTextField('email').setText(embarcacao.cliente.email);\n            const endereco = embarcacao.cliente.logradouro + ', ' + embarcacao.cliente.complemento + ', ' + embarcacao.cliente.bairro + ', ' + embarcacao.cliente.cidade + ', CEP: ' + embarcacao.cliente.cep;\n            const [part1, part2] = _this.divideString(endereco, 35);\n            form.getTextField('endereco1').setText(part1.toUpperCase());\n            form.getTextField('endereco2').setText(part2.toUpperCase());\n          }\n          const hoje = new Date();\n          const dia = hoje.getDate().toString().padStart(2, '0');\n          const mes = (hoje.getMonth() + 1).toString().padStart(2, '0'); //Os meses são baseados em zero, então é necessário adicionar 1.\n          const ano = hoje.getFullYear().toString();\n          form.getTextField('dia').setText(dia);\n          form.getTextField('ano').setText(ano);\n          form.getTextField('mes').setText(mes);\n          form.flatten();\n          const modifiedPdfBytes = yield pdfDoc.save();\n          if (!servico) {\n            _this.abrirPDFemJanela(modifiedPdfBytes);\n            console.log('PDF Criado!');\n          } else {\n            return modifiedPdfBytes;\n          }\n        } catch (err) {\n          console.log(err);\n        }\n      })();\n    }\n    abrirPDFemJanela(data) {\n      const blob = new Blob([data], {\n        type: 'application/pdf'\n      });\n      const url = window.URL.createObjectURL(blob);\n      window.open(url, '_blank');\n    }\n    divideString(input, limit) {\n      let part1 = '';\n      let part2 = '';\n      console.log(\"tamanho: \", input.length);\n      if (input.length <= limit) {\n        part1 = input;\n      } else {\n        let breakPoint = input.lastIndexOf(' ', limit);\n        if (breakPoint === -1) {\n          breakPoint = limit; // Nenhum espaço encontrado, quebra no limite\n        }\n\n        part1 = input.substring(0, breakPoint);\n        part2 = input.substring(breakPoint).trim();\n        //if (part2.length > limit) {\n        // part2 = part2.substring(0, limit);\n        //}\n      }\n\n      return [part1, part2];\n    }\n    static #_ = this.ɵfac = function Anexo2LService_Factory(t) {\n      return new (t || Anexo2LService)();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: Anexo2LService,\n      factory: Anexo2LService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return Anexo2LService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}