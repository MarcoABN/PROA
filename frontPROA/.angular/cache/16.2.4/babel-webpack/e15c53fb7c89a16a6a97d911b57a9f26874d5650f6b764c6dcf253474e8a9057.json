{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFPage from \"../PDFPage\";\nimport PDFFont from \"../PDFFont\";\nimport { ImageAlignment } from \"../image/alignment\";\nimport { normalizeAppearance, defaultButtonAppearanceProvider } from \"./appearances\";\nimport PDFField, { assertFieldAppearanceOptions } from \"./PDFField\";\nimport { rgb } from \"../colors\";\nimport { degrees } from \"../rotations\";\nimport { PDFStream, PDFAcroPushButton } from \"../../core\";\nimport { assertIs, assertOrUndefined, assertPositive } from \"../../utils\";\n/**\r\n * Represents a button field of a [[PDFForm]].\r\n *\r\n * [[PDFButton]] fields are interactive controls that users can click with their\r\n * mouse. This type of [[PDFField]] is not stateful. The purpose of a button\r\n * is to perform an action when the user clicks on it, such as opening a print\r\n * modal or resetting the form. Buttons are typically rectangular in shape and\r\n * have a text label describing the action that they perform when clicked.\r\n */\nvar PDFButton = /** @class */function (_super) {\n  __extends(PDFButton, _super);\n  function PDFButton(acroPushButton, ref, doc) {\n    var _this = _super.call(this, acroPushButton, ref, doc) || this;\n    assertIs(acroPushButton, 'acroButton', [[PDFAcroPushButton, 'PDFAcroPushButton']]);\n    _this.acroField = acroPushButton;\n    return _this;\n  }\n  /**\r\n   * Display an image inside the bounds of this button's widgets. For example:\r\n   * ```js\r\n   * const pngImage = await pdfDoc.embedPng(...)\r\n   * const button = form.getButton('some.button.field')\r\n   * button.setImage(pngImage, ImageAlignment.Center)\r\n   * ```\r\n   * This will update the appearances streams for each of this button's widgets.\r\n   * @param image The image that should be displayed.\r\n   * @param alignment The alignment of the image.\r\n   */\n  PDFButton.prototype.setImage = function (image, alignment) {\n    if (alignment === void 0) {\n      alignment = ImageAlignment.Center;\n    }\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var streamRef = this.createImageAppearanceStream(widget, image, alignment);\n      this.updateWidgetAppearances(widget, {\n        normal: streamRef\n      });\n    }\n    this.markAsClean();\n  };\n  /**\r\n   * Set the font size for this field. Larger font sizes will result in larger\r\n   * text being displayed when PDF readers render this button. Font sizes may\r\n   * be integer or floating point numbers. Supplying a negative font size will\r\n   * cause this method to throw an error.\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * const button = form.getButton('some.button.field')\r\n   * button.setFontSize(4)\r\n   * button.setFontSize(15.7)\r\n   * ```\r\n   *\r\n   * > This method depends upon the existence of a default appearance\r\n   * > (`/DA`) string. If this field does not have a default appearance string,\r\n   * > or that string does not contain a font size (via the `Tf` operator),\r\n   * > then this method will throw an error.\r\n   *\r\n   * @param fontSize The font size to be used when rendering text in this field.\r\n   */\n  PDFButton.prototype.setFontSize = function (fontSize) {\n    assertPositive(fontSize, 'fontSize');\n    this.acroField.setFontSize(fontSize);\n    this.markAsDirty();\n  };\n  /**\r\n   * Show this button on the specified page with the given text. For example:\r\n   * ```js\r\n   * const ubuntuFont = await pdfDoc.embedFont(ubuntuFontBytes)\r\n   * const page = pdfDoc.addPage()\r\n   *\r\n   * const form = pdfDoc.getForm()\r\n   * const button = form.createButton('some.button.field')\r\n   *\r\n   * button.addToPage('Do Stuff', page, {\r\n   *   x: 50,\r\n   *   y: 75,\r\n   *   width: 200,\r\n   *   height: 100,\r\n   *   textColor: rgb(1, 0, 0),\r\n   *   backgroundColor: rgb(0, 1, 0),\r\n   *   borderColor: rgb(0, 0, 1),\r\n   *   borderWidth: 2,\r\n   *   rotate: degrees(90),\r\n   *   font: ubuntuFont,\r\n   * })\r\n   * ```\r\n   * This will create a new widget for this button field.\r\n   * @param text The text to be displayed for this button widget.\r\n   * @param page The page to which this button widget should be added.\r\n   * @param options The options to be used when adding this button widget.\r\n   */\n  PDFButton.prototype.addToPage = function (\n  // TODO: This needs to be optional, e.g. for image buttons\n  text, page, options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n    assertOrUndefined(text, 'text', ['string']);\n    assertOrUndefined(page, 'page', [[PDFPage, 'PDFPage']]);\n    assertFieldAppearanceOptions(options);\n    // Create a widget for this button\n    var widget = this.createWidget({\n      x: ((_a = options === null || options === void 0 ? void 0 : options.x) !== null && _a !== void 0 ? _a : 0) - ((_b = options === null || options === void 0 ? void 0 : options.borderWidth) !== null && _b !== void 0 ? _b : 0) / 2,\n      y: ((_c = options === null || options === void 0 ? void 0 : options.y) !== null && _c !== void 0 ? _c : 0) - ((_d = options === null || options === void 0 ? void 0 : options.borderWidth) !== null && _d !== void 0 ? _d : 0) / 2,\n      width: (_e = options === null || options === void 0 ? void 0 : options.width) !== null && _e !== void 0 ? _e : 100,\n      height: (_f = options === null || options === void 0 ? void 0 : options.height) !== null && _f !== void 0 ? _f : 50,\n      textColor: (_g = options === null || options === void 0 ? void 0 : options.textColor) !== null && _g !== void 0 ? _g : rgb(0, 0, 0),\n      backgroundColor: (_h = options === null || options === void 0 ? void 0 : options.backgroundColor) !== null && _h !== void 0 ? _h : rgb(0.75, 0.75, 0.75),\n      borderColor: options === null || options === void 0 ? void 0 : options.borderColor,\n      borderWidth: (_j = options === null || options === void 0 ? void 0 : options.borderWidth) !== null && _j !== void 0 ? _j : 0,\n      rotate: (_k = options === null || options === void 0 ? void 0 : options.rotate) !== null && _k !== void 0 ? _k : degrees(0),\n      caption: text,\n      hidden: options === null || options === void 0 ? void 0 : options.hidden,\n      page: page.ref\n    });\n    var widgetRef = this.doc.context.register(widget.dict);\n    // Add widget to this field\n    this.acroField.addWidget(widgetRef);\n    // Set appearance streams for widget\n    var font = (_l = options === null || options === void 0 ? void 0 : options.font) !== null && _l !== void 0 ? _l : this.doc.getForm().getDefaultFont();\n    this.updateWidgetAppearance(widget, font);\n    // Add widget to the given page\n    page.node.addAnnot(widgetRef);\n  };\n  /**\r\n   * Returns `true` if this button has been marked as dirty, or if any of this\r\n   * button's widgets do not have an appearance stream. For example:\r\n   * ```js\r\n   * const button = form.getButton('some.button.field')\r\n   * if (button.needsAppearancesUpdate()) console.log('Needs update')\r\n   * ```\r\n   * @returns Whether or not this button needs an appearance update.\r\n   */\n  PDFButton.prototype.needsAppearancesUpdate = function () {\n    var _a;\n    if (this.isDirty()) return true;\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var hasAppearances = ((_a = widget.getAppearances()) === null || _a === void 0 ? void 0 : _a.normal) instanceof PDFStream;\n      if (!hasAppearances) return true;\n    }\n    return false;\n  };\n  /**\r\n   * Update the appearance streams for each of this button's widgets using\r\n   * the default appearance provider for buttons. For example:\r\n   * ```js\r\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n   * const button = form.getButton('some.button.field')\r\n   * button.defaultUpdateAppearances(helvetica)\r\n   * ```\r\n   * @param font The font to be used for creating the appearance streams.\r\n   */\n  PDFButton.prototype.defaultUpdateAppearances = function (font) {\n    assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n    this.updateAppearances(font);\n  };\n  /**\r\n   * Update the appearance streams for each of this button's widgets using\r\n   * the given appearance provider. If no `provider` is passed, the default\r\n   * appearance provider for buttons will be used. For example:\r\n   * ```js\r\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n   * const button = form.getButton('some.button.field')\r\n   * button.updateAppearances(helvetica, (field, widget, font) => {\r\n   *   ...\r\n   *   return {\r\n   *     normal: drawButton(...),\r\n   *     down: drawButton(...),\r\n   *   }\r\n   * })\r\n   * ```\r\n   * @param font The font to be used for creating the appearance streams.\r\n   * @param provider Optionally, the appearance provider to be used for\r\n   *                 generating the contents of the appearance streams.\r\n   */\n  PDFButton.prototype.updateAppearances = function (font, provider) {\n    assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n    assertOrUndefined(provider, 'provider', [Function]);\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      this.updateWidgetAppearance(widget, font, provider);\n    }\n  };\n  PDFButton.prototype.updateWidgetAppearance = function (widget, font, provider) {\n    var apProvider = provider !== null && provider !== void 0 ? provider : defaultButtonAppearanceProvider;\n    var appearances = normalizeAppearance(apProvider(this, widget, font));\n    this.updateWidgetAppearanceWithFont(widget, font, appearances);\n  };\n  /**\r\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\r\n   * > consider using the [[PDFForm.getButton]] method, which will create an\r\n   * > instance of [[PDFButton]] for you.\r\n   *\r\n   * Create an instance of [[PDFButton]] from an existing acroPushButton and ref\r\n   *\r\n   * @param acroPushButton The underlying `PDFAcroPushButton` for this button.\r\n   * @param ref The unique reference for this button.\r\n   * @param doc The document to which this button will belong.\r\n   */\n  PDFButton.of = function (acroPushButton, ref, doc) {\n    return new PDFButton(acroPushButton, ref, doc);\n  };\n  return PDFButton;\n}(PDFField);\nexport default PDFButton;\n//# sourceMappingURL=PDFButton.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}