{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport PDFDocument from \"./PDFDocument\";\nimport { PDFPageEmbedder, PDFRef } from \"../core\";\nimport { assertIs } from \"../utils\";\n/**\r\n * Represents a PDF page that has been embedded in a [[PDFDocument]].\r\n */\nvar PDFEmbeddedPage = /** @class */function () {\n  function PDFEmbeddedPage(ref, doc, embedder) {\n    this.alreadyEmbedded = false;\n    assertIs(ref, 'ref', [[PDFRef, 'PDFRef']]);\n    assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n    assertIs(embedder, 'embedder', [[PDFPageEmbedder, 'PDFPageEmbedder']]);\n    this.ref = ref;\n    this.doc = doc;\n    this.width = embedder.width;\n    this.height = embedder.height;\n    this.embedder = embedder;\n  }\n  /**\r\n   * Compute the width and height of this page after being scaled by the\r\n   * given `factor`. For example:\r\n   * ```js\r\n   * embeddedPage.width  // => 500\r\n   * embeddedPage.height // => 250\r\n   *\r\n   * const scaled = embeddedPage.scale(0.5)\r\n   * scaled.width  // => 250\r\n   * scaled.height // => 125\r\n   * ```\r\n   * This operation is often useful before drawing a page with\r\n   * [[PDFPage.drawPage]] to compute the `width` and `height` options.\r\n   * @param factor The factor by which this page should be scaled.\r\n   * @returns The width and height of the page after being scaled.\r\n   */\n  PDFEmbeddedPage.prototype.scale = function (factor) {\n    assertIs(factor, 'factor', ['number']);\n    return {\n      width: this.width * factor,\n      height: this.height * factor\n    };\n  };\n  /**\r\n   * Get the width and height of this page. For example:\r\n   * ```js\r\n   * const { width, height } = embeddedPage.size()\r\n   * ```\r\n   * @returns The width and height of the page.\r\n   */\n  PDFEmbeddedPage.prototype.size = function () {\n    return this.scale(1);\n  };\n  /**\r\n   * > **NOTE:** You probably don't need to call this method directly. The\r\n   * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\r\n   * > automatically ensure all embeddable pages get embedded.\r\n   *\r\n   * Embed this embeddable page in its document.\r\n   *\r\n   * @returns Resolves when the embedding is complete.\r\n   */\n  PDFEmbeddedPage.prototype.embed = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!this.alreadyEmbedded) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.embedder.embedIntoContext(this.doc.context, this.ref)];\n          case 1:\n            _a.sent();\n            this.alreadyEmbedded = true;\n            _a.label = 2;\n          case 2:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\r\n   * > consider using the [[PDFDocument.embedPdf]] and\r\n   * > [[PDFDocument.embedPage]] methods, which will create instances of\r\n   * > [[PDFEmbeddedPage]] for you.\r\n   *\r\n   * Create an instance of [[PDFEmbeddedPage]] from an existing ref and embedder\r\n   *\r\n   * @param ref The unique reference for this embedded page.\r\n   * @param doc The document to which the embedded page will belong.\r\n   * @param embedder The embedder that will be used to embed the page.\r\n   */\n  PDFEmbeddedPage.of = function (ref, doc, embedder) {\n    return new PDFEmbeddedPage(ref, doc, embedder);\n  };\n  return PDFEmbeddedPage;\n}();\nexport default PDFEmbeddedPage;\n//# sourceMappingURL=PDFEmbeddedPage.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}