{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFAcroButton from \"./PDFAcroButton\";\nimport { InvalidAcroFieldValueError } from \"../errors\";\nvar PDFAcroCheckBox = /** @class */function (_super) {\n  __extends(PDFAcroCheckBox, _super);\n  function PDFAcroCheckBox() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  PDFAcroCheckBox.prototype.setValue = function (value) {\n    var _a;\n    var onValue = (_a = this.getOnValue()) !== null && _a !== void 0 ? _a : PDFName.of('Yes');\n    if (value !== onValue && value !== PDFName.of('Off')) {\n      throw new InvalidAcroFieldValueError();\n    }\n    this.dict.set(PDFName.of('V'), value);\n    var widgets = this.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var state = widget.getOnValue() === value ? value : PDFName.of('Off');\n      widget.setAppearanceState(state);\n    }\n  };\n  PDFAcroCheckBox.prototype.getValue = function () {\n    var v = this.V();\n    if (v instanceof PDFName) return v;\n    return PDFName.of('Off');\n  };\n  PDFAcroCheckBox.prototype.getOnValue = function () {\n    var widget = this.getWidgets()[0];\n    return widget === null || widget === void 0 ? void 0 : widget.getOnValue();\n  };\n  PDFAcroCheckBox.fromDict = function (dict, ref) {\n    return new PDFAcroCheckBox(dict, ref);\n  };\n  PDFAcroCheckBox.create = function (context) {\n    var dict = context.obj({\n      FT: 'Btn',\n      Kids: []\n    });\n    var ref = context.register(dict);\n    return new PDFAcroCheckBox(dict, ref);\n  };\n  return PDFAcroCheckBox;\n}(PDFAcroButton);\nexport default PDFAcroCheckBox;","map":{"version":3,"names":["__extends","PDFName","PDFAcroButton","InvalidAcroFieldValueError","PDFAcroCheckBox","_super","apply","arguments","prototype","setValue","value","_a","onValue","getOnValue","of","dict","set","widgets","getWidgets","idx","len","length","widget","state","setAppearanceState","getValue","v","V","fromDict","ref","create","context","obj","FT","Kids","register"],"sources":["E:/PROA/frontPROA/node_modules/pdf-lib/es/core/acroform/PDFAcroCheckBox.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFAcroButton from \"./PDFAcroButton\";\nimport { InvalidAcroFieldValueError } from \"../errors\";\nvar PDFAcroCheckBox = /** @class */ (function (_super) {\n    __extends(PDFAcroCheckBox, _super);\n    function PDFAcroCheckBox() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    PDFAcroCheckBox.prototype.setValue = function (value) {\n        var _a;\n        var onValue = (_a = this.getOnValue()) !== null && _a !== void 0 ? _a : PDFName.of('Yes');\n        if (value !== onValue && value !== PDFName.of('Off')) {\n            throw new InvalidAcroFieldValueError();\n        }\n        this.dict.set(PDFName.of('V'), value);\n        var widgets = this.getWidgets();\n        for (var idx = 0, len = widgets.length; idx < len; idx++) {\n            var widget = widgets[idx];\n            var state = widget.getOnValue() === value ? value : PDFName.of('Off');\n            widget.setAppearanceState(state);\n        }\n    };\n    PDFAcroCheckBox.prototype.getValue = function () {\n        var v = this.V();\n        if (v instanceof PDFName)\n            return v;\n        return PDFName.of('Off');\n    };\n    PDFAcroCheckBox.prototype.getOnValue = function () {\n        var widget = this.getWidgets()[0];\n        return widget === null || widget === void 0 ? void 0 : widget.getOnValue();\n    };\n    PDFAcroCheckBox.fromDict = function (dict, ref) {\n        return new PDFAcroCheckBox(dict, ref);\n    };\n    PDFAcroCheckBox.create = function (context) {\n        var dict = context.obj({\n            FT: 'Btn',\n            Kids: [],\n        });\n        var ref = context.register(dict);\n        return new PDFAcroCheckBox(dict, ref);\n    };\n    return PDFAcroCheckBox;\n}(PDFAcroButton));\nexport default PDFAcroCheckBox;\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,SAASC,0BAA0B,QAAQ,WAAW;AACtD,IAAIC,eAAe,GAAG,aAAe,UAAUC,MAAM,EAAE;EACnDL,SAAS,CAACI,eAAe,EAAEC,MAAM,CAAC;EAClC,SAASD,eAAeA,CAAA,EAAG;IACvB,OAAOC,MAAM,KAAK,IAAI,IAAIA,MAAM,CAACC,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC,IAAI,IAAI;EACnE;EACAH,eAAe,CAACI,SAAS,CAACC,QAAQ,GAAG,UAAUC,KAAK,EAAE;IAClD,IAAIC,EAAE;IACN,IAAIC,OAAO,GAAG,CAACD,EAAE,GAAG,IAAI,CAACE,UAAU,CAAC,CAAC,MAAM,IAAI,IAAIF,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGV,OAAO,CAACa,EAAE,CAAC,KAAK,CAAC;IACzF,IAAIJ,KAAK,KAAKE,OAAO,IAAIF,KAAK,KAAKT,OAAO,CAACa,EAAE,CAAC,KAAK,CAAC,EAAE;MAClD,MAAM,IAAIX,0BAA0B,CAAC,CAAC;IAC1C;IACA,IAAI,CAACY,IAAI,CAACC,GAAG,CAACf,OAAO,CAACa,EAAE,CAAC,GAAG,CAAC,EAAEJ,KAAK,CAAC;IACrC,IAAIO,OAAO,GAAG,IAAI,CAACC,UAAU,CAAC,CAAC;IAC/B,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEC,GAAG,GAAGH,OAAO,CAACI,MAAM,EAAEF,GAAG,GAAGC,GAAG,EAAED,GAAG,EAAE,EAAE;MACtD,IAAIG,MAAM,GAAGL,OAAO,CAACE,GAAG,CAAC;MACzB,IAAII,KAAK,GAAGD,MAAM,CAACT,UAAU,CAAC,CAAC,KAAKH,KAAK,GAAGA,KAAK,GAAGT,OAAO,CAACa,EAAE,CAAC,KAAK,CAAC;MACrEQ,MAAM,CAACE,kBAAkB,CAACD,KAAK,CAAC;IACpC;EACJ,CAAC;EACDnB,eAAe,CAACI,SAAS,CAACiB,QAAQ,GAAG,YAAY;IAC7C,IAAIC,CAAC,GAAG,IAAI,CAACC,CAAC,CAAC,CAAC;IAChB,IAAID,CAAC,YAAYzB,OAAO,EACpB,OAAOyB,CAAC;IACZ,OAAOzB,OAAO,CAACa,EAAE,CAAC,KAAK,CAAC;EAC5B,CAAC;EACDV,eAAe,CAACI,SAAS,CAACK,UAAU,GAAG,YAAY;IAC/C,IAAIS,MAAM,GAAG,IAAI,CAACJ,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;IACjC,OAAOI,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACT,UAAU,CAAC,CAAC;EAC9E,CAAC;EACDT,eAAe,CAACwB,QAAQ,GAAG,UAAUb,IAAI,EAAEc,GAAG,EAAE;IAC5C,OAAO,IAAIzB,eAAe,CAACW,IAAI,EAAEc,GAAG,CAAC;EACzC,CAAC;EACDzB,eAAe,CAAC0B,MAAM,GAAG,UAAUC,OAAO,EAAE;IACxC,IAAIhB,IAAI,GAAGgB,OAAO,CAACC,GAAG,CAAC;MACnBC,EAAE,EAAE,KAAK;MACTC,IAAI,EAAE;IACV,CAAC,CAAC;IACF,IAAIL,GAAG,GAAGE,OAAO,CAACI,QAAQ,CAACpB,IAAI,CAAC;IAChC,OAAO,IAAIX,eAAe,CAACW,IAAI,EAAEc,GAAG,CAAC;EACzC,CAAC;EACD,OAAOzB,eAAe;AAC1B,CAAC,CAACF,aAAa,CAAE;AACjB,eAAeE,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}