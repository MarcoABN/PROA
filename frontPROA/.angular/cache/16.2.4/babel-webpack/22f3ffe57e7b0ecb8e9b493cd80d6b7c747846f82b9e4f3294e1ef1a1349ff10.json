{"ast":null,"code":"import _asyncToGenerator from \"E:/PROA/frontPROA/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { PDFDocument } from 'pdf-lib';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nexport let Anexo5HService = /*#__PURE__*/(() => {\n  class Anexo5HService {\n    constructor(datePipe) {\n      this.datePipe = datePipe;\n      this.texto = [];\n    }\n    anexo5H(solicitacao, campotexto1, embarcacao, cliente, servico) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        try {\n          const pdfBytes = yield fetch('assets/pdfanexos/Anexo5H-N211.pdf').then(res => res.arrayBuffer());\n          const pdfDoc = yield PDFDocument.load(pdfBytes);\n          const form = pdfDoc.getForm();\n          const solicitacoes = solicitacao.split(',');\n          solicitacoes.forEach(valor => {\n            switch (valor.trim()) {\n              case \"1\":\n                form.getCheckBox('servico1').check();\n                break;\n              case \"2\":\n                form.getCheckBox('servico2').check();\n                break;\n              case \"3\":\n                form.getCheckBox('servico3').check();\n                break;\n              case \"4\":\n                form.getCheckBox('servico4').check();\n                break;\n              case \"5\":\n                form.getCheckBox('servico5').check();\n                break;\n              case \"6\":\n                form.getCheckBox('servico6').check();\n                break;\n              case \"7\":\n                form.getCheckBox('servico7').check();\n                break;\n              case \"8\":\n                form.getCheckBox('servico8').check();\n                break;\n              case \"9\":\n                form.getCheckBox('servico9').check();\n                break;\n              case \"10a\":\n                form.getCheckBox('servico10').check();\n                form.getCheckBox('servico10_a').check();\n                break;\n              case \"10b\":\n                form.getCheckBox('servico10').check();\n                form.getCheckBox('servico10_b').check();\n                break;\n              case \"10c\":\n                form.getCheckBox('servico10').check();\n                form.getCheckBox('servico10_c').check();\n                break;\n              case \"11\":\n                form.getCheckBox('servico11').check();\n                break;\n              case \"12\":\n                form.getCheckBox('servico12').check();\n                break;\n              default:\n                console.log(`Solicitação ${valor} não reconhecida.`);\n            }\n          });\n          if (embarcacao) {\n            form.getTextField('nome').setText(embarcacao.cliente.nome);\n            form.getTextField('cpf1').setText(embarcacao.cliente.cpfcnpj);\n            form.getTextField('cpf2').setText(embarcacao.cliente.cpfcnpj);\n            form.getTextField('rg').setText(embarcacao.cliente.rg);\n            form.getTextField('orgexpedidor').setText(embarcacao.cliente.orgEmissor);\n            form.getTextField('logradouro').setText(embarcacao.cliente.logradouro);\n            form.getTextField('numero').setText(embarcacao.cliente.numero);\n            form.getTextField('complemento').setText(embarcacao.cliente.complemento);\n            form.getTextField('bairro').setText(embarcacao.cliente.bairro);\n            form.getTextField('cidade').setText(embarcacao.cliente.cidade);\n            form.getTextField('uf').setText(embarcacao.cliente.uf);\n            form.getTextField('cep').setText(embarcacao.cliente.cep);\n            form.getTextField('dddtelefone').setText(embarcacao.cliente.telefone.substring(0, 2));\n            form.getTextField('telefone').setText(embarcacao.cliente.telefone.substring(2));\n            form.getTextField('dddcelular').setText(embarcacao.cliente.celular.substring(0, 2));\n            form.getTextField('celular').setText(embarcacao.cliente.celular.substring(2));\n            form.getTextField('email').setText(embarcacao.cliente.email);\n            form.getTextField('local').setText(embarcacao.cliente.cidade);\n          } else if (cliente) {\n            form.getTextField('nome').setText(cliente.nome);\n            form.getTextField('cpf1').setText(cliente.cpfcnpj);\n            form.getTextField('cpf2').setText(cliente.cpfcnpj);\n            form.getTextField('rg').setText(cliente.rg);\n            form.getTextField('orgexpedidor').setText(cliente.orgEmissor);\n            form.getTextField('logradouro').setText(cliente.logradouro);\n            form.getTextField('numero').setText(cliente.numero);\n            form.getTextField('complemento').setText(cliente.complemento);\n            form.getTextField('bairro').setText(cliente.bairro);\n            form.getTextField('cidade').setText(cliente.cidade);\n            form.getTextField('uf').setText(cliente.uf);\n            form.getTextField('cep').setText(cliente.cep);\n            form.getTextField('dddtelefone').setText(cliente.telefone.substring(0, 2));\n            form.getTextField('telefone').setText(cliente.telefone.substring(2));\n            form.getTextField('dddcelular').setText(cliente.celular.substring(0, 2));\n            form.getTextField('celular').setText(cliente.celular.substring(2));\n            form.getTextField('email').setText(cliente.email);\n            form.getTextField('local').setText(cliente.cidade);\n          }\n          const hoje = new Date();\n          const dia = hoje.getDate().toString().padStart(2, '0');\n          const mes = (hoje.getMonth() + 1).toString().padStart(2, '0'); //Os meses são baseados em zero, então é necessário adicionar 1.\n          const ano = hoje.getFullYear().toString();\n          form.getTextField('dia').setText(dia);\n          form.getTextField('mes').setText(mes);\n          form.getTextField('ano').setText(ano);\n          console.log(campotexto1);\n          _this.texto = _this.divideString(campotexto1);\n          form.getTextField('descricao1').setText(_this.texto[0]);\n          form.getTextField('descricao2').setText(_this.texto[1]);\n          form.getTextField('descricao3').setText(_this.texto[2]);\n          form.getTextField('descricao4').setText(_this.texto[3]);\n          form.getTextField('descricao5').setText(_this.texto[4]);\n          form.getTextField('descricao6').setText(_this.texto[5]);\n          form.getTextField('descricao7').setText(_this.texto[6]);\n          form.flatten();\n          const modifiedPdfBytes = yield pdfDoc.save();\n          if (!servico) {\n            _this.abrirPDFemJanela(modifiedPdfBytes);\n            console.log('PDF Criado!');\n          } else {\n            return modifiedPdfBytes;\n          }\n        } catch (err) {\n          console.error(err);\n        }\n      })();\n    }\n    abrirPDFemJanela(data) {\n      const blob = new Blob([data], {\n        type: 'application/pdf'\n      });\n      const url = window.URL.createObjectURL(blob);\n      window.open(url, '_blank');\n    }\n    divideString(texto) {\n      const limiteDescricao1 = 60;\n      const limiteOutros = 80;\n      const result = [];\n      // Função auxiliar para dividir um trecho de texto com limite de caracteres sem quebrar palavras\n      function dividirPorLimite(texto, limite) {\n        const partes = [];\n        let parteAtual = '';\n        texto.split(' ').forEach(palavra => {\n          if ((parteAtual + palavra).length <= limite) {\n            parteAtual += (parteAtual ? ' ' : '') + palavra;\n          } else {\n            partes.push(parteAtual);\n            parteAtual = palavra;\n          }\n        });\n        if (parteAtual) {\n          partes.push(parteAtual);\n        }\n        return partes;\n      }\n      // Divide o texto inicial para preencher 'descricao1'\n      let restante = texto;\n      if (restante.length > limiteDescricao1) {\n        const partesDescricao1 = dividirPorLimite(restante, limiteDescricao1);\n        result.push(partesDescricao1[0]);\n        restante = restante.substring(partesDescricao1[0].length).trim();\n      } else {\n        result.push(restante);\n        restante = '';\n      }\n      // Divide o texto restante para preencher os demais campos\n      const partesOutras = dividirPorLimite(restante, limiteOutros);\n      result.push(...partesOutras);\n      // Completa o array resultante com strings vazias, se necessário, para ter 7 elementos\n      while (result.length < 7) {\n        result.push('');\n      }\n      return result.slice(0, 7);\n    }\n    static #_ = this.ɵfac = function Anexo5HService_Factory(t) {\n      return new (t || Anexo5HService)(i0.ɵɵinject(i1.DatePipe));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: Anexo5HService,\n      factory: Anexo5HService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return Anexo5HService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}