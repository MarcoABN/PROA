{"ast":null,"code":"var flag = function (bitIndex) {\n  return 1 << bitIndex;\n};\n/** From PDF spec table 221 */\nexport var AcroFieldFlags;\n(function (AcroFieldFlags) {\n  /**\n   * If set, the user may not change the value of the field. Any associated\n   * widget annotations will not interact with the user; that is, they will not\n   * respond to mouse clicks or change their appearance in response to mouse\n   * motions. This flag is useful for fields whose values are computed or\n   * imported from a database.\n   */\n  AcroFieldFlags[AcroFieldFlags[\"ReadOnly\"] = flag(1 - 1)] = \"ReadOnly\";\n  /**\n   * If set, the field shall have a value at the time it is exported by a\n   * submit-form action (see 12.7.5.2, \"Submit-Form Action\").\n   */\n  AcroFieldFlags[AcroFieldFlags[\"Required\"] = flag(2 - 1)] = \"Required\";\n  /**\n   * If set, the field shall not be exported by a submit-form action\n   * (see 12.7.5.2, \"Submit-Form Action\").\n   */\n  AcroFieldFlags[AcroFieldFlags[\"NoExport\"] = flag(3 - 1)] = \"NoExport\";\n})(AcroFieldFlags || (AcroFieldFlags = {}));\n/** From PDF spec table 226 */\nexport var AcroButtonFlags;\n(function (AcroButtonFlags) {\n  /**\n   * (Radio buttons only) If set, exactly one radio button shall be selected at\n   * all times; selecting the currently selected button has no effect. If clear,\n   * clicking the selected button deselects it, leaving no button selected.\n   */\n  AcroButtonFlags[AcroButtonFlags[\"NoToggleToOff\"] = flag(15 - 1)] = \"NoToggleToOff\";\n  /**\n   * If set, the field is a set of radio buttons; if clear, the field is a check\n   * box. This flag may be set only if the Pushbutton flag is clear.\n   */\n  AcroButtonFlags[AcroButtonFlags[\"Radio\"] = flag(16 - 1)] = \"Radio\";\n  /**\n   * If set, the field is a pushbutton that does not retain a permanent value.\n   */\n  AcroButtonFlags[AcroButtonFlags[\"PushButton\"] = flag(17 - 1)] = \"PushButton\";\n  /**\n   * If set, a group of radio buttons within a radio button field that use the\n   * same value for the on state will turn on and off in unison; that is if one\n   * is checked, they are all checked. If clear, the buttons are mutually\n   * exclusive (the same behavior as HTML radio buttons).\n   */\n  AcroButtonFlags[AcroButtonFlags[\"RadiosInUnison\"] = flag(26 - 1)] = \"RadiosInUnison\";\n})(AcroButtonFlags || (AcroButtonFlags = {}));\n/** From PDF spec table 228 */\nexport var AcroTextFlags;\n(function (AcroTextFlags) {\n  /**\n   * If set, the field may contain multiple lines of text; if clear, the field's\n   * text shall be restricted to a single line.\n   */\n  AcroTextFlags[AcroTextFlags[\"Multiline\"] = flag(13 - 1)] = \"Multiline\";\n  /**\n   * If set, the field is intended for entering a secure password that should\n   * not be echoed visibly to the screen. Characters typed from the keyboard\n   * shall instead be echoed in some unreadable form, such as asterisks or\n   * bullet characters.\n   * > NOTE   To protect password confidentiality, readers should never store\n   * >        the value of the text field in the PDF file if this flag is set.\n   */\n  AcroTextFlags[AcroTextFlags[\"Password\"] = flag(14 - 1)] = \"Password\";\n  /**\n   * If set, the text entered in the field represents the pathname of a file\n   * whose contents shall be submitted as the value of the field.\n   */\n  AcroTextFlags[AcroTextFlags[\"FileSelect\"] = flag(21 - 1)] = \"FileSelect\";\n  /**\n   * If set, text entered in the field shall not be spell-checked.\n   */\n  AcroTextFlags[AcroTextFlags[\"DoNotSpellCheck\"] = flag(23 - 1)] = \"DoNotSpellCheck\";\n  /**\n   * If set, the field shall not scroll (horizontally for single-line fields,\n   * vertically for multiple-line fields) to accommodate more text than fits\n   * within its annotation rectangle. Once the field is full, no further text\n   * shall be accepted for interactive form filling; for non-interactive form\n   * filling, the filler should take care not to add more character than will\n   * visibly fit in the defined area.\n   */\n  AcroTextFlags[AcroTextFlags[\"DoNotScroll\"] = flag(24 - 1)] = \"DoNotScroll\";\n  /**\n   * May be set only if the MaxLen entry is present in the text field dictionary\n   * (see Table 229) and if the Multiline, Password, and FileSelect flags are\n   * clear. If set, the field shall be automatically divided into as many\n   * equally spaced positions, or combs, as the value of MaxLen, and the text\n   * is laid out into those combs.\n   */\n  AcroTextFlags[AcroTextFlags[\"Comb\"] = flag(25 - 1)] = \"Comb\";\n  /**\n   * If set, the value of this field shall be a rich text string\n   * (see 12.7.3.4, \"Rich Text Strings\"). If the field has a value, the RV\n   * entry of the field dictionary (Table 222) shall specify the rich text\n   * string.\n   */\n  AcroTextFlags[AcroTextFlags[\"RichText\"] = flag(26 - 1)] = \"RichText\";\n})(AcroTextFlags || (AcroTextFlags = {}));\n/** From PDF spec table 230 */\nexport var AcroChoiceFlags;\n(function (AcroChoiceFlags) {\n  /**\n   * If set, the field is a combo box; if clear, the field is a list box.\n   */\n  AcroChoiceFlags[AcroChoiceFlags[\"Combo\"] = flag(18 - 1)] = \"Combo\";\n  /**\n   * If set, the combo box shall include an editable text box as well as a\n   * drop-down list; if clear, it shall include only a drop-down list. This\n   * flag shall be used only if the Combo flag is set.\n   */\n  AcroChoiceFlags[AcroChoiceFlags[\"Edit\"] = flag(19 - 1)] = \"Edit\";\n  /**\n   * If set, the field's option items shall be sorted alphabetically. This flag\n   * is intended for use by writers, not by readers. Conforming readers shall\n   * display the options in the order in which they occur in the Opt array\n   * (see Table 231).\n   */\n  AcroChoiceFlags[AcroChoiceFlags[\"Sort\"] = flag(20 - 1)] = \"Sort\";\n  /**\n   * If set, more than one of the field's option items may be selected\n   * simultaneously; if clear, at most one item shall be selected.\n   */\n  AcroChoiceFlags[AcroChoiceFlags[\"MultiSelect\"] = flag(22 - 1)] = \"MultiSelect\";\n  /**\n   * If set, text entered in the field shall not be spell-checked. This flag\n   * shall not be used unless the Combo and Edit flags are both set.\n   */\n  AcroChoiceFlags[AcroChoiceFlags[\"DoNotSpellCheck\"] = flag(23 - 1)] = \"DoNotSpellCheck\";\n  /**\n   * If set, the new value shall be committed as soon as a selection is made\n   * (commonly with the pointing device). In this case, supplying a value for\n   * a field involves three actions: selecting the field for fill-in,\n   * selecting a choice for the fill-in value, and leaving that field, which\n   * finalizes or \"commits\" the data choice and triggers any actions associated\n   * with the entry or changing of this data. If this flag is on, then\n   * processing does not wait for leaving the field action to occur, but\n   * immediately proceeds to the third step.\n   *\n   * This option enables applications to perform an action once a selection is\n   * made, without requiring the user to exit the field. If clear, the new\n   * value is not committed until the user exits the field.\n   */\n  AcroChoiceFlags[AcroChoiceFlags[\"CommitOnSelChange\"] = flag(27 - 1)] = \"CommitOnSelChange\";\n})(AcroChoiceFlags || (AcroChoiceFlags = {}));","map":{"version":3,"names":["flag","bitIndex","AcroFieldFlags","AcroButtonFlags","AcroTextFlags","AcroChoiceFlags"],"sources":["E:/PROA/frontPROA/node_modules/pdf-lib/es/core/acroform/flags.js"],"sourcesContent":["var flag = function (bitIndex) { return 1 << bitIndex; };\n/** From PDF spec table 221 */\nexport var AcroFieldFlags;\n(function (AcroFieldFlags) {\n    /**\n     * If set, the user may not change the value of the field. Any associated\n     * widget annotations will not interact with the user; that is, they will not\n     * respond to mouse clicks or change their appearance in response to mouse\n     * motions. This flag is useful for fields whose values are computed or\n     * imported from a database.\n     */\n    AcroFieldFlags[AcroFieldFlags[\"ReadOnly\"] = flag(1 - 1)] = \"ReadOnly\";\n    /**\n     * If set, the field shall have a value at the time it is exported by a\n     * submit-form action (see 12.7.5.2, \"Submit-Form Action\").\n     */\n    AcroFieldFlags[AcroFieldFlags[\"Required\"] = flag(2 - 1)] = \"Required\";\n    /**\n     * If set, the field shall not be exported by a submit-form action\n     * (see 12.7.5.2, \"Submit-Form Action\").\n     */\n    AcroFieldFlags[AcroFieldFlags[\"NoExport\"] = flag(3 - 1)] = \"NoExport\";\n})(AcroFieldFlags || (AcroFieldFlags = {}));\n/** From PDF spec table 226 */\nexport var AcroButtonFlags;\n(function (AcroButtonFlags) {\n    /**\n     * (Radio buttons only) If set, exactly one radio button shall be selected at\n     * all times; selecting the currently selected button has no effect. If clear,\n     * clicking the selected button deselects it, leaving no button selected.\n     */\n    AcroButtonFlags[AcroButtonFlags[\"NoToggleToOff\"] = flag(15 - 1)] = \"NoToggleToOff\";\n    /**\n     * If set, the field is a set of radio buttons; if clear, the field is a check\n     * box. This flag may be set only if the Pushbutton flag is clear.\n     */\n    AcroButtonFlags[AcroButtonFlags[\"Radio\"] = flag(16 - 1)] = \"Radio\";\n    /**\n     * If set, the field is a pushbutton that does not retain a permanent value.\n     */\n    AcroButtonFlags[AcroButtonFlags[\"PushButton\"] = flag(17 - 1)] = \"PushButton\";\n    /**\n     * If set, a group of radio buttons within a radio button field that use the\n     * same value for the on state will turn on and off in unison; that is if one\n     * is checked, they are all checked. If clear, the buttons are mutually\n     * exclusive (the same behavior as HTML radio buttons).\n     */\n    AcroButtonFlags[AcroButtonFlags[\"RadiosInUnison\"] = flag(26 - 1)] = \"RadiosInUnison\";\n})(AcroButtonFlags || (AcroButtonFlags = {}));\n/** From PDF spec table 228 */\nexport var AcroTextFlags;\n(function (AcroTextFlags) {\n    /**\n     * If set, the field may contain multiple lines of text; if clear, the field's\n     * text shall be restricted to a single line.\n     */\n    AcroTextFlags[AcroTextFlags[\"Multiline\"] = flag(13 - 1)] = \"Multiline\";\n    /**\n     * If set, the field is intended for entering a secure password that should\n     * not be echoed visibly to the screen. Characters typed from the keyboard\n     * shall instead be echoed in some unreadable form, such as asterisks or\n     * bullet characters.\n     * > NOTE   To protect password confidentiality, readers should never store\n     * >        the value of the text field in the PDF file if this flag is set.\n     */\n    AcroTextFlags[AcroTextFlags[\"Password\"] = flag(14 - 1)] = \"Password\";\n    /**\n     * If set, the text entered in the field represents the pathname of a file\n     * whose contents shall be submitted as the value of the field.\n     */\n    AcroTextFlags[AcroTextFlags[\"FileSelect\"] = flag(21 - 1)] = \"FileSelect\";\n    /**\n     * If set, text entered in the field shall not be spell-checked.\n     */\n    AcroTextFlags[AcroTextFlags[\"DoNotSpellCheck\"] = flag(23 - 1)] = \"DoNotSpellCheck\";\n    /**\n     * If set, the field shall not scroll (horizontally for single-line fields,\n     * vertically for multiple-line fields) to accommodate more text than fits\n     * within its annotation rectangle. Once the field is full, no further text\n     * shall be accepted for interactive form filling; for non-interactive form\n     * filling, the filler should take care not to add more character than will\n     * visibly fit in the defined area.\n     */\n    AcroTextFlags[AcroTextFlags[\"DoNotScroll\"] = flag(24 - 1)] = \"DoNotScroll\";\n    /**\n     * May be set only if the MaxLen entry is present in the text field dictionary\n     * (see Table 229) and if the Multiline, Password, and FileSelect flags are\n     * clear. If set, the field shall be automatically divided into as many\n     * equally spaced positions, or combs, as the value of MaxLen, and the text\n     * is laid out into those combs.\n     */\n    AcroTextFlags[AcroTextFlags[\"Comb\"] = flag(25 - 1)] = \"Comb\";\n    /**\n     * If set, the value of this field shall be a rich text string\n     * (see 12.7.3.4, \"Rich Text Strings\"). If the field has a value, the RV\n     * entry of the field dictionary (Table 222) shall specify the rich text\n     * string.\n     */\n    AcroTextFlags[AcroTextFlags[\"RichText\"] = flag(26 - 1)] = \"RichText\";\n})(AcroTextFlags || (AcroTextFlags = {}));\n/** From PDF spec table 230 */\nexport var AcroChoiceFlags;\n(function (AcroChoiceFlags) {\n    /**\n     * If set, the field is a combo box; if clear, the field is a list box.\n     */\n    AcroChoiceFlags[AcroChoiceFlags[\"Combo\"] = flag(18 - 1)] = \"Combo\";\n    /**\n     * If set, the combo box shall include an editable text box as well as a\n     * drop-down list; if clear, it shall include only a drop-down list. This\n     * flag shall be used only if the Combo flag is set.\n     */\n    AcroChoiceFlags[AcroChoiceFlags[\"Edit\"] = flag(19 - 1)] = \"Edit\";\n    /**\n     * If set, the field's option items shall be sorted alphabetically. This flag\n     * is intended for use by writers, not by readers. Conforming readers shall\n     * display the options in the order in which they occur in the Opt array\n     * (see Table 231).\n     */\n    AcroChoiceFlags[AcroChoiceFlags[\"Sort\"] = flag(20 - 1)] = \"Sort\";\n    /**\n     * If set, more than one of the field's option items may be selected\n     * simultaneously; if clear, at most one item shall be selected.\n     */\n    AcroChoiceFlags[AcroChoiceFlags[\"MultiSelect\"] = flag(22 - 1)] = \"MultiSelect\";\n    /**\n     * If set, text entered in the field shall not be spell-checked. This flag\n     * shall not be used unless the Combo and Edit flags are both set.\n     */\n    AcroChoiceFlags[AcroChoiceFlags[\"DoNotSpellCheck\"] = flag(23 - 1)] = \"DoNotSpellCheck\";\n    /**\n     * If set, the new value shall be committed as soon as a selection is made\n     * (commonly with the pointing device). In this case, supplying a value for\n     * a field involves three actions: selecting the field for fill-in,\n     * selecting a choice for the fill-in value, and leaving that field, which\n     * finalizes or \"commits\" the data choice and triggers any actions associated\n     * with the entry or changing of this data. If this flag is on, then\n     * processing does not wait for leaving the field action to occur, but\n     * immediately proceeds to the third step.\n     *\n     * This option enables applications to perform an action once a selection is\n     * made, without requiring the user to exit the field. If clear, the new\n     * value is not committed until the user exits the field.\n     */\n    AcroChoiceFlags[AcroChoiceFlags[\"CommitOnSelChange\"] = flag(27 - 1)] = \"CommitOnSelChange\";\n})(AcroChoiceFlags || (AcroChoiceFlags = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}