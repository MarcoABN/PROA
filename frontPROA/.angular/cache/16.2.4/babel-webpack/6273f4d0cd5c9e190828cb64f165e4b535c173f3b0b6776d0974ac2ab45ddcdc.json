{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport PDFDocument from \"./PDFDocument\";\nimport { PDFPageEmbedder, PDFRef } from \"../core\";\nimport { assertIs } from \"../utils\";\n/**\n * Represents a PDF page that has been embedded in a [[PDFDocument]].\n */\nvar PDFEmbeddedPage = /** @class */function () {\n  function PDFEmbeddedPage(ref, doc, embedder) {\n    this.alreadyEmbedded = false;\n    assertIs(ref, 'ref', [[PDFRef, 'PDFRef']]);\n    assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n    assertIs(embedder, 'embedder', [[PDFPageEmbedder, 'PDFPageEmbedder']]);\n    this.ref = ref;\n    this.doc = doc;\n    this.width = embedder.width;\n    this.height = embedder.height;\n    this.embedder = embedder;\n  }\n  /**\n   * Compute the width and height of this page after being scaled by the\n   * given `factor`. For example:\n   * ```js\n   * embeddedPage.width  // => 500\n   * embeddedPage.height // => 250\n   *\n   * const scaled = embeddedPage.scale(0.5)\n   * scaled.width  // => 250\n   * scaled.height // => 125\n   * ```\n   * This operation is often useful before drawing a page with\n   * [[PDFPage.drawPage]] to compute the `width` and `height` options.\n   * @param factor The factor by which this page should be scaled.\n   * @returns The width and height of the page after being scaled.\n   */\n  PDFEmbeddedPage.prototype.scale = function (factor) {\n    assertIs(factor, 'factor', ['number']);\n    return {\n      width: this.width * factor,\n      height: this.height * factor\n    };\n  };\n  /**\n   * Get the width and height of this page. For example:\n   * ```js\n   * const { width, height } = embeddedPage.size()\n   * ```\n   * @returns The width and height of the page.\n   */\n  PDFEmbeddedPage.prototype.size = function () {\n    return this.scale(1);\n  };\n  /**\n   * > **NOTE:** You probably don't need to call this method directly. The\n   * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\n   * > automatically ensure all embeddable pages get embedded.\n   *\n   * Embed this embeddable page in its document.\n   *\n   * @returns Resolves when the embedding is complete.\n   */\n  PDFEmbeddedPage.prototype.embed = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!this.alreadyEmbedded) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.embedder.embedIntoContext(this.doc.context, this.ref)];\n          case 1:\n            _a.sent();\n            this.alreadyEmbedded = true;\n            _a.label = 2;\n          case 2:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFDocument.embedPdf]] and\n   * > [[PDFDocument.embedPage]] methods, which will create instances of\n   * > [[PDFEmbeddedPage]] for you.\n   *\n   * Create an instance of [[PDFEmbeddedPage]] from an existing ref and embedder\n   *\n   * @param ref The unique reference for this embedded page.\n   * @param doc The document to which the embedded page will belong.\n   * @param embedder The embedder that will be used to embed the page.\n   */\n  PDFEmbeddedPage.of = function (ref, doc, embedder) {\n    return new PDFEmbeddedPage(ref, doc, embedder);\n  };\n  return PDFEmbeddedPage;\n}();\nexport default PDFEmbeddedPage;","map":{"version":3,"names":["__awaiter","__generator","PDFDocument","PDFPageEmbedder","PDFRef","assertIs","PDFEmbeddedPage","ref","doc","embedder","alreadyEmbedded","width","height","prototype","scale","factor","size","embed","_a","label","embedIntoContext","context","sent","of"],"sources":["E:/PROA/frontPROA/node_modules/pdf-lib/es/api/PDFEmbeddedPage.js"],"sourcesContent":["import { __awaiter, __generator } from \"tslib\";\nimport PDFDocument from \"./PDFDocument\";\nimport { PDFPageEmbedder, PDFRef } from \"../core\";\nimport { assertIs } from \"../utils\";\n/**\n * Represents a PDF page that has been embedded in a [[PDFDocument]].\n */\nvar PDFEmbeddedPage = /** @class */ (function () {\n    function PDFEmbeddedPage(ref, doc, embedder) {\n        this.alreadyEmbedded = false;\n        assertIs(ref, 'ref', [[PDFRef, 'PDFRef']]);\n        assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n        assertIs(embedder, 'embedder', [[PDFPageEmbedder, 'PDFPageEmbedder']]);\n        this.ref = ref;\n        this.doc = doc;\n        this.width = embedder.width;\n        this.height = embedder.height;\n        this.embedder = embedder;\n    }\n    /**\n     * Compute the width and height of this page after being scaled by the\n     * given `factor`. For example:\n     * ```js\n     * embeddedPage.width  // => 500\n     * embeddedPage.height // => 250\n     *\n     * const scaled = embeddedPage.scale(0.5)\n     * scaled.width  // => 250\n     * scaled.height // => 125\n     * ```\n     * This operation is often useful before drawing a page with\n     * [[PDFPage.drawPage]] to compute the `width` and `height` options.\n     * @param factor The factor by which this page should be scaled.\n     * @returns The width and height of the page after being scaled.\n     */\n    PDFEmbeddedPage.prototype.scale = function (factor) {\n        assertIs(factor, 'factor', ['number']);\n        return { width: this.width * factor, height: this.height * factor };\n    };\n    /**\n     * Get the width and height of this page. For example:\n     * ```js\n     * const { width, height } = embeddedPage.size()\n     * ```\n     * @returns The width and height of the page.\n     */\n    PDFEmbeddedPage.prototype.size = function () {\n        return this.scale(1);\n    };\n    /**\n     * > **NOTE:** You probably don't need to call this method directly. The\n     * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\n     * > automatically ensure all embeddable pages get embedded.\n     *\n     * Embed this embeddable page in its document.\n     *\n     * @returns Resolves when the embedding is complete.\n     */\n    PDFEmbeddedPage.prototype.embed = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!!this.alreadyEmbedded) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.embedder.embedIntoContext(this.doc.context, this.ref)];\n                    case 1:\n                        _a.sent();\n                        this.alreadyEmbedded = true;\n                        _a.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * > **NOTE:** You probably don't want to call this method directly. Instead,\n     * > consider using the [[PDFDocument.embedPdf]] and\n     * > [[PDFDocument.embedPage]] methods, which will create instances of\n     * > [[PDFEmbeddedPage]] for you.\n     *\n     * Create an instance of [[PDFEmbeddedPage]] from an existing ref and embedder\n     *\n     * @param ref The unique reference for this embedded page.\n     * @param doc The document to which the embedded page will belong.\n     * @param embedder The embedder that will be used to embed the page.\n     */\n    PDFEmbeddedPage.of = function (ref, doc, embedder) {\n        return new PDFEmbeddedPage(ref, doc, embedder);\n    };\n    return PDFEmbeddedPage;\n}());\nexport default PDFEmbeddedPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}