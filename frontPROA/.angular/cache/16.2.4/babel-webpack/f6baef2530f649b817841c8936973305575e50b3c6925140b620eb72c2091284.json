{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFPage from \"../PDFPage\";\nimport { normalizeAppearance, defaultCheckBoxAppearanceProvider } from \"./appearances\";\nimport { rgb } from \"../colors\";\nimport { degrees } from \"../rotations\";\nimport PDFField, { assertFieldAppearanceOptions } from \"./PDFField\";\nimport { PDFName, PDFDict, PDFAcroCheckBox } from \"../../core\";\nimport { assertIs, assertOrUndefined } from \"../../utils\";\n/**\n * Represents a check box field of a [[PDFForm]].\n *\n * [[PDFCheckBox]] fields are interactive boxes that users can click with their\n * mouse. This type of [[PDFField]] has two states: `on` and `off`. The purpose\n * of a check box is to enable users to select from one or more options, where\n * each option is represented by a single check box. Check boxes are typically\n * square in shape and display a check mark when they are in the `on` state.\n */\nvar PDFCheckBox = /** @class */function (_super) {\n  __extends(PDFCheckBox, _super);\n  function PDFCheckBox(acroCheckBox, ref, doc) {\n    var _this = _super.call(this, acroCheckBox, ref, doc) || this;\n    assertIs(acroCheckBox, 'acroCheckBox', [[PDFAcroCheckBox, 'PDFAcroCheckBox']]);\n    _this.acroField = acroCheckBox;\n    return _this;\n  }\n  /**\n   * Mark this check box. This operation is analogous to a human user clicking\n   * a check box to fill it in a PDF reader. This method will update the\n   * underlying state of the check box field to indicate it has been selected.\n   * PDF libraries and readers will be able to extract this value from the\n   * saved document and determine that it was selected.\n   *\n   * For example:\n   * ```js\n   * const checkBox = form.getCheckBox('some.checkBox.field')\n   * checkBox.check()\n   * ```\n   *\n   * This method will mark this check box as dirty, causing its appearance\n   * streams to be updated when either [[PDFDocument.save]] or\n   * [[PDFForm.updateFieldAppearances]] is called. The updated appearance\n   * streams will display a check mark inside the widgets of this check box\n   * field.\n   */\n  PDFCheckBox.prototype.check = function () {\n    var _a;\n    var onValue = (_a = this.acroField.getOnValue()) !== null && _a !== void 0 ? _a : PDFName.of('Yes');\n    this.markAsDirty();\n    this.acroField.setValue(onValue);\n  };\n  /**\n   * Clears this check box. This operation is analogous to a human user clicking\n   * a check box to unmark it in a PDF reader. This method will update the\n   * underlying state of the check box field to indicate it has been deselected.\n   * PDF libraries and readers will be able to extract this value from the\n   * saved document and determine that it was not selected.\n   *\n   * For example:\n   * ```js\n   * const checkBox = form.getCheckBox('some.checkBox.field')\n   * checkBox.uncheck()\n   * ```\n   *\n   * This method will mark this check box as dirty. See [[PDFCheckBox.check]]\n   * for more details about what this means.\n   */\n  PDFCheckBox.prototype.uncheck = function () {\n    this.markAsDirty();\n    this.acroField.setValue(PDFName.of('Off'));\n  };\n  /**\n   * Returns `true` if this check box is selected (either by a human user via\n   * a PDF reader, or else programmatically via software). For example:\n   * ```js\n   * const checkBox = form.getCheckBox('some.checkBox.field')\n   * if (checkBox.isChecked()) console.log('check box is selected')\n   * ```\n   * @returns Whether or not this check box is selected.\n   */\n  PDFCheckBox.prototype.isChecked = function () {\n    var onValue = this.acroField.getOnValue();\n    return !!onValue && onValue === this.acroField.getValue();\n  };\n  /**\n   * Show this check box on the specified page. For example:\n   * ```js\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const checkBox = form.createCheckBox('some.checkBox.field')\n   *\n   * checkBox.addToPage(page, {\n   *   x: 50,\n   *   y: 75,\n   *   width: 25,\n   *   height: 25,\n   *   textColor: rgb(1, 0, 0),\n   *   backgroundColor: rgb(0, 1, 0),\n   *   borderColor: rgb(0, 0, 1),\n   *   borderWidth: 2,\n   *   rotate: degrees(90),\n   * })\n   * ```\n   * This will create a new widget for this check box field.\n   * @param page The page to which this check box widget should be added.\n   * @param options The options to be used when adding this check box widget.\n   */\n  PDFCheckBox.prototype.addToPage = function (page, options) {\n    var _a, _b, _c, _d, _e, _f;\n    assertIs(page, 'page', [[PDFPage, 'PDFPage']]);\n    assertFieldAppearanceOptions(options);\n    if (!options) options = {};\n    if (!('textColor' in options)) options.textColor = rgb(0, 0, 0);\n    if (!('backgroundColor' in options)) options.backgroundColor = rgb(1, 1, 1);\n    if (!('borderColor' in options)) options.borderColor = rgb(0, 0, 0);\n    if (!('borderWidth' in options)) options.borderWidth = 1;\n    // Create a widget for this check box\n    var widget = this.createWidget({\n      x: (_a = options.x) !== null && _a !== void 0 ? _a : 0,\n      y: (_b = options.y) !== null && _b !== void 0 ? _b : 0,\n      width: (_c = options.width) !== null && _c !== void 0 ? _c : 50,\n      height: (_d = options.height) !== null && _d !== void 0 ? _d : 50,\n      textColor: options.textColor,\n      backgroundColor: options.backgroundColor,\n      borderColor: options.borderColor,\n      borderWidth: (_e = options.borderWidth) !== null && _e !== void 0 ? _e : 0,\n      rotate: (_f = options.rotate) !== null && _f !== void 0 ? _f : degrees(0),\n      hidden: options.hidden,\n      page: page.ref\n    });\n    var widgetRef = this.doc.context.register(widget.dict);\n    // Add widget to this field\n    this.acroField.addWidget(widgetRef);\n    // Set appearance streams for widget\n    widget.setAppearanceState(PDFName.of('Off'));\n    this.updateWidgetAppearance(widget, PDFName.of('Yes'));\n    // Add widget to the given page\n    page.node.addAnnot(widgetRef);\n  };\n  /**\n   * Returns `true` if any of this check box's widgets do not have an\n   * appearance stream for its current state. For example:\n   * ```js\n   * const checkBox = form.getCheckBox('some.checkBox.field')\n   * if (checkBox.needsAppearancesUpdate()) console.log('Needs update')\n   * ```\n   * @returns Whether or not this check box needs an appearance update.\n   */\n  PDFCheckBox.prototype.needsAppearancesUpdate = function () {\n    var _a;\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var state = widget.getAppearanceState();\n      var normal = (_a = widget.getAppearances()) === null || _a === void 0 ? void 0 : _a.normal;\n      if (!(normal instanceof PDFDict)) return true;\n      if (state && !normal.has(state)) return true;\n    }\n    return false;\n  };\n  /**\n   * Update the appearance streams for each of this check box's widgets using\n   * the default appearance provider for check boxes. For example:\n   * ```js\n   * const checkBox = form.getCheckBox('some.checkBox.field')\n   * checkBox.defaultUpdateAppearances()\n   * ```\n   */\n  PDFCheckBox.prototype.defaultUpdateAppearances = function () {\n    this.updateAppearances();\n  };\n  /**\n   * Update the appearance streams for each of this check box's widgets using\n   * the given appearance provider. If no `provider` is passed, the default\n   * appearance provider for check boxs will be used. For example:\n   * ```js\n   * const checkBox = form.getCheckBox('some.checkBox.field')\n   * checkBox.updateAppearances((field, widget) => {\n   *   ...\n   *   return {\n   *     normal: { on: drawCheckBox(...), off: drawCheckBox(...) },\n   *     down: { on: drawCheckBox(...), off: drawCheckBox(...) },\n   *   }\n   * })\n   * ```\n   * @param provider Optionally, the appearance provider to be used for\n   *                 generating the contents of the appearance streams.\n   */\n  PDFCheckBox.prototype.updateAppearances = function (provider) {\n    var _a;\n    assertOrUndefined(provider, 'provider', [Function]);\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var onValue = (_a = widget.getOnValue()) !== null && _a !== void 0 ? _a : PDFName.of('Yes');\n      if (!onValue) continue;\n      this.updateWidgetAppearance(widget, onValue, provider);\n    }\n    this.markAsClean();\n  };\n  PDFCheckBox.prototype.updateWidgetAppearance = function (widget, onValue, provider) {\n    var apProvider = provider !== null && provider !== void 0 ? provider : defaultCheckBoxAppearanceProvider;\n    var appearances = normalizeAppearance(apProvider(this, widget));\n    this.updateOnOffWidgetAppearance(widget, onValue, appearances);\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFForm.getCheckBox]] method, which will create an\n   * > instance of [[PDFCheckBox]] for you.\n   *\n   * Create an instance of [[PDFCheckBox]] from an existing acroCheckBox and ref\n   *\n   * @param acroCheckBox The underlying `PDFAcroCheckBox` for this check box.\n   * @param ref The unique reference for this check box.\n   * @param doc The document to which this check box will belong.\n   */\n  PDFCheckBox.of = function (acroCheckBox, ref, doc) {\n    return new PDFCheckBox(acroCheckBox, ref, doc);\n  };\n  return PDFCheckBox;\n}(PDFField);\nexport default PDFCheckBox;","map":{"version":3,"names":["__extends","PDFPage","normalizeAppearance","defaultCheckBoxAppearanceProvider","rgb","degrees","PDFField","assertFieldAppearanceOptions","PDFName","PDFDict","PDFAcroCheckBox","assertIs","assertOrUndefined","PDFCheckBox","_super","acroCheckBox","ref","doc","_this","call","acroField","prototype","check","_a","onValue","getOnValue","of","markAsDirty","setValue","uncheck","isChecked","getValue","addToPage","page","options","_b","_c","_d","_e","_f","textColor","backgroundColor","borderColor","borderWidth","widget","createWidget","x","y","width","height","rotate","hidden","widgetRef","context","register","dict","addWidget","setAppearanceState","updateWidgetAppearance","node","addAnnot","needsAppearancesUpdate","widgets","getWidgets","idx","len","length","state","getAppearanceState","normal","getAppearances","has","defaultUpdateAppearances","updateAppearances","provider","Function","markAsClean","apProvider","appearances","updateOnOffWidgetAppearance"],"sources":["E:/PROA/frontPROA/node_modules/pdf-lib/es/api/form/PDFCheckBox.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport PDFPage from \"../PDFPage\";\nimport { normalizeAppearance, defaultCheckBoxAppearanceProvider, } from \"./appearances\";\nimport { rgb } from \"../colors\";\nimport { degrees } from \"../rotations\";\nimport PDFField, { assertFieldAppearanceOptions, } from \"./PDFField\";\nimport { PDFName, PDFDict, PDFAcroCheckBox, } from \"../../core\";\nimport { assertIs, assertOrUndefined } from \"../../utils\";\n/**\n * Represents a check box field of a [[PDFForm]].\n *\n * [[PDFCheckBox]] fields are interactive boxes that users can click with their\n * mouse. This type of [[PDFField]] has two states: `on` and `off`. The purpose\n * of a check box is to enable users to select from one or more options, where\n * each option is represented by a single check box. Check boxes are typically\n * square in shape and display a check mark when they are in the `on` state.\n */\nvar PDFCheckBox = /** @class */ (function (_super) {\n    __extends(PDFCheckBox, _super);\n    function PDFCheckBox(acroCheckBox, ref, doc) {\n        var _this = _super.call(this, acroCheckBox, ref, doc) || this;\n        assertIs(acroCheckBox, 'acroCheckBox', [\n            [PDFAcroCheckBox, 'PDFAcroCheckBox'],\n        ]);\n        _this.acroField = acroCheckBox;\n        return _this;\n    }\n    /**\n     * Mark this check box. This operation is analogous to a human user clicking\n     * a check box to fill it in a PDF reader. This method will update the\n     * underlying state of the check box field to indicate it has been selected.\n     * PDF libraries and readers will be able to extract this value from the\n     * saved document and determine that it was selected.\n     *\n     * For example:\n     * ```js\n     * const checkBox = form.getCheckBox('some.checkBox.field')\n     * checkBox.check()\n     * ```\n     *\n     * This method will mark this check box as dirty, causing its appearance\n     * streams to be updated when either [[PDFDocument.save]] or\n     * [[PDFForm.updateFieldAppearances]] is called. The updated appearance\n     * streams will display a check mark inside the widgets of this check box\n     * field.\n     */\n    PDFCheckBox.prototype.check = function () {\n        var _a;\n        var onValue = (_a = this.acroField.getOnValue()) !== null && _a !== void 0 ? _a : PDFName.of('Yes');\n        this.markAsDirty();\n        this.acroField.setValue(onValue);\n    };\n    /**\n     * Clears this check box. This operation is analogous to a human user clicking\n     * a check box to unmark it in a PDF reader. This method will update the\n     * underlying state of the check box field to indicate it has been deselected.\n     * PDF libraries and readers will be able to extract this value from the\n     * saved document and determine that it was not selected.\n     *\n     * For example:\n     * ```js\n     * const checkBox = form.getCheckBox('some.checkBox.field')\n     * checkBox.uncheck()\n     * ```\n     *\n     * This method will mark this check box as dirty. See [[PDFCheckBox.check]]\n     * for more details about what this means.\n     */\n    PDFCheckBox.prototype.uncheck = function () {\n        this.markAsDirty();\n        this.acroField.setValue(PDFName.of('Off'));\n    };\n    /**\n     * Returns `true` if this check box is selected (either by a human user via\n     * a PDF reader, or else programmatically via software). For example:\n     * ```js\n     * const checkBox = form.getCheckBox('some.checkBox.field')\n     * if (checkBox.isChecked()) console.log('check box is selected')\n     * ```\n     * @returns Whether or not this check box is selected.\n     */\n    PDFCheckBox.prototype.isChecked = function () {\n        var onValue = this.acroField.getOnValue();\n        return !!onValue && onValue === this.acroField.getValue();\n    };\n    /**\n     * Show this check box on the specified page. For example:\n     * ```js\n     * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n     * const page = pdfDoc.addPage()\n     *\n     * const form = pdfDoc.getForm()\n     * const checkBox = form.createCheckBox('some.checkBox.field')\n     *\n     * checkBox.addToPage(page, {\n     *   x: 50,\n     *   y: 75,\n     *   width: 25,\n     *   height: 25,\n     *   textColor: rgb(1, 0, 0),\n     *   backgroundColor: rgb(0, 1, 0),\n     *   borderColor: rgb(0, 0, 1),\n     *   borderWidth: 2,\n     *   rotate: degrees(90),\n     * })\n     * ```\n     * This will create a new widget for this check box field.\n     * @param page The page to which this check box widget should be added.\n     * @param options The options to be used when adding this check box widget.\n     */\n    PDFCheckBox.prototype.addToPage = function (page, options) {\n        var _a, _b, _c, _d, _e, _f;\n        assertIs(page, 'page', [[PDFPage, 'PDFPage']]);\n        assertFieldAppearanceOptions(options);\n        if (!options)\n            options = {};\n        if (!('textColor' in options))\n            options.textColor = rgb(0, 0, 0);\n        if (!('backgroundColor' in options))\n            options.backgroundColor = rgb(1, 1, 1);\n        if (!('borderColor' in options))\n            options.borderColor = rgb(0, 0, 0);\n        if (!('borderWidth' in options))\n            options.borderWidth = 1;\n        // Create a widget for this check box\n        var widget = this.createWidget({\n            x: (_a = options.x) !== null && _a !== void 0 ? _a : 0,\n            y: (_b = options.y) !== null && _b !== void 0 ? _b : 0,\n            width: (_c = options.width) !== null && _c !== void 0 ? _c : 50,\n            height: (_d = options.height) !== null && _d !== void 0 ? _d : 50,\n            textColor: options.textColor,\n            backgroundColor: options.backgroundColor,\n            borderColor: options.borderColor,\n            borderWidth: (_e = options.borderWidth) !== null && _e !== void 0 ? _e : 0,\n            rotate: (_f = options.rotate) !== null && _f !== void 0 ? _f : degrees(0),\n            hidden: options.hidden,\n            page: page.ref,\n        });\n        var widgetRef = this.doc.context.register(widget.dict);\n        // Add widget to this field\n        this.acroField.addWidget(widgetRef);\n        // Set appearance streams for widget\n        widget.setAppearanceState(PDFName.of('Off'));\n        this.updateWidgetAppearance(widget, PDFName.of('Yes'));\n        // Add widget to the given page\n        page.node.addAnnot(widgetRef);\n    };\n    /**\n     * Returns `true` if any of this check box's widgets do not have an\n     * appearance stream for its current state. For example:\n     * ```js\n     * const checkBox = form.getCheckBox('some.checkBox.field')\n     * if (checkBox.needsAppearancesUpdate()) console.log('Needs update')\n     * ```\n     * @returns Whether or not this check box needs an appearance update.\n     */\n    PDFCheckBox.prototype.needsAppearancesUpdate = function () {\n        var _a;\n        var widgets = this.acroField.getWidgets();\n        for (var idx = 0, len = widgets.length; idx < len; idx++) {\n            var widget = widgets[idx];\n            var state = widget.getAppearanceState();\n            var normal = (_a = widget.getAppearances()) === null || _a === void 0 ? void 0 : _a.normal;\n            if (!(normal instanceof PDFDict))\n                return true;\n            if (state && !normal.has(state))\n                return true;\n        }\n        return false;\n    };\n    /**\n     * Update the appearance streams for each of this check box's widgets using\n     * the default appearance provider for check boxes. For example:\n     * ```js\n     * const checkBox = form.getCheckBox('some.checkBox.field')\n     * checkBox.defaultUpdateAppearances()\n     * ```\n     */\n    PDFCheckBox.prototype.defaultUpdateAppearances = function () {\n        this.updateAppearances();\n    };\n    /**\n     * Update the appearance streams for each of this check box's widgets using\n     * the given appearance provider. If no `provider` is passed, the default\n     * appearance provider for check boxs will be used. For example:\n     * ```js\n     * const checkBox = form.getCheckBox('some.checkBox.field')\n     * checkBox.updateAppearances((field, widget) => {\n     *   ...\n     *   return {\n     *     normal: { on: drawCheckBox(...), off: drawCheckBox(...) },\n     *     down: { on: drawCheckBox(...), off: drawCheckBox(...) },\n     *   }\n     * })\n     * ```\n     * @param provider Optionally, the appearance provider to be used for\n     *                 generating the contents of the appearance streams.\n     */\n    PDFCheckBox.prototype.updateAppearances = function (provider) {\n        var _a;\n        assertOrUndefined(provider, 'provider', [Function]);\n        var widgets = this.acroField.getWidgets();\n        for (var idx = 0, len = widgets.length; idx < len; idx++) {\n            var widget = widgets[idx];\n            var onValue = (_a = widget.getOnValue()) !== null && _a !== void 0 ? _a : PDFName.of('Yes');\n            if (!onValue)\n                continue;\n            this.updateWidgetAppearance(widget, onValue, provider);\n        }\n        this.markAsClean();\n    };\n    PDFCheckBox.prototype.updateWidgetAppearance = function (widget, onValue, provider) {\n        var apProvider = provider !== null && provider !== void 0 ? provider : defaultCheckBoxAppearanceProvider;\n        var appearances = normalizeAppearance(apProvider(this, widget));\n        this.updateOnOffWidgetAppearance(widget, onValue, appearances);\n    };\n    /**\n     * > **NOTE:** You probably don't want to call this method directly. Instead,\n     * > consider using the [[PDFForm.getCheckBox]] method, which will create an\n     * > instance of [[PDFCheckBox]] for you.\n     *\n     * Create an instance of [[PDFCheckBox]] from an existing acroCheckBox and ref\n     *\n     * @param acroCheckBox The underlying `PDFAcroCheckBox` for this check box.\n     * @param ref The unique reference for this check box.\n     * @param doc The document to which this check box will belong.\n     */\n    PDFCheckBox.of = function (acroCheckBox, ref, doc) {\n        return new PDFCheckBox(acroCheckBox, ref, doc);\n    };\n    return PDFCheckBox;\n}(PDFField));\nexport default PDFCheckBox;\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,OAAOC,OAAO,MAAM,YAAY;AAChC,SAASC,mBAAmB,EAAEC,iCAAiC,QAAS,eAAe;AACvF,SAASC,GAAG,QAAQ,WAAW;AAC/B,SAASC,OAAO,QAAQ,cAAc;AACtC,OAAOC,QAAQ,IAAIC,4BAA4B,QAAS,YAAY;AACpE,SAASC,OAAO,EAAEC,OAAO,EAAEC,eAAe,QAAS,YAAY;AAC/D,SAASC,QAAQ,EAAEC,iBAAiB,QAAQ,aAAa;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,WAAW,GAAG,aAAe,UAAUC,MAAM,EAAE;EAC/Cd,SAAS,CAACa,WAAW,EAAEC,MAAM,CAAC;EAC9B,SAASD,WAAWA,CAACE,YAAY,EAAEC,GAAG,EAAEC,GAAG,EAAE;IACzC,IAAIC,KAAK,GAAGJ,MAAM,CAACK,IAAI,CAAC,IAAI,EAAEJ,YAAY,EAAEC,GAAG,EAAEC,GAAG,CAAC,IAAI,IAAI;IAC7DN,QAAQ,CAACI,YAAY,EAAE,cAAc,EAAE,CACnC,CAACL,eAAe,EAAE,iBAAiB,CAAC,CACvC,CAAC;IACFQ,KAAK,CAACE,SAAS,GAAGL,YAAY;IAC9B,OAAOG,KAAK;EAChB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIL,WAAW,CAACQ,SAAS,CAACC,KAAK,GAAG,YAAY;IACtC,IAAIC,EAAE;IACN,IAAIC,OAAO,GAAG,CAACD,EAAE,GAAG,IAAI,CAACH,SAAS,CAACK,UAAU,CAAC,CAAC,MAAM,IAAI,IAAIF,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGf,OAAO,CAACkB,EAAE,CAAC,KAAK,CAAC;IACnG,IAAI,CAACC,WAAW,CAAC,CAAC;IAClB,IAAI,CAACP,SAAS,CAACQ,QAAQ,CAACJ,OAAO,CAAC;EACpC,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIX,WAAW,CAACQ,SAAS,CAACQ,OAAO,GAAG,YAAY;IACxC,IAAI,CAACF,WAAW,CAAC,CAAC;IAClB,IAAI,CAACP,SAAS,CAACQ,QAAQ,CAACpB,OAAO,CAACkB,EAAE,CAAC,KAAK,CAAC,CAAC;EAC9C,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIb,WAAW,CAACQ,SAAS,CAACS,SAAS,GAAG,YAAY;IAC1C,IAAIN,OAAO,GAAG,IAAI,CAACJ,SAAS,CAACK,UAAU,CAAC,CAAC;IACzC,OAAO,CAAC,CAACD,OAAO,IAAIA,OAAO,KAAK,IAAI,CAACJ,SAAS,CAACW,QAAQ,CAAC,CAAC;EAC7D,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIlB,WAAW,CAACQ,SAAS,CAACW,SAAS,GAAG,UAAUC,IAAI,EAAEC,OAAO,EAAE;IACvD,IAAIX,EAAE,EAAEY,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE;IAC1B5B,QAAQ,CAACsB,IAAI,EAAE,MAAM,EAAE,CAAC,CAAChC,OAAO,EAAE,SAAS,CAAC,CAAC,CAAC;IAC9CM,4BAA4B,CAAC2B,OAAO,CAAC;IACrC,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;IAChB,IAAI,EAAE,WAAW,IAAIA,OAAO,CAAC,EACzBA,OAAO,CAACM,SAAS,GAAGpC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACpC,IAAI,EAAE,iBAAiB,IAAI8B,OAAO,CAAC,EAC/BA,OAAO,CAACO,eAAe,GAAGrC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAC1C,IAAI,EAAE,aAAa,IAAI8B,OAAO,CAAC,EAC3BA,OAAO,CAACQ,WAAW,GAAGtC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACtC,IAAI,EAAE,aAAa,IAAI8B,OAAO,CAAC,EAC3BA,OAAO,CAACS,WAAW,GAAG,CAAC;IAC3B;IACA,IAAIC,MAAM,GAAG,IAAI,CAACC,YAAY,CAAC;MAC3BC,CAAC,EAAE,CAACvB,EAAE,GAAGW,OAAO,CAACY,CAAC,MAAM,IAAI,IAAIvB,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC;MACtDwB,CAAC,EAAE,CAACZ,EAAE,GAAGD,OAAO,CAACa,CAAC,MAAM,IAAI,IAAIZ,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC;MACtDa,KAAK,EAAE,CAACZ,EAAE,GAAGF,OAAO,CAACc,KAAK,MAAM,IAAI,IAAIZ,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,EAAE;MAC/Da,MAAM,EAAE,CAACZ,EAAE,GAAGH,OAAO,CAACe,MAAM,MAAM,IAAI,IAAIZ,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,EAAE;MACjEG,SAAS,EAAEN,OAAO,CAACM,SAAS;MAC5BC,eAAe,EAAEP,OAAO,CAACO,eAAe;MACxCC,WAAW,EAAER,OAAO,CAACQ,WAAW;MAChCC,WAAW,EAAE,CAACL,EAAE,GAAGJ,OAAO,CAACS,WAAW,MAAM,IAAI,IAAIL,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC;MAC1EY,MAAM,EAAE,CAACX,EAAE,GAAGL,OAAO,CAACgB,MAAM,MAAM,IAAI,IAAIX,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGlC,OAAO,CAAC,CAAC,CAAC;MACzE8C,MAAM,EAAEjB,OAAO,CAACiB,MAAM;MACtBlB,IAAI,EAAEA,IAAI,CAACjB;IACf,CAAC,CAAC;IACF,IAAIoC,SAAS,GAAG,IAAI,CAACnC,GAAG,CAACoC,OAAO,CAACC,QAAQ,CAACV,MAAM,CAACW,IAAI,CAAC;IACtD;IACA,IAAI,CAACnC,SAAS,CAACoC,SAAS,CAACJ,SAAS,CAAC;IACnC;IACAR,MAAM,CAACa,kBAAkB,CAACjD,OAAO,CAACkB,EAAE,CAAC,KAAK,CAAC,CAAC;IAC5C,IAAI,CAACgC,sBAAsB,CAACd,MAAM,EAAEpC,OAAO,CAACkB,EAAE,CAAC,KAAK,CAAC,CAAC;IACtD;IACAO,IAAI,CAAC0B,IAAI,CAACC,QAAQ,CAACR,SAAS,CAAC;EACjC,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIvC,WAAW,CAACQ,SAAS,CAACwC,sBAAsB,GAAG,YAAY;IACvD,IAAItC,EAAE;IACN,IAAIuC,OAAO,GAAG,IAAI,CAAC1C,SAAS,CAAC2C,UAAU,CAAC,CAAC;IACzC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEC,GAAG,GAAGH,OAAO,CAACI,MAAM,EAAEF,GAAG,GAAGC,GAAG,EAAED,GAAG,EAAE,EAAE;MACtD,IAAIpB,MAAM,GAAGkB,OAAO,CAACE,GAAG,CAAC;MACzB,IAAIG,KAAK,GAAGvB,MAAM,CAACwB,kBAAkB,CAAC,CAAC;MACvC,IAAIC,MAAM,GAAG,CAAC9C,EAAE,GAAGqB,MAAM,CAAC0B,cAAc,CAAC,CAAC,MAAM,IAAI,IAAI/C,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC8C,MAAM;MAC1F,IAAI,EAAEA,MAAM,YAAY5D,OAAO,CAAC,EAC5B,OAAO,IAAI;MACf,IAAI0D,KAAK,IAAI,CAACE,MAAM,CAACE,GAAG,CAACJ,KAAK,CAAC,EAC3B,OAAO,IAAI;IACnB;IACA,OAAO,KAAK;EAChB,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACItD,WAAW,CAACQ,SAAS,CAACmD,wBAAwB,GAAG,YAAY;IACzD,IAAI,CAACC,iBAAiB,CAAC,CAAC;EAC5B,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI5D,WAAW,CAACQ,SAAS,CAACoD,iBAAiB,GAAG,UAAUC,QAAQ,EAAE;IAC1D,IAAInD,EAAE;IACNX,iBAAiB,CAAC8D,QAAQ,EAAE,UAAU,EAAE,CAACC,QAAQ,CAAC,CAAC;IACnD,IAAIb,OAAO,GAAG,IAAI,CAAC1C,SAAS,CAAC2C,UAAU,CAAC,CAAC;IACzC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEC,GAAG,GAAGH,OAAO,CAACI,MAAM,EAAEF,GAAG,GAAGC,GAAG,EAAED,GAAG,EAAE,EAAE;MACtD,IAAIpB,MAAM,GAAGkB,OAAO,CAACE,GAAG,CAAC;MACzB,IAAIxC,OAAO,GAAG,CAACD,EAAE,GAAGqB,MAAM,CAACnB,UAAU,CAAC,CAAC,MAAM,IAAI,IAAIF,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGf,OAAO,CAACkB,EAAE,CAAC,KAAK,CAAC;MAC3F,IAAI,CAACF,OAAO,EACR;MACJ,IAAI,CAACkC,sBAAsB,CAACd,MAAM,EAAEpB,OAAO,EAAEkD,QAAQ,CAAC;IAC1D;IACA,IAAI,CAACE,WAAW,CAAC,CAAC;EACtB,CAAC;EACD/D,WAAW,CAACQ,SAAS,CAACqC,sBAAsB,GAAG,UAAUd,MAAM,EAAEpB,OAAO,EAAEkD,QAAQ,EAAE;IAChF,IAAIG,UAAU,GAAGH,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,KAAK,CAAC,GAAGA,QAAQ,GAAGvE,iCAAiC;IACxG,IAAI2E,WAAW,GAAG5E,mBAAmB,CAAC2E,UAAU,CAAC,IAAI,EAAEjC,MAAM,CAAC,CAAC;IAC/D,IAAI,CAACmC,2BAA2B,CAACnC,MAAM,EAAEpB,OAAO,EAAEsD,WAAW,CAAC;EAClE,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIjE,WAAW,CAACa,EAAE,GAAG,UAAUX,YAAY,EAAEC,GAAG,EAAEC,GAAG,EAAE;IAC/C,OAAO,IAAIJ,WAAW,CAACE,YAAY,EAAEC,GAAG,EAAEC,GAAG,CAAC;EAClD,CAAC;EACD,OAAOJ,WAAW;AACtB,CAAC,CAACP,QAAQ,CAAE;AACZ,eAAeO,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}