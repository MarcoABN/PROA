{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let ValidadorcpfcnpjService = /*#__PURE__*/(() => {\n  class ValidadorcpfcnpjService {\n    constructor() {}\n    validarCpfCnpj(cpfCnpj) {\n      const valor = cpfCnpj.replace(/[^\\d]+/g, '');\n      if (valor.length === 11) {\n        return this.validarCPF(valor);\n      } else if (valor.length === 14) {\n        return this.validarCNPJ(valor);\n      }\n      return false;\n    }\n    validarCPF(cpf) {\n      if (cpf.length !== 11 || /^(\\d)\\1{10}$/.test(cpf)) {\n        return false;\n      }\n      let soma = 0;\n      let resto;\n      for (let i = 1; i <= 9; i++) {\n        soma += parseInt(cpf.substring(i - 1, i)) * (11 - i);\n      }\n      resto = soma * 10 % 11;\n      if (resto === 10 || resto === 11) {\n        resto = 0;\n      }\n      if (resto !== parseInt(cpf.substring(9, 10))) {\n        return false;\n      }\n      soma = 0;\n      for (let i = 1; i <= 10; i++) {\n        soma += parseInt(cpf.substring(i - 1, i)) * (12 - i);\n      }\n      resto = soma * 10 % 11;\n      if (resto === 10 || resto === 11) {\n        resto = 0;\n      }\n      return resto === parseInt(cpf.substring(10, 11));\n    }\n    validarCNPJ(cnpj) {\n      if (cnpj.length !== 14 || /^(\\d)\\1{13}$/.test(cnpj)) {\n        return false;\n      }\n      let tamanho = cnpj.length - 2;\n      let numeros = cnpj.substring(0, tamanho);\n      let digitos = cnpj.substring(tamanho);\n      let soma = 0;\n      let pos = tamanho - 7;\n      for (let i = tamanho; i >= 1; i--) {\n        soma += parseInt(numeros.charAt(tamanho - i)) * pos--;\n        if (pos < 2) {\n          pos = 9;\n        }\n      }\n      let resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;\n      if (resultado !== parseInt(digitos.charAt(0))) {\n        return false;\n      }\n      tamanho = tamanho + 1;\n      numeros = cnpj.substring(0, tamanho);\n      soma = 0;\n      pos = tamanho - 7;\n      for (let i = tamanho; i >= 1; i--) {\n        soma += parseInt(numeros.charAt(tamanho - i)) * pos--;\n        if (pos < 2) {\n          pos = 9;\n        }\n      }\n      resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;\n      return resultado === parseInt(digitos.charAt(1));\n    }\n    static #_ = this.ɵfac = function ValidadorcpfcnpjService_Factory(t) {\n      return new (t || ValidadorcpfcnpjService)();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ValidadorcpfcnpjService,\n      factory: ValidadorcpfcnpjService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ValidadorcpfcnpjService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}